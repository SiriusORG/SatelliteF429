
SatelliteF429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c90  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08006e40  08006e40  00016e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fd8  08006fd8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006fd8  08006fd8  00016fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fe0  08006fe0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fe0  08006fe0  00016fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004970  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200049e4  200049e4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021981  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044a9  00000000  00000000  00041a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017b8  00000000  00000000  00045ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001618  00000000  00000000  00047688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027f69  00000000  00000000  00048ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e229  00000000  00000000  00070c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7d9d  00000000  00000000  0008ee32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00176bcf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067fc  00000000  00000000  00176c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006e28 	.word	0x08006e28

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08006e28 	.word	0x08006e28

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <UserTaskInit>:
 * @param[output]     none
 * @return            none
 * @note              none
 *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */
void UserTaskInit(void const *argument) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	/*
	 * Initialise Device Here
	 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, uart_rx_buf, UART_RX_BUF_SIZE);
 8000590:	22ff      	movs	r2, #255	; 0xff
 8000592:	4915      	ldr	r1, [pc, #84]	; (80005e8 <UserTaskInit+0x60>)
 8000594:	4815      	ldr	r0, [pc, #84]	; (80005ec <UserTaskInit+0x64>)
 8000596:	f003 f96a 	bl	800386e <HAL_UARTEx_ReceiveToIdle_DMA>

	gsMessage[0] = 0x7F;
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <UserTaskInit+0x68>)
 800059c:	227f      	movs	r2, #127	; 0x7f
 800059e:	701a      	strb	r2, [r3, #0]
	gsMessage[1] = 4;
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <UserTaskInit+0x68>)
 80005a2:	2204      	movs	r2, #4
 80005a4:	705a      	strb	r2, [r3, #1]
	gsMessage[2] = 0;
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <UserTaskInit+0x68>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	709a      	strb	r2, [r3, #2]
	gsMessage[3] = 1;
 80005ac:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <UserTaskInit+0x68>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	70da      	strb	r2, [r3, #3]
	gsMessage[4] = 2;
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <UserTaskInit+0x68>)
 80005b4:	2202      	movs	r2, #2
 80005b6:	711a      	strb	r2, [r3, #4]
	gsMessage[5] = 1;
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <UserTaskInit+0x68>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	715a      	strb	r2, [r3, #5]
	gsMessage[6] = 2;
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <UserTaskInit+0x68>)
 80005c0:	2202      	movs	r2, #2
 80005c2:	719a      	strb	r2, [r3, #6]
	gsMessage[7] = 3;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <UserTaskInit+0x68>)
 80005c6:	2203      	movs	r2, #3
 80005c8:	71da      	strb	r2, [r3, #7]
	gsMessage[8] = 4;
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <UserTaskInit+0x68>)
 80005cc:	2204      	movs	r2, #4
 80005ce:	721a      	strb	r2, [r3, #8]
	gsMessage[9] = 0x32;
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <UserTaskInit+0x68>)
 80005d2:	2232      	movs	r2, #50	; 0x32
 80005d4:	725a      	strb	r2, [r3, #9]
	gsMessage[10] = 0x73;
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <UserTaskInit+0x68>)
 80005d8:	2273      	movs	r2, #115	; 0x73
 80005da:	729a      	strb	r2, [r3, #10]

	UserTaskLoop();
 80005dc:	f000 f80a 	bl	80005f4 <UserTaskLoop>

}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200041b0 	.word	0x200041b0
 80005ec:	20004584 	.word	0x20004584
 80005f0:	200040b0 	.word	0x200040b0

080005f4 <UserTaskLoop>:
 * @param[output]     none
 * @return            none
 * @note              none
 *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */
void UserTaskLoop(void const *argument) {
 80005f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f6:	b091      	sub	sp, #68	; 0x44
 80005f8:	af0a      	add	r7, sp, #40	; 0x28
 80005fa:	60f8      	str	r0, [r7, #12]
	/* blink the Amber LED for 50ms to indicate the OBC is running */
	//__HAL_DMA_DISABLE_IT(&huart3, DMA_IT_HT);
	for (;;) {
		if (HAL_GetTick() - u32_SevenHundredMillisecondLoop > SEVENHUNDREDMILLISECONDS) {
 80005fc:	f000 ff34 	bl	8001468 <HAL_GetTick>
 8000600:	4602      	mov	r2, r0
 8000602:	4b45      	ldr	r3, [pc, #276]	; (8000718 <UserTaskLoop+0x124>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800060c:	d908      	bls.n	8000620 <UserTaskLoop+0x2c>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	4842      	ldr	r0, [pc, #264]	; (800071c <UserTaskLoop+0x128>)
 8000612:	f001 fe02 	bl	800221a <HAL_GPIO_TogglePin>
			u32_SevenHundredMillisecondLoop = HAL_GetTick();
 8000616:	f000 ff27 	bl	8001468 <HAL_GetTick>
 800061a:	4603      	mov	r3, r0
 800061c:	4a3e      	ldr	r2, [pc, #248]	; (8000718 <UserTaskLoop+0x124>)
 800061e:	6013      	str	r3, [r2, #0]
		}

		if (HAL_GetTick() - u32_HundredMilliSecondLoop_ms > HUNDREDMILLISECONDS) {
 8000620:	f000 ff22 	bl	8001468 <HAL_GetTick>
 8000624:	4602      	mov	r2, r0
 8000626:	4b3e      	ldr	r3, [pc, #248]	; (8000720 <UserTaskLoop+0x12c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	2b64      	cmp	r3, #100	; 0x64
 800062e:	d908      	bls.n	8000642 <UserTaskLoop+0x4e>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000630:	2101      	movs	r1, #1
 8000632:	483a      	ldr	r0, [pc, #232]	; (800071c <UserTaskLoop+0x128>)
 8000634:	f001 fdf1 	bl	800221a <HAL_GPIO_TogglePin>
			u32_HundredMilliSecondLoop_ms = HAL_GetTick();
 8000638:	f000 ff16 	bl	8001468 <HAL_GetTick>
 800063c:	4603      	mov	r3, r0
 800063e:	4a38      	ldr	r2, [pc, #224]	; (8000720 <UserTaskLoop+0x12c>)
 8000640:	6013      	str	r3, [r2, #0]
		}

		if(HAL_GetTick() - u32_SecondLoop_ms > ONESECOND){
 8000642:	f000 ff11 	bl	8001468 <HAL_GetTick>
 8000646:	4602      	mov	r2, r0
 8000648:	4b36      	ldr	r3, [pc, #216]	; (8000724 <UserTaskLoop+0x130>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000652:	d95c      	bls.n	800070e <UserTaskLoop+0x11a>
			//HAL_UART_Transmit(&huart3, (uint8_t*)"Hello from UserTaskLoop\r\n", 25, 20);
			for (int i = 0; i < sizeof(gsMessage) ;i++){
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	e051      	b.n	80006fe <UserTaskLoop+0x10a>
				uint8_t response = gsCommManagerProcessBuffer(gsMessage[i]);
 800065a:	4a33      	ldr	r2, [pc, #204]	; (8000728 <UserTaskLoop+0x134>)
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fa40 	bl	8000ae8 <gsCommManagerProcessBuffer>
 8000668:	4603      	mov	r3, r0
 800066a:	74fb      	strb	r3, [r7, #19]
				if (response == 1){
 800066c:	7cfb      	ldrb	r3, [r7, #19]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d139      	bne.n	80006e6 <UserTaskLoop+0xf2>
					printSize = snprintf(uartBuff, sizeof(uartBuff),"**Received from GS**\r\nPayload Length: %d\r\nSquence: %d\r\nFlag: %d\r\nCommand: %d\r\nPayload: %d %d %d %d\r\nCRC16: %x%x\r\n\n", gsCommPacket.data[0], gsCommPacket.data[1], gsCommPacket.data[2], gsCommPacket.data[3], gsCommPacket.data[4], gsCommPacket.data[5], gsCommPacket.data[6], gsCommPacket.data[7], gsCommPacket.data[8], gsCommPacket.data[9]);
 8000672:	4b2e      	ldr	r3, [pc, #184]	; (800072c <UserTaskLoop+0x138>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	469c      	mov	ip, r3
 8000678:	4b2c      	ldr	r3, [pc, #176]	; (800072c <UserTaskLoop+0x138>)
 800067a:	785b      	ldrb	r3, [r3, #1]
 800067c:	461a      	mov	r2, r3
 800067e:	4b2b      	ldr	r3, [pc, #172]	; (800072c <UserTaskLoop+0x138>)
 8000680:	789b      	ldrb	r3, [r3, #2]
 8000682:	4619      	mov	r1, r3
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <UserTaskLoop+0x138>)
 8000686:	78db      	ldrb	r3, [r3, #3]
 8000688:	4618      	mov	r0, r3
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <UserTaskLoop+0x138>)
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	461c      	mov	r4, r3
 8000690:	4b26      	ldr	r3, [pc, #152]	; (800072c <UserTaskLoop+0x138>)
 8000692:	795b      	ldrb	r3, [r3, #5]
 8000694:	461d      	mov	r5, r3
 8000696:	4b25      	ldr	r3, [pc, #148]	; (800072c <UserTaskLoop+0x138>)
 8000698:	799b      	ldrb	r3, [r3, #6]
 800069a:	461e      	mov	r6, r3
 800069c:	4b23      	ldr	r3, [pc, #140]	; (800072c <UserTaskLoop+0x138>)
 800069e:	79db      	ldrb	r3, [r3, #7]
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	4b22      	ldr	r3, [pc, #136]	; (800072c <UserTaskLoop+0x138>)
 80006a4:	7a1b      	ldrb	r3, [r3, #8]
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <UserTaskLoop+0x138>)
 80006aa:	7a5b      	ldrb	r3, [r3, #9]
 80006ac:	9308      	str	r3, [sp, #32]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	9307      	str	r3, [sp, #28]
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	9306      	str	r3, [sp, #24]
 80006b6:	9605      	str	r6, [sp, #20]
 80006b8:	9504      	str	r5, [sp, #16]
 80006ba:	9403      	str	r4, [sp, #12]
 80006bc:	9002      	str	r0, [sp, #8]
 80006be:	9101      	str	r1, [sp, #4]
 80006c0:	9200      	str	r2, [sp, #0]
 80006c2:	4663      	mov	r3, ip
 80006c4:	4a1a      	ldr	r2, [pc, #104]	; (8000730 <UserTaskLoop+0x13c>)
 80006c6:	21c8      	movs	r1, #200	; 0xc8
 80006c8:	481a      	ldr	r0, [pc, #104]	; (8000734 <UserTaskLoop+0x140>)
 80006ca:	f005 ffe5 	bl	8006698 <sniprintf>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <UserTaskLoop+0x144>)
 80006d4:	801a      	strh	r2, [r3, #0]
					HAL_UART_Transmit(&huart3, uartBuff, printSize, 20);
 80006d6:	4b18      	ldr	r3, [pc, #96]	; (8000738 <UserTaskLoop+0x144>)
 80006d8:	881a      	ldrh	r2, [r3, #0]
 80006da:	2314      	movs	r3, #20
 80006dc:	4915      	ldr	r1, [pc, #84]	; (8000734 <UserTaskLoop+0x140>)
 80006de:	4817      	ldr	r0, [pc, #92]	; (800073c <UserTaskLoop+0x148>)
 80006e0:	f003 f833 	bl	800374a <HAL_UART_Transmit>
 80006e4:	e008      	b.n	80006f8 <UserTaskLoop+0x104>
				}else if (response == 2){
 80006e6:	7cfb      	ldrb	r3, [r7, #19]
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d105      	bne.n	80006f8 <UserTaskLoop+0x104>
					HAL_UART_Transmit(&huart3, (uint8_t*)"BAD CRC\r\n", 9, 20);
 80006ec:	2314      	movs	r3, #20
 80006ee:	2209      	movs	r2, #9
 80006f0:	4913      	ldr	r1, [pc, #76]	; (8000740 <UserTaskLoop+0x14c>)
 80006f2:	4812      	ldr	r0, [pc, #72]	; (800073c <UserTaskLoop+0x148>)
 80006f4:	f003 f829 	bl	800374a <HAL_UART_Transmit>
			for (int i = 0; i < sizeof(gsMessage) ;i++){
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	3301      	adds	r3, #1
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	2bfe      	cmp	r3, #254	; 0xfe
 8000702:	d9aa      	bls.n	800065a <UserTaskLoop+0x66>
				}
			}
			u32_SecondLoop_ms = HAL_GetTick();
 8000704:	f000 feb0 	bl	8001468 <HAL_GetTick>
 8000708:	4603      	mov	r3, r0
 800070a:	4a06      	ldr	r2, [pc, #24]	; (8000724 <UserTaskLoop+0x130>)
 800070c:	6013      	str	r3, [r2, #0]
		}
		osDelay(5);
 800070e:	2005      	movs	r0, #5
 8000710:	f004 fc9d 	bl	800504e <osDelay>
		if (HAL_GetTick() - u32_SevenHundredMillisecondLoop > SEVENHUNDREDMILLISECONDS) {
 8000714:	e772      	b.n	80005fc <UserTaskLoop+0x8>
 8000716:	bf00      	nop
 8000718:	20000090 	.word	0x20000090
 800071c:	40020400 	.word	0x40020400
 8000720:	20000094 	.word	0x20000094
 8000724:	20000098 	.word	0x20000098
 8000728:	200040b0 	.word	0x200040b0
 800072c:	20004384 	.word	0x20004384
 8000730:	08006e40 	.word	0x08006e40
 8000734:	200042b0 	.word	0x200042b0
 8000738:	20004378 	.word	0x20004378
 800073c:	20004584 	.word	0x20004584
 8000740:	08006eb4 	.word	0x08006eb4

08000744 <HAL_UARTEx_RxEventCallback>:
	}
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart3, (uint8_t*)"Received\r\n", 10, 20);
 8000750:	2314      	movs	r3, #20
 8000752:	220a      	movs	r2, #10
 8000754:	490a      	ldr	r1, [pc, #40]	; (8000780 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000756:	480b      	ldr	r0, [pc, #44]	; (8000784 <HAL_UARTEx_RxEventCallback+0x40>)
 8000758:	f002 fff7 	bl	800374a <HAL_UART_Transmit>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) uart_rx_buf, UART_RX_BUF_SIZE);
 800075c:	22ff      	movs	r2, #255	; 0xff
 800075e:	490a      	ldr	r1, [pc, #40]	; (8000788 <HAL_UARTEx_RxEventCallback+0x44>)
 8000760:	4808      	ldr	r0, [pc, #32]	; (8000784 <HAL_UARTEx_RxEventCallback+0x40>)
 8000762:	f003 f884 	bl	800386e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_UARTEx_RxEventCallback+0x48>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <HAL_UARTEx_RxEventCallback+0x48>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f022 0208 	bic.w	r2, r2, #8
 8000774:	601a      	str	r2, [r3, #0]
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	08006ec0 	.word	0x08006ec0
 8000784:	20004584 	.word	0x20004584
 8000788:	200041b0 	.word	0x200041b0
 800078c:	20004524 	.word	0x20004524

08000790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_DMA_Init+0x3c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <MX_DMA_Init+0x3c>)
 80007a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_DMA_Init+0x3c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2105      	movs	r1, #5
 80007b6:	200c      	movs	r0, #12
 80007b8:	f000 ff3e 	bl	8001638 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007bc:	200c      	movs	r0, #12
 80007be:	f000 ff57 	bl	8001670 <HAL_NVIC_EnableIRQ>

}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4a07      	ldr	r2, [pc, #28]	; (80007fc <vApplicationGetIdleTaskMemory+0x2c>)
 80007e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <vApplicationGetIdleTaskMemory+0x30>)
 80007e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	2000009c 	.word	0x2000009c
 8000800:	20000150 	.word	0x20000150

08000804 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000804:	b5b0      	push	{r4, r5, r7, lr}
 8000806:	b08e      	sub	sp, #56	; 0x38
 8000808:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_FREERTOS_Init+0x58>)
 800080c:	f107 041c 	add.w	r4, r7, #28
 8000810:	461d      	mov	r5, r3
 8000812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000816:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800081a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f004 fbc6 	bl	8004fb6 <osThreadCreate>
 800082a:	4603      	mov	r3, r0
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <MX_FREERTOS_Init+0x5c>)
 800082e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(myUserTask, UserTaskInit, osPriorityNormal, 0, 6*128);
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_FREERTOS_Init+0x60>)
 8000832:	463c      	mov	r4, r7
 8000834:	461d      	mov	r5, r3
 8000836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800083e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  userTaskHandle = osThreadCreate(osThread(myUserTask), NULL);
 8000842:	463b      	mov	r3, r7
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f004 fbb5 	bl	8004fb6 <osThreadCreate>
 800084c:	4603      	mov	r3, r0
 800084e:	4a06      	ldr	r2, [pc, #24]	; (8000868 <MX_FREERTOS_Init+0x64>)
 8000850:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

}
 8000852:	bf00      	nop
 8000854:	3738      	adds	r7, #56	; 0x38
 8000856:	46bd      	mov	sp, r7
 8000858:	bdb0      	pop	{r4, r5, r7, pc}
 800085a:	bf00      	nop
 800085c:	08006ee4 	.word	0x08006ee4
 8000860:	2000437c 	.word	0x2000437c
 8000864:	08006f00 	.word	0x08006f00
 8000868:	20004380 	.word	0x20004380

0800086c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000874:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <StartDefaultTask+0x1c>)
 800087a:	f001 fcce 	bl	800221a <HAL_GPIO_TogglePin>
	  osDelay(1000);
 800087e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000882:	f004 fbe4 	bl	800504e <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000886:	e7f5      	b.n	8000874 <StartDefaultTask+0x8>
 8000888:	40020400 	.word	0x40020400

0800088c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	4b6d      	ldr	r3, [pc, #436]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a6c      	ldr	r2, [pc, #432]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b6a      	ldr	r3, [pc, #424]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	4b66      	ldr	r3, [pc, #408]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a65      	ldr	r2, [pc, #404]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b63      	ldr	r3, [pc, #396]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b5f      	ldr	r3, [pc, #380]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a5e      	ldr	r2, [pc, #376]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b5c      	ldr	r3, [pc, #368]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b58      	ldr	r3, [pc, #352]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a57      	ldr	r2, [pc, #348]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b55      	ldr	r3, [pc, #340]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b51      	ldr	r3, [pc, #324]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a50      	ldr	r2, [pc, #320]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b4e      	ldr	r3, [pc, #312]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b4a      	ldr	r3, [pc, #296]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a49      	ldr	r2, [pc, #292]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 8000938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b47      	ldr	r3, [pc, #284]	; (8000a5c <MX_GPIO_Init+0x1d0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000950:	4843      	ldr	r0, [pc, #268]	; (8000a60 <MX_GPIO_Init+0x1d4>)
 8000952:	f001 fc49 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2140      	movs	r1, #64	; 0x40
 800095a:	4842      	ldr	r0, [pc, #264]	; (8000a64 <MX_GPIO_Init+0x1d8>)
 800095c:	f001 fc44 	bl	80021e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000966:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	483c      	ldr	r0, [pc, #240]	; (8000a68 <MX_GPIO_Init+0x1dc>)
 8000978:	f001 fa8a 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800097c:	2332      	movs	r3, #50	; 0x32
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800098c:	230b      	movs	r3, #11
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4834      	ldr	r0, [pc, #208]	; (8000a68 <MX_GPIO_Init+0x1dc>)
 8000998:	f001 fa7a 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800099c:	2386      	movs	r3, #134	; 0x86
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ac:	230b      	movs	r3, #11
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	482d      	ldr	r0, [pc, #180]	; (8000a6c <MX_GPIO_Init+0x1e0>)
 80009b8:	f001 fa6a 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009bc:	f244 0381 	movw	r3, #16513	; 0x4081
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4822      	ldr	r0, [pc, #136]	; (8000a60 <MX_GPIO_Init+0x1d4>)
 80009d6:	f001 fa5b 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ec:	230b      	movs	r3, #11
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	481a      	ldr	r0, [pc, #104]	; (8000a60 <MX_GPIO_Init+0x1d4>)
 80009f8:	f001 fa4a 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009fc:	2340      	movs	r3, #64	; 0x40
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4814      	ldr	r0, [pc, #80]	; (8000a64 <MX_GPIO_Init+0x1d8>)
 8000a14:	f001 fa3c 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480e      	ldr	r0, [pc, #56]	; (8000a64 <MX_GPIO_Init+0x1d8>)
 8000a2c:	f001 fa30 	bl	8001e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a30:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a42:	230b      	movs	r3, #11
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_GPIO_Init+0x1d8>)
 8000a4e:	f001 fa1f 	bl	8001e90 <HAL_GPIO_Init>

}
 8000a52:	bf00      	nop
 8000a54:	3730      	adds	r7, #48	; 0x30
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020400 	.word	0x40020400
 8000a64:	40021800 	.word	0x40021800
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020000 	.word	0x40020000

08000a70 <CommManagerCRC16>:

void gsCommManagerInit(){
	gsCommPacket.state = STX;
}

uint16_t CommManagerCRC16(uint8_t* pu8Data, uint16_t u16Length) {
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	807b      	strh	r3, [r7, #2]
    uint8_t i;
    uint16_t u16crc = 0xffff;
 8000a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a80:	81bb      	strh	r3, [r7, #12]

    while (u16Length--) {
 8000a82:	e025      	b.n	8000ad0 <CommManagerCRC16+0x60>
    u16crc ^= *(unsigned char *)pu8Data++ << 8;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	021b      	lsls	r3, r3, #8
 8000a8e:	b21a      	sxth	r2, r3
 8000a90:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a94:	4053      	eors	r3, r2
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	81bb      	strh	r3, [r7, #12]
        for (i=0; i < 8; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	e014      	b.n	8000aca <CommManagerCRC16+0x5a>
        u16crc = u16crc & 0x8000 ? (u16crc << 1) ^ 0x1021 : u16crc << 1;
 8000aa0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	da09      	bge.n	8000abc <CommManagerCRC16+0x4c>
 8000aa8:	89bb      	ldrh	r3, [r7, #12]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000ab2:	f083 0301 	eor.w	r3, r3, #1
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	e002      	b.n	8000ac2 <CommManagerCRC16+0x52>
 8000abc:	89bb      	ldrh	r3, [r7, #12]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	81bb      	strh	r3, [r7, #12]
        for (i=0; i < 8; i++)
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	2b07      	cmp	r3, #7
 8000ace:	d9e7      	bls.n	8000aa0 <CommManagerCRC16+0x30>
    while (u16Length--) {
 8000ad0:	887b      	ldrh	r3, [r7, #2]
 8000ad2:	1e5a      	subs	r2, r3, #1
 8000ad4:	807a      	strh	r2, [r7, #2]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1d4      	bne.n	8000a84 <CommManagerCRC16+0x14>
    }
    return u16crc & 0xffff;
 8000ada:	89bb      	ldrh	r3, [r7, #12]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <gsCommManagerProcessBuffer>:

uint8_t gsCommManagerProcessBuffer(uint8_t u8Incomming){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]

	uint8_t returnValue = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	73fb      	strb	r3, [r7, #15]
	uint16_t calculatedCRC16 = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	81bb      	strh	r3, [r7, #12]
	uint16_t receivedCRC16 = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	817b      	strh	r3, [r7, #10]

	switch(gsCommPacket.state){
 8000afe:	4b55      	ldr	r3, [pc, #340]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000b00:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8000b04:	2b06      	cmp	r3, #6
 8000b06:	f200 80a0 	bhi.w	8000c4a <gsCommManagerProcessBuffer+0x162>
 8000b0a:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <gsCommManagerProcessBuffer+0x28>)
 8000b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b10:	08000b2d 	.word	0x08000b2d
 8000b14:	08000b4f 	.word	0x08000b4f
 8000b18:	08000b5f 	.word	0x08000b5f
 8000b1c:	08000b6f 	.word	0x08000b6f
 8000b20:	08000b7f 	.word	0x08000b7f
 8000b24:	08000b8f 	.word	0x08000b8f
 8000b28:	08000bbf 	.word	0x08000bbf
		case STX:
			if (u8Incomming == START){
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b30:	f040 8086 	bne.w	8000c40 <gsCommManagerProcessBuffer+0x158>
				gsCommPacket.counterPL = 0;
 8000b34:	4b47      	ldr	r3, [pc, #284]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
				gsCommPacket.counterCRC16 = 0;
 8000b3c:	4b45      	ldr	r3, [pc, #276]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
				gsCommPacket.state = PLL;
 8000b44:	4b43      	ldr	r3, [pc, #268]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
			}
			break;
 8000b4c:	e078      	b.n	8000c40 <gsCommManagerProcessBuffer+0x158>
		case PLL:
			gsCommPacket.data[0] = u8Incomming;
 8000b4e:	4a41      	ldr	r2, [pc, #260]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	7013      	strb	r3, [r2, #0]
			gsCommPacket.state = SEQ;
 8000b54:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000b56:	2202      	movs	r2, #2
 8000b58:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
			break;
 8000b5c:	e075      	b.n	8000c4a <gsCommManagerProcessBuffer+0x162>
		case SEQ:
			gsCommPacket.data[1] = u8Incomming;
 8000b5e:	4a3d      	ldr	r2, [pc, #244]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	7053      	strb	r3, [r2, #1]
			gsCommPacket.state = FLG;
 8000b64:	4b3b      	ldr	r3, [pc, #236]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000b66:	2203      	movs	r2, #3
 8000b68:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
			break;
 8000b6c:	e06d      	b.n	8000c4a <gsCommManagerProcessBuffer+0x162>
		case FLG:
			gsCommPacket.data[2] = u8Incomming;
 8000b6e:	4a39      	ldr	r2, [pc, #228]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	7093      	strb	r3, [r2, #2]
			gsCommPacket.state = CMD;
 8000b74:	4b37      	ldr	r3, [pc, #220]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000b76:	2204      	movs	r2, #4
 8000b78:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
			break;
 8000b7c:	e065      	b.n	8000c4a <gsCommManagerProcessBuffer+0x162>
		case CMD:
			gsCommPacket.data[3] = u8Incomming;
 8000b7e:	4a35      	ldr	r2, [pc, #212]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	70d3      	strb	r3, [r2, #3]
			gsCommPacket.state = PL;
 8000b84:	4b33      	ldr	r3, [pc, #204]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000b86:	2205      	movs	r2, #5
 8000b88:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
			break;
 8000b8c:	e05d      	b.n	8000c4a <gsCommManagerProcessBuffer+0x162>
		case PL:

			gsCommPacket.data[4 + gsCommPacket.counterPL++] = u8Incomming;
 8000b8e:	4b31      	ldr	r3, [pc, #196]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000b90:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8000b94:	1c5a      	adds	r2, r3, #1
 8000b96:	b2d1      	uxtb	r1, r2
 8000b98:	4a2e      	ldr	r2, [pc, #184]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000b9a:	f882 10ff 	strb.w	r1, [r2, #255]	; 0xff
 8000b9e:	3304      	adds	r3, #4
 8000ba0:	492c      	ldr	r1, [pc, #176]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000ba2:	79fa      	ldrb	r2, [r7, #7]
 8000ba4:	54ca      	strb	r2, [r1, r3]

			if (gsCommPacket.counterPL >= gsCommPacket.data[0])
 8000ba6:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000ba8:	f893 20ff 	ldrb.w	r2, [r3, #255]	; 0xff
 8000bac:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d347      	bcc.n	8000c44 <gsCommManagerProcessBuffer+0x15c>
				gsCommPacket.state = CRC16;
 8000bb4:	4b27      	ldr	r3, [pc, #156]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000bb6:	2206      	movs	r2, #6
 8000bb8:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe

			break;
 8000bbc:	e042      	b.n	8000c44 <gsCommManagerProcessBuffer+0x15c>
		case CRC16:
			gsCommPacket.data[4 + gsCommPacket.counterPL + gsCommPacket.counterCRC16++] = u8Incomming;
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000bc0:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8000bc4:	1d1a      	adds	r2, r3, #4
 8000bc6:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000bc8:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8000bcc:	1c59      	adds	r1, r3, #1
 8000bce:	b2c8      	uxtb	r0, r1
 8000bd0:	4920      	ldr	r1, [pc, #128]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000bd2:	f881 0100 	strb.w	r0, [r1, #256]	; 0x100
 8000bd6:	4413      	add	r3, r2
 8000bd8:	491e      	ldr	r1, [pc, #120]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000bda:	79fa      	ldrb	r2, [r7, #7]
 8000bdc:	54ca      	strb	r2, [r1, r3]

			if (gsCommPacket.counterCRC16 == 2){
 8000bde:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000be0:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d12f      	bne.n	8000c48 <gsCommManagerProcessBuffer+0x160>
				calculatedCRC16 = CommManagerCRC16(gsCommPacket.data, 4 + gsCommPacket.counterPL);
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000bea:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4817      	ldr	r0, [pc, #92]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000bf8:	f7ff ff3a 	bl	8000a70 <CommManagerCRC16>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	81bb      	strh	r3, [r7, #12]
				receivedCRC16 = (gsCommPacket.data[4 + gsCommPacket.counterPL] << 8) + gsCommPacket.data[5 + gsCommPacket.counterPL];
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000c02:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8000c06:	3304      	adds	r3, #4
 8000c08:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000c0a:	5cd3      	ldrb	r3, [r2, r3]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000c14:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8000c18:	3305      	adds	r3, #5
 8000c1a:	490e      	ldr	r1, [pc, #56]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000c1c:	5ccb      	ldrb	r3, [r1, r3]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	4413      	add	r3, r2
 8000c22:	817b      	strh	r3, [r7, #10]

				if (calculatedCRC16 == receivedCRC16){
 8000c24:	89ba      	ldrh	r2, [r7, #12]
 8000c26:	897b      	ldrh	r3, [r7, #10]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d106      	bne.n	8000c3a <gsCommManagerProcessBuffer+0x152>
					gsCommPacket.state = STX;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <gsCommManagerProcessBuffer+0x16c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
					returnValue = 1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
				}else{
					returnValue = 2;
				}
			}

			break;
 8000c38:	e006      	b.n	8000c48 <gsCommManagerProcessBuffer+0x160>
					returnValue = 2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	73fb      	strb	r3, [r7, #15]
			break;
 8000c3e:	e003      	b.n	8000c48 <gsCommManagerProcessBuffer+0x160>
			break;
 8000c40:	bf00      	nop
 8000c42:	e002      	b.n	8000c4a <gsCommManagerProcessBuffer+0x162>
			break;
 8000c44:	bf00      	nop
 8000c46:	e000      	b.n	8000c4a <gsCommManagerProcessBuffer+0x162>
			break;
 8000c48:	bf00      	nop
	}
	return returnValue;
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20004384 	.word	0x20004384

08000c58 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <MX_I2C1_Init+0x74>)
 8000c5e:	4a1c      	ldr	r2, [pc, #112]	; (8000cd0 <MX_I2C1_Init+0x78>)
 8000c60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_I2C1_Init+0x74>)
 8000c64:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <MX_I2C1_Init+0x7c>)
 8000c66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <MX_I2C1_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <MX_I2C1_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <MX_I2C1_Init+0x74>)
 8000c76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_I2C1_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <MX_I2C1_Init+0x74>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c88:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <MX_I2C1_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_I2C1_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <MX_I2C1_Init+0x74>)
 8000c96:	f001 fadb 	bl	8002250 <HAL_I2C_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ca0:	f000 f8f4 	bl	8000e8c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4809      	ldr	r0, [pc, #36]	; (8000ccc <MX_I2C1_Init+0x74>)
 8000ca8:	f001 fc16 	bl	80024d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000cb2:	f000 f8eb 	bl	8000e8c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_I2C1_Init+0x74>)
 8000cba:	f001 fc49 	bl	8002550 <HAL_I2CEx_ConfigDigitalFilter>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000cc4:	f000 f8e2 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20004488 	.word	0x20004488
 8000cd0:	40005400 	.word	0x40005400
 8000cd4:	000186a0 	.word	0x000186a0

08000cd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <HAL_I2C_MspInit+0x84>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d12c      	bne.n	8000d54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a17      	ldr	r2, [pc, #92]	; (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000d16:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1c:	2312      	movs	r3, #18
 8000d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4619      	mov	r1, r3
 8000d32:	480c      	ldr	r0, [pc, #48]	; (8000d64 <HAL_I2C_MspInit+0x8c>)
 8000d34:	f001 f8ac 	bl	8001e90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d46:	6413      	str	r3, [r2, #64]	; 0x40
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_I2C_MspInit+0x88>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40005400 	.word	0x40005400
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020400 	.word	0x40020400

08000d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6c:	f000 fb46 	bl	80013fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d70:	f000 f810 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d74:	f7ff fd8a 	bl	800088c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d78:	f000 f9e2 	bl	8001140 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000d7c:	f7ff fd08 	bl	8000790 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d80:	f000 fa8a 	bl	8001298 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000d84:	f7ff ff68 	bl	8000c58 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000d88:	f7ff fd3c 	bl	8000804 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000d8c:	f004 f90c 	bl	8004fa8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <main+0x28>
	...

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b094      	sub	sp, #80	; 0x50
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0320 	add.w	r3, r7, #32
 8000d9e:	2230      	movs	r2, #48	; 0x30
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f005 fb9c 	bl	80064e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <SystemClock_Config+0xd0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <SystemClock_Config+0xd0>)
 8000dde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <SystemClock_Config+0xd0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df0:	2301      	movs	r3, #1
 8000df2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000df4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e04:	2304      	movs	r3, #4
 8000e06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e08:	23a8      	movs	r3, #168	; 0xa8
 8000e0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e10:	2307      	movs	r3, #7
 8000e12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e14:	f107 0320 	add.w	r3, r7, #32
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 fcf5 	bl	8002808 <HAL_RCC_OscConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e24:	f000 f832 	bl	8000e8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e28:	230f      	movs	r3, #15
 8000e2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2105      	movs	r1, #5
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 ff56 	bl	8002cf8 <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e52:	f000 f81b 	bl	8000e8c <Error_Handler>
  }
}
 8000e56:	bf00      	nop
 8000e58:	3750      	adds	r7, #80	; 0x50
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d101      	bne.n	8000e7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e7a:	f000 fae1 	bl	8001440 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40002000 	.word	0x40002000

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2101      	movs	r1, #1
 8000e98:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <Error_Handler+0x58>)
 8000e9a:	f001 f9a5 	bl	80021e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	4810      	ldr	r0, [pc, #64]	; (8000ee4 <Error_Handler+0x58>)
 8000ea4:	f001 f9a0 	bl	80021e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eae:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <Error_Handler+0x58>)
 8000eb0:	f001 f99a 	bl	80021e8 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8000eb4:	2096      	movs	r0, #150	; 0x96
 8000eb6:	f000 fae3 	bl	8001480 <HAL_Delay>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <Error_Handler+0x58>)
 8000ec0:	f001 f992 	bl	80021e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <Error_Handler+0x58>)
 8000eca:	f001 f98d 	bl	80021e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <Error_Handler+0x58>)
 8000ed6:	f001 f987 	bl	80021e8 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8000eda:	2096      	movs	r0, #150	; 0x96
 8000edc:	f000 fad0 	bl	8001480 <HAL_Delay>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000ee0:	e7d8      	b.n	8000e94 <Error_Handler+0x8>
 8000ee2:	bf00      	nop
 8000ee4:	40020400 	.word	0x40020400

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_MspInit+0x54>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a11      	ldr	r2, [pc, #68]	; (8000f3c <HAL_MspInit+0x54>)
 8000ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_MspInit+0x54>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	603b      	str	r3, [r7, #0]
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_MspInit+0x54>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_MspInit+0x54>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_MspInit+0x54>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	210f      	movs	r1, #15
 8000f2a:	f06f 0001 	mvn.w	r0, #1
 8000f2e:	f000 fb83 	bl	8001638 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800

08000f40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	; 0x30
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	202d      	movs	r0, #45	; 0x2d
 8000f56:	f000 fb6f 	bl	8001638 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000f5a:	202d      	movs	r0, #45	; 0x2d
 8000f5c:	f000 fb88 	bl	8001670 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <HAL_InitTick+0xa4>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <HAL_InitTick+0xa4>)
 8000f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <HAL_InitTick+0xa4>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f7c:	f107 0210 	add.w	r2, r7, #16
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 f8b2 	bl	80030f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f8c:	f002 f888 	bl	80030a0 <HAL_RCC_GetPCLK1Freq>
 8000f90:	4603      	mov	r3, r0
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f98:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <HAL_InitTick+0xa8>)
 8000f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9e:	0c9b      	lsrs	r3, r3, #18
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_InitTick+0xac>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <HAL_InitTick+0xb0>)
 8000fa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_InitTick+0xac>)
 8000fac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fb0:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <HAL_InitTick+0xac>)
 8000fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb6:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_InitTick+0xac>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_InitTick+0xac>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000fc4:	4809      	ldr	r0, [pc, #36]	; (8000fec <HAL_InitTick+0xac>)
 8000fc6:	f002 f8c5 	bl	8003154 <HAL_TIM_Base_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d104      	bne.n	8000fda <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000fd0:	4806      	ldr	r0, [pc, #24]	; (8000fec <HAL_InitTick+0xac>)
 8000fd2:	f002 f919 	bl	8003208 <HAL_TIM_Base_Start_IT>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3730      	adds	r7, #48	; 0x30
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	431bde83 	.word	0x431bde83
 8000fec:	200044dc 	.word	0x200044dc
 8000ff0:	40002000 	.word	0x40002000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <NMI_Handler+0x4>
	...

08000ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2101      	movs	r1, #1
 8001004:	4812      	ldr	r0, [pc, #72]	; (8001050 <HardFault_Handler+0x54>)
 8001006:	f001 f8ef 	bl	80021e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	4810      	ldr	r0, [pc, #64]	; (8001050 <HardFault_Handler+0x54>)
 8001010:	f001 f8ea 	bl	80021e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800101a:	480d      	ldr	r0, [pc, #52]	; (8001050 <HardFault_Handler+0x54>)
 800101c:	f001 f8e4 	bl	80021e8 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8001020:	2096      	movs	r0, #150	; 0x96
 8001022:	f000 fa2d 	bl	8001480 <HAL_Delay>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2101      	movs	r1, #1
 800102a:	4809      	ldr	r0, [pc, #36]	; (8001050 <HardFault_Handler+0x54>)
 800102c:	f001 f8dc 	bl	80021e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	2180      	movs	r1, #128	; 0x80
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <HardFault_Handler+0x54>)
 8001036:	f001 f8d7 	bl	80021e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <HardFault_Handler+0x54>)
 8001042:	f001 f8d1 	bl	80021e8 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8001046:	2096      	movs	r0, #150	; 0x96
 8001048:	f000 fa1a 	bl	8001480 <HAL_Delay>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800104c:	e7d8      	b.n	8001000 <HardFault_Handler+0x4>
 800104e:	bf00      	nop
 8001050:	40020400 	.word	0x40020400

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <MemManage_Handler+0x4>

0800105a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <UsageFault_Handler+0x4>

08001066 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <DMA1_Stream1_IRQHandler+0x10>)
 800107a:	f000 fc9f 	bl	80019bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20004524 	.word	0x20004524

08001088 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <USART3_IRQHandler+0x10>)
 800108e:	f002 fc53 	bl	8003938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20004584 	.word	0x20004584

0800109c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80010a2:	f002 f921 	bl	80032e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200044dc 	.word	0x200044dc

080010b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b8:	4a14      	ldr	r2, [pc, #80]	; (800110c <_sbrk+0x5c>)
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <_sbrk+0x60>)
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <_sbrk+0x64>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <_sbrk+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d207      	bcs.n	80010f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e0:	f005 f9c4 	bl	800646c <__errno>
 80010e4:	4603      	mov	r3, r0
 80010e6:	220c      	movs	r2, #12
 80010e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	e009      	b.n	8001104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <_sbrk+0x64>)
 8001100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20030000 	.word	0x20030000
 8001110:	00000400 	.word	0x00000400
 8001114:	20000350 	.word	0x20000350
 8001118:	200049e8 	.word	0x200049e8

0800111c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <SystemInit+0x20>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <SystemInit+0x20>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_USART3_UART_Init+0x50>)
 8001148:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_USART3_UART_Init+0x4c>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_USART3_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_USART3_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001178:	f002 fa9a 	bl	80036b0 <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001182:	f7ff fe83 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20004584 	.word	0x20004584
 8001190:	40004800 	.word	0x40004800

08001194 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a34      	ldr	r2, [pc, #208]	; (8001284 <HAL_UART_MspInit+0xf0>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d162      	bne.n	800127c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b33      	ldr	r3, [pc, #204]	; (8001288 <HAL_UART_MspInit+0xf4>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a32      	ldr	r2, [pc, #200]	; (8001288 <HAL_UART_MspInit+0xf4>)
 80011c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b30      	ldr	r3, [pc, #192]	; (8001288 <HAL_UART_MspInit+0xf4>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <HAL_UART_MspInit+0xf4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a2b      	ldr	r2, [pc, #172]	; (8001288 <HAL_UART_MspInit+0xf4>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <HAL_UART_MspInit+0xf4>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001200:	2307      	movs	r3, #7
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4820      	ldr	r0, [pc, #128]	; (800128c <HAL_UART_MspInit+0xf8>)
 800120c:	f000 fe40 	bl	8001e90 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001210:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <HAL_UART_MspInit+0xfc>)
 8001212:	4a20      	ldr	r2, [pc, #128]	; (8001294 <HAL_UART_MspInit+0x100>)
 8001214:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001216:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <HAL_UART_MspInit+0xfc>)
 8001218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800121c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <HAL_UART_MspInit+0xfc>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <HAL_UART_MspInit+0xfc>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_UART_MspInit+0xfc>)
 800122c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001230:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_UART_MspInit+0xfc>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_UART_MspInit+0xfc>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_UART_MspInit+0xfc>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_UART_MspInit+0xfc>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_UART_MspInit+0xfc>)
 800124c:	2200      	movs	r2, #0
 800124e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001250:	480f      	ldr	r0, [pc, #60]	; (8001290 <HAL_UART_MspInit+0xfc>)
 8001252:	f000 fa1b 	bl	800168c <HAL_DMA_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800125c:	f7ff fe16 	bl	8000e8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <HAL_UART_MspInit+0xfc>)
 8001264:	639a      	str	r2, [r3, #56]	; 0x38
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_UART_MspInit+0xfc>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2105      	movs	r1, #5
 8001270:	2027      	movs	r0, #39	; 0x27
 8001272:	f000 f9e1 	bl	8001638 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001276:	2027      	movs	r0, #39	; 0x27
 8001278:	f000 f9fa 	bl	8001670 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40004800 	.word	0x40004800
 8001288:	40023800 	.word	0x40023800
 800128c:	40020c00 	.word	0x40020c00
 8001290:	20004524 	.word	0x20004524
 8001294:	40026028 	.word	0x40026028

08001298 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800129e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a6:	2204      	movs	r2, #4
 80012a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ac:	2202      	movs	r2, #2
 80012ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012b8:	2202      	movs	r2, #2
 80012ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012be:	2201      	movs	r2, #1
 80012c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012dc:	f001 f977 	bl	80025ce <HAL_PCD_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80012e6:	f7ff fdd1 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200045c8 	.word	0x200045c8

080012f4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001314:	d13f      	bne.n	8001396 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <HAL_PCD_MspInit+0xac>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a20      	ldr	r2, [pc, #128]	; (80013a0 <HAL_PCD_MspInit+0xac>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <HAL_PCD_MspInit+0xac>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001332:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001344:	230a      	movs	r3, #10
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4815      	ldr	r0, [pc, #84]	; (80013a4 <HAL_PCD_MspInit+0xb0>)
 8001350:	f000 fd9e 	bl	8001e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	480e      	ldr	r0, [pc, #56]	; (80013a4 <HAL_PCD_MspInit+0xb0>)
 800136a:	f000 fd91 	bl	8001e90 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_PCD_MspInit+0xac>)
 8001370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <HAL_PCD_MspInit+0xac>)
 8001374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001378:	6353      	str	r3, [r2, #52]	; 0x34
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HAL_PCD_MspInit+0xac>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <HAL_PCD_MspInit+0xac>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_PCD_MspInit+0xac>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	; 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000

080013a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80013a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013ac:	480d      	ldr	r0, [pc, #52]	; (80013e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ae:	490e      	ldr	r1, [pc, #56]	; (80013e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013c4:	4c0b      	ldr	r4, [pc, #44]	; (80013f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013d2:	f7ff fea3 	bl	800111c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013d6:	f005 f84f 	bl	8006478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013da:	f7ff fcc5 	bl	8000d68 <main>
  bx  lr    
 80013de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80013e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013ec:	08006fe8 	.word	0x08006fe8
  ldr r2, =_sbss
 80013f0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013f4:	200049e4 	.word	0x200049e4

080013f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC_IRQHandler>
	...

080013fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001400:	4b0e      	ldr	r3, [pc, #56]	; (800143c <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <HAL_Init+0x40>)
 8001406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0a      	ldr	r2, [pc, #40]	; (800143c <HAL_Init+0x40>)
 8001412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_Init+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a07      	ldr	r2, [pc, #28]	; (800143c <HAL_Init+0x40>)
 800141e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f000 f8fc 	bl	8001622 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff fd88 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001430:	f7ff fd5a 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023c00 	.word	0x40023c00

08001440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x20>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x24>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_IncTick+0x24>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000008 	.word	0x20000008
 8001464:	200049d0 	.word	0x200049d0

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	200049d0 	.word	0x200049d0

08001480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff ffee 	bl	8001468 <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d005      	beq.n	80014a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_Delay+0x44>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014a6:	bf00      	nop
 80014a8:	f7ff ffde 	bl	8001468 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f7      	bhi.n	80014a8 <HAL_Delay+0x28>
  {
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008

080014c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e4:	4013      	ands	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	60d3      	str	r3, [r2, #12]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <__NVIC_GetPriorityGrouping+0x18>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	f003 0307 	and.w	r3, r3, #7
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	2b00      	cmp	r3, #0
 800153c:	db0b      	blt.n	8001556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	f003 021f 	and.w	r2, r3, #31
 8001544:	4907      	ldr	r1, [pc, #28]	; (8001564 <__NVIC_EnableIRQ+0x38>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	095b      	lsrs	r3, r3, #5
 800154c:	2001      	movs	r0, #1
 800154e:	fa00 f202 	lsl.w	r2, r0, r2
 8001552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000e100 	.word	0xe000e100

08001568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	2b00      	cmp	r3, #0
 800157a:	db0a      	blt.n	8001592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	490c      	ldr	r1, [pc, #48]	; (80015b4 <__NVIC_SetPriority+0x4c>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	0112      	lsls	r2, r2, #4
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	440b      	add	r3, r1
 800158c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001590:	e00a      	b.n	80015a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4908      	ldr	r1, [pc, #32]	; (80015b8 <__NVIC_SetPriority+0x50>)
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	3b04      	subs	r3, #4
 80015a0:	0112      	lsls	r2, r2, #4
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	440b      	add	r3, r1
 80015a6:	761a      	strb	r2, [r3, #24]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000e100 	.word	0xe000e100
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f1c3 0307 	rsb	r3, r3, #7
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	bf28      	it	cs
 80015da:	2304      	movcs	r3, #4
 80015dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3304      	adds	r3, #4
 80015e2:	2b06      	cmp	r3, #6
 80015e4:	d902      	bls.n	80015ec <NVIC_EncodePriority+0x30>
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3b03      	subs	r3, #3
 80015ea:	e000      	b.n	80015ee <NVIC_EncodePriority+0x32>
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	f04f 32ff 	mov.w	r2, #4294967295
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43da      	mvns	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	401a      	ands	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001604:	f04f 31ff 	mov.w	r1, #4294967295
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43d9      	mvns	r1, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	4313      	orrs	r3, r2
         );
}
 8001616:	4618      	mov	r0, r3
 8001618:	3724      	adds	r7, #36	; 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ff4c 	bl	80014c8 <__NVIC_SetPriorityGrouping>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800164a:	f7ff ff61 	bl	8001510 <__NVIC_GetPriorityGrouping>
 800164e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	68b9      	ldr	r1, [r7, #8]
 8001654:	6978      	ldr	r0, [r7, #20]
 8001656:	f7ff ffb1 	bl	80015bc <NVIC_EncodePriority>
 800165a:	4602      	mov	r2, r0
 800165c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001660:	4611      	mov	r1, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff80 	bl	8001568 <__NVIC_SetPriority>
}
 8001668:	bf00      	nop
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ff54 	bl	800152c <__NVIC_EnableIRQ>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff fee6 	bl	8001468 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e099      	b.n	80017dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c8:	e00f      	b.n	80016ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ca:	f7ff fecd 	bl	8001468 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d908      	bls.n	80016ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2220      	movs	r2, #32
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2203      	movs	r2, #3
 80016e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e078      	b.n	80017dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1e8      	bne.n	80016ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_DMA_Init+0x158>)
 8001704:	4013      	ands	r3, r2
 8001706:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001716:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001722:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800172e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4313      	orrs	r3, r2
 800173a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	2b04      	cmp	r3, #4
 8001742:	d107      	bne.n	8001754 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	4313      	orrs	r3, r2
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4313      	orrs	r3, r2
 8001752:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f023 0307 	bic.w	r3, r3, #7
 800176a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	4313      	orrs	r3, r2
 8001774:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	2b04      	cmp	r3, #4
 800177c:	d117      	bne.n	80017ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4313      	orrs	r3, r2
 8001786:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00e      	beq.n	80017ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fb01 	bl	8001d98 <DMA_CheckFifoParam>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2240      	movs	r2, #64	; 0x40
 80017a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017aa:	2301      	movs	r3, #1
 80017ac:	e016      	b.n	80017dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fab8 	bl	8001d2c <DMA_CalcBaseAndBitshift>
 80017bc:	4603      	mov	r3, r0
 80017be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c4:	223f      	movs	r2, #63	; 0x3f
 80017c6:	409a      	lsls	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	f010803f 	.word	0xf010803f

080017e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_DMA_Start_IT+0x26>
 800180a:	2302      	movs	r3, #2
 800180c:	e040      	b.n	8001890 <HAL_DMA_Start_IT+0xa8>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b01      	cmp	r3, #1
 8001820:	d12f      	bne.n	8001882 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2202      	movs	r2, #2
 8001826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 fa4a 	bl	8001cd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001840:	223f      	movs	r2, #63	; 0x3f
 8001842:	409a      	lsls	r2, r3
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0216 	orr.w	r2, r2, #22
 8001856:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	2b00      	cmp	r3, #0
 800185e:	d007      	beq.n	8001870 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0208 	orr.w	r2, r2, #8
 800186e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e005      	b.n	800188e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800188a:	2302      	movs	r3, #2
 800188c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800188e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018a6:	f7ff fddf 	bl	8001468 <HAL_GetTick>
 80018aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d008      	beq.n	80018ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e052      	b.n	8001970 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0216 	bic.w	r2, r2, #22
 80018d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d103      	bne.n	80018fa <HAL_DMA_Abort+0x62>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0208 	bic.w	r2, r2, #8
 8001908:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0201 	bic.w	r2, r2, #1
 8001918:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800191a:	e013      	b.n	8001944 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800191c:	f7ff fda4 	bl	8001468 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b05      	cmp	r3, #5
 8001928:	d90c      	bls.n	8001944 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2220      	movs	r2, #32
 800192e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2203      	movs	r2, #3
 8001934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e015      	b.n	8001970 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1e4      	bne.n	800191c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	223f      	movs	r2, #63	; 0x3f
 8001958:	409a      	lsls	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d004      	beq.n	8001996 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2280      	movs	r2, #128	; 0x80
 8001990:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e00c      	b.n	80019b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2205      	movs	r2, #5
 800199a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0201 	bic.w	r2, r2, #1
 80019ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019c8:	4b92      	ldr	r3, [pc, #584]	; (8001c14 <HAL_DMA_IRQHandler+0x258>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a92      	ldr	r2, [pc, #584]	; (8001c18 <HAL_DMA_IRQHandler+0x25c>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	0a9b      	lsrs	r3, r3, #10
 80019d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e6:	2208      	movs	r2, #8
 80019e8:	409a      	lsls	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d01a      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d013      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0204 	bic.w	r2, r2, #4
 8001a0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a14:	2208      	movs	r2, #8
 8001a16:	409a      	lsls	r2, r3
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a20:	f043 0201 	orr.w	r2, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d012      	beq.n	8001a5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00b      	beq.n	8001a5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a56:	f043 0202 	orr.w	r2, r3, #2
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a62:	2204      	movs	r2, #4
 8001a64:	409a      	lsls	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d012      	beq.n	8001a94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00b      	beq.n	8001a94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a80:	2204      	movs	r2, #4
 8001a82:	409a      	lsls	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8c:	f043 0204 	orr.w	r2, r3, #4
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a98:	2210      	movs	r2, #16
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d043      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d03c      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab6:	2210      	movs	r2, #16
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d018      	beq.n	8001afe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d108      	bne.n	8001aec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d024      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	4798      	blx	r3
 8001aea:	e01f      	b.n	8001b2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d01b      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	4798      	blx	r3
 8001afc:	e016      	b.n	8001b2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d107      	bne.n	8001b1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0208 	bic.w	r2, r2, #8
 8001b1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b30:	2220      	movs	r2, #32
 8001b32:	409a      	lsls	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 808e 	beq.w	8001c5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 8086 	beq.w	8001c5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b52:	2220      	movs	r2, #32
 8001b54:	409a      	lsls	r2, r3
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b05      	cmp	r3, #5
 8001b64:	d136      	bne.n	8001bd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0216 	bic.w	r2, r2, #22
 8001b74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d103      	bne.n	8001b96 <HAL_DMA_IRQHandler+0x1da>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d007      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0208 	bic.w	r2, r2, #8
 8001ba4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001baa:	223f      	movs	r2, #63	; 0x3f
 8001bac:	409a      	lsls	r2, r3
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d07d      	beq.n	8001cc6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	4798      	blx	r3
        }
        return;
 8001bd2:	e078      	b.n	8001cc6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d01c      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d108      	bne.n	8001c02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d030      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	4798      	blx	r3
 8001c00:	e02b      	b.n	8001c5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d027      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	4798      	blx	r3
 8001c12:	e022      	b.n	8001c5a <HAL_DMA_IRQHandler+0x29e>
 8001c14:	20000000 	.word	0x20000000
 8001c18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0210 	bic.w	r2, r2, #16
 8001c38:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d032      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d022      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2205      	movs	r2, #5
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0201 	bic.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d307      	bcc.n	8001ca2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f2      	bne.n	8001c86 <HAL_DMA_IRQHandler+0x2ca>
 8001ca0:	e000      	b.n	8001ca4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001ca2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	4798      	blx	r3
 8001cc4:	e000      	b.n	8001cc8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001cc6:	bf00      	nop
    }
  }
}
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop

08001cd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b40      	cmp	r3, #64	; 0x40
 8001cfc:	d108      	bne.n	8001d10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d0e:	e007      	b.n	8001d20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	60da      	str	r2, [r3, #12]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	3b10      	subs	r3, #16
 8001d3c:	4a14      	ldr	r2, [pc, #80]	; (8001d90 <DMA_CalcBaseAndBitshift+0x64>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d46:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <DMA_CalcBaseAndBitshift+0x68>)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d909      	bls.n	8001d6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d62:	f023 0303 	bic.w	r3, r3, #3
 8001d66:	1d1a      	adds	r2, r3, #4
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d6c:	e007      	b.n	8001d7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d76:	f023 0303 	bic.w	r3, r3, #3
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	aaaaaaab 	.word	0xaaaaaaab
 8001d94:	08006f3c 	.word	0x08006f3c

08001d98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d11f      	bne.n	8001df2 <DMA_CheckFifoParam+0x5a>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d856      	bhi.n	8001e66 <DMA_CheckFifoParam+0xce>
 8001db8:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <DMA_CheckFifoParam+0x28>)
 8001dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dbe:	bf00      	nop
 8001dc0:	08001dd1 	.word	0x08001dd1
 8001dc4:	08001de3 	.word	0x08001de3
 8001dc8:	08001dd1 	.word	0x08001dd1
 8001dcc:	08001e67 	.word	0x08001e67
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d046      	beq.n	8001e6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001de0:	e043      	b.n	8001e6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dea:	d140      	bne.n	8001e6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001df0:	e03d      	b.n	8001e6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dfa:	d121      	bne.n	8001e40 <DMA_CheckFifoParam+0xa8>
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d837      	bhi.n	8001e72 <DMA_CheckFifoParam+0xda>
 8001e02:	a201      	add	r2, pc, #4	; (adr r2, 8001e08 <DMA_CheckFifoParam+0x70>)
 8001e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e08:	08001e19 	.word	0x08001e19
 8001e0c:	08001e1f 	.word	0x08001e1f
 8001e10:	08001e19 	.word	0x08001e19
 8001e14:	08001e31 	.word	0x08001e31
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e1c:	e030      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d025      	beq.n	8001e76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e2e:	e022      	b.n	8001e76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e38:	d11f      	bne.n	8001e7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e3e:	e01c      	b.n	8001e7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d903      	bls.n	8001e4e <DMA_CheckFifoParam+0xb6>
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d003      	beq.n	8001e54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e4c:	e018      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
      break;
 8001e52:	e015      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00e      	beq.n	8001e7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
      break;
 8001e64:	e00b      	b.n	8001e7e <DMA_CheckFifoParam+0xe6>
      break;
 8001e66:	bf00      	nop
 8001e68:	e00a      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;
 8001e6a:	bf00      	nop
 8001e6c:	e008      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;
 8001e6e:	bf00      	nop
 8001e70:	e006      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;
 8001e72:	bf00      	nop
 8001e74:	e004      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;
 8001e76:	bf00      	nop
 8001e78:	e002      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e7a:	bf00      	nop
 8001e7c:	e000      	b.n	8001e80 <DMA_CheckFifoParam+0xe8>
      break;
 8001e7e:	bf00      	nop
    }
  } 
  
  return status; 
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop

08001e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	e177      	b.n	800219c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eac:	2201      	movs	r2, #1
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	f040 8166 	bne.w	8002196 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d005      	beq.n	8001ee2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d130      	bne.n	8001f44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	2203      	movs	r2, #3
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f18:	2201      	movs	r2, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	091b      	lsrs	r3, r3, #4
 8001f2e:	f003 0201 	and.w	r2, r3, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0303 	and.w	r3, r3, #3
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d017      	beq.n	8001f80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d123      	bne.n	8001fd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	08da      	lsrs	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3208      	adds	r2, #8
 8001f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	08da      	lsrs	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3208      	adds	r2, #8
 8001fce:	69b9      	ldr	r1, [r7, #24]
 8001fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	2203      	movs	r2, #3
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0203 	and.w	r2, r3, #3
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 80c0 	beq.w	8002196 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b66      	ldr	r3, [pc, #408]	; (80021b4 <HAL_GPIO_Init+0x324>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	4a65      	ldr	r2, [pc, #404]	; (80021b4 <HAL_GPIO_Init+0x324>)
 8002020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002024:	6453      	str	r3, [r2, #68]	; 0x44
 8002026:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <HAL_GPIO_Init+0x324>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002032:	4a61      	ldr	r2, [pc, #388]	; (80021b8 <HAL_GPIO_Init+0x328>)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	3302      	adds	r3, #2
 800203a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	220f      	movs	r2, #15
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4013      	ands	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a58      	ldr	r2, [pc, #352]	; (80021bc <HAL_GPIO_Init+0x32c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d037      	beq.n	80020ce <HAL_GPIO_Init+0x23e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a57      	ldr	r2, [pc, #348]	; (80021c0 <HAL_GPIO_Init+0x330>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d031      	beq.n	80020ca <HAL_GPIO_Init+0x23a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a56      	ldr	r2, [pc, #344]	; (80021c4 <HAL_GPIO_Init+0x334>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d02b      	beq.n	80020c6 <HAL_GPIO_Init+0x236>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a55      	ldr	r2, [pc, #340]	; (80021c8 <HAL_GPIO_Init+0x338>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d025      	beq.n	80020c2 <HAL_GPIO_Init+0x232>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a54      	ldr	r2, [pc, #336]	; (80021cc <HAL_GPIO_Init+0x33c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01f      	beq.n	80020be <HAL_GPIO_Init+0x22e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a53      	ldr	r2, [pc, #332]	; (80021d0 <HAL_GPIO_Init+0x340>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d019      	beq.n	80020ba <HAL_GPIO_Init+0x22a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a52      	ldr	r2, [pc, #328]	; (80021d4 <HAL_GPIO_Init+0x344>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_GPIO_Init+0x226>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a51      	ldr	r2, [pc, #324]	; (80021d8 <HAL_GPIO_Init+0x348>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00d      	beq.n	80020b2 <HAL_GPIO_Init+0x222>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a50      	ldr	r2, [pc, #320]	; (80021dc <HAL_GPIO_Init+0x34c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <HAL_GPIO_Init+0x21e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4f      	ldr	r2, [pc, #316]	; (80021e0 <HAL_GPIO_Init+0x350>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_GPIO_Init+0x21a>
 80020a6:	2309      	movs	r3, #9
 80020a8:	e012      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020aa:	230a      	movs	r3, #10
 80020ac:	e010      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020ae:	2308      	movs	r3, #8
 80020b0:	e00e      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020b2:	2307      	movs	r3, #7
 80020b4:	e00c      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020b6:	2306      	movs	r3, #6
 80020b8:	e00a      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020ba:	2305      	movs	r3, #5
 80020bc:	e008      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020be:	2304      	movs	r3, #4
 80020c0:	e006      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020c2:	2303      	movs	r3, #3
 80020c4:	e004      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e002      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_GPIO_Init+0x240>
 80020ce:	2300      	movs	r3, #0
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	f002 0203 	and.w	r2, r2, #3
 80020d6:	0092      	lsls	r2, r2, #2
 80020d8:	4093      	lsls	r3, r2
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e0:	4935      	ldr	r1, [pc, #212]	; (80021b8 <HAL_GPIO_Init+0x328>)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	3302      	adds	r3, #2
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ee:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_GPIO_Init+0x354>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002112:	4a34      	ldr	r2, [pc, #208]	; (80021e4 <HAL_GPIO_Init+0x354>)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002118:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <HAL_GPIO_Init+0x354>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213c:	4a29      	ldr	r2, [pc, #164]	; (80021e4 <HAL_GPIO_Init+0x354>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002142:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <HAL_GPIO_Init+0x354>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002166:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <HAL_GPIO_Init+0x354>)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800216c:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_GPIO_Init+0x354>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002190:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <HAL_GPIO_Init+0x354>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3301      	adds	r3, #1
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	2b0f      	cmp	r3, #15
 80021a0:	f67f ae84 	bls.w	8001eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3724      	adds	r7, #36	; 0x24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40013800 	.word	0x40013800
 80021bc:	40020000 	.word	0x40020000
 80021c0:	40020400 	.word	0x40020400
 80021c4:	40020800 	.word	0x40020800
 80021c8:	40020c00 	.word	0x40020c00
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40021400 	.word	0x40021400
 80021d4:	40021800 	.word	0x40021800
 80021d8:	40021c00 	.word	0x40021c00
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40022400 	.word	0x40022400
 80021e4:	40013c00 	.word	0x40013c00

080021e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
 80021f4:	4613      	mov	r3, r2
 80021f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f8:	787b      	ldrb	r3, [r7, #1]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021fe:	887a      	ldrh	r2, [r7, #2]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002204:	e003      	b.n	800220e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002206:	887b      	ldrh	r3, [r7, #2]
 8002208:	041a      	lsls	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	619a      	str	r2, [r3, #24]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800222c:	887a      	ldrh	r2, [r7, #2]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4013      	ands	r3, r2
 8002232:	041a      	lsls	r2, r3, #16
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43d9      	mvns	r1, r3
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	400b      	ands	r3, r1
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	619a      	str	r2, [r3, #24]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e12b      	b.n	80024ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7fe fd2e 	bl	8000cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2224      	movs	r2, #36	; 0x24
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0201 	bic.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022b4:	f000 fef4 	bl	80030a0 <HAL_RCC_GetPCLK1Freq>
 80022b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4a81      	ldr	r2, [pc, #516]	; (80024c4 <HAL_I2C_Init+0x274>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d807      	bhi.n	80022d4 <HAL_I2C_Init+0x84>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a80      	ldr	r2, [pc, #512]	; (80024c8 <HAL_I2C_Init+0x278>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	bf94      	ite	ls
 80022cc:	2301      	movls	r3, #1
 80022ce:	2300      	movhi	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	e006      	b.n	80022e2 <HAL_I2C_Init+0x92>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4a7d      	ldr	r2, [pc, #500]	; (80024cc <HAL_I2C_Init+0x27c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	bf94      	ite	ls
 80022dc:	2301      	movls	r3, #1
 80022de:	2300      	movhi	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0e7      	b.n	80024ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4a78      	ldr	r2, [pc, #480]	; (80024d0 <HAL_I2C_Init+0x280>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	0c9b      	lsrs	r3, r3, #18
 80022f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	430a      	orrs	r2, r1
 8002308:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	4a6a      	ldr	r2, [pc, #424]	; (80024c4 <HAL_I2C_Init+0x274>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d802      	bhi.n	8002324 <HAL_I2C_Init+0xd4>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	3301      	adds	r3, #1
 8002322:	e009      	b.n	8002338 <HAL_I2C_Init+0xe8>
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800232a:	fb02 f303 	mul.w	r3, r2, r3
 800232e:	4a69      	ldr	r2, [pc, #420]	; (80024d4 <HAL_I2C_Init+0x284>)
 8002330:	fba2 2303 	umull	r2, r3, r2, r3
 8002334:	099b      	lsrs	r3, r3, #6
 8002336:	3301      	adds	r3, #1
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	430b      	orrs	r3, r1
 800233e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800234a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	495c      	ldr	r1, [pc, #368]	; (80024c4 <HAL_I2C_Init+0x274>)
 8002354:	428b      	cmp	r3, r1
 8002356:	d819      	bhi.n	800238c <HAL_I2C_Init+0x13c>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1e59      	subs	r1, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	fbb1 f3f3 	udiv	r3, r1, r3
 8002366:	1c59      	adds	r1, r3, #1
 8002368:	f640 73fc 	movw	r3, #4092	; 0xffc
 800236c:	400b      	ands	r3, r1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <HAL_I2C_Init+0x138>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1e59      	subs	r1, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002380:	3301      	adds	r3, #1
 8002382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002386:	e051      	b.n	800242c <HAL_I2C_Init+0x1dc>
 8002388:	2304      	movs	r3, #4
 800238a:	e04f      	b.n	800242c <HAL_I2C_Init+0x1dc>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d111      	bne.n	80023b8 <HAL_I2C_Init+0x168>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1e58      	subs	r0, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	440b      	add	r3, r1
 80023a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023a6:	3301      	adds	r3, #1
 80023a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bf0c      	ite	eq
 80023b0:	2301      	moveq	r3, #1
 80023b2:	2300      	movne	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	e012      	b.n	80023de <HAL_I2C_Init+0x18e>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1e58      	subs	r0, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	0099      	lsls	r1, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_I2C_Init+0x196>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e022      	b.n	800242c <HAL_I2C_Init+0x1dc>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10e      	bne.n	800240c <HAL_I2C_Init+0x1bc>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1e58      	subs	r0, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6859      	ldr	r1, [r3, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	440b      	add	r3, r1
 80023fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002400:	3301      	adds	r3, #1
 8002402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800240a:	e00f      	b.n	800242c <HAL_I2C_Init+0x1dc>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1e58      	subs	r0, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	0099      	lsls	r1, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002422:	3301      	adds	r3, #1
 8002424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	6809      	ldr	r1, [r1, #0]
 8002430:	4313      	orrs	r3, r2
 8002432:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69da      	ldr	r2, [r3, #28]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800245a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6911      	ldr	r1, [r2, #16]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68d2      	ldr	r2, [r2, #12]
 8002466:	4311      	orrs	r1, r2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	430b      	orrs	r3, r1
 800246e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	000186a0 	.word	0x000186a0
 80024c8:	001e847f 	.word	0x001e847f
 80024cc:	003d08ff 	.word	0x003d08ff
 80024d0:	431bde83 	.word	0x431bde83
 80024d4:	10624dd3 	.word	0x10624dd3

080024d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d129      	bne.n	8002542 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2224      	movs	r2, #36	; 0x24
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0201 	bic.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0210 	bic.w	r2, r2, #16
 8002514:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0201 	orr.w	r2, r2, #1
 8002534:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e000      	b.n	8002544 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002542:	2302      	movs	r3, #2
  }
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b20      	cmp	r3, #32
 8002568:	d12a      	bne.n	80025c0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2224      	movs	r2, #36	; 0x24
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0201 	bic.w	r2, r2, #1
 8002580:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800258a:	89fb      	ldrh	r3, [r7, #14]
 800258c:	f023 030f 	bic.w	r3, r3, #15
 8002590:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b29a      	uxth	r2, r3
 8002596:	89fb      	ldrh	r3, [r7, #14]
 8002598:	4313      	orrs	r3, r2
 800259a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	89fa      	ldrh	r2, [r7, #14]
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	e000      	b.n	80025c2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80025c0:	2302      	movs	r3, #2
  }
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d0:	b08f      	sub	sp, #60	; 0x3c
 80025d2:	af0a      	add	r7, sp, #40	; 0x28
 80025d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e10f      	b.n	8002800 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7fe fe7a 	bl	80012f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2203      	movs	r2, #3
 8002604:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f002 fa2b 	bl	8004a7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	687e      	ldr	r6, [r7, #4]
 800262c:	466d      	mov	r5, sp
 800262e:	f106 0410 	add.w	r4, r6, #16
 8002632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800263a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800263e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002642:	1d33      	adds	r3, r6, #4
 8002644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002646:	6838      	ldr	r0, [r7, #0]
 8002648:	f002 f9b6 	bl	80049b8 <USB_CoreInit>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2202      	movs	r2, #2
 8002656:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0d0      	b.n	8002800 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f002 fa19 	bl	8004a9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800266a:	2300      	movs	r3, #0
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	e04a      	b.n	8002706 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	333d      	adds	r3, #61	; 0x3d
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	333c      	adds	r3, #60	; 0x3c
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	b298      	uxth	r0, r3
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3342      	adds	r3, #66	; 0x42
 80026ac:	4602      	mov	r2, r0
 80026ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026b0:	7bfa      	ldrb	r2, [r7, #15]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	333f      	adds	r3, #63	; 0x3f
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	3344      	adds	r3, #68	; 0x44
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	3348      	adds	r3, #72	; 0x48
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	3350      	adds	r3, #80	; 0x50
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	3301      	adds	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	429a      	cmp	r2, r3
 800270e:	d3af      	bcc.n	8002670 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	e044      	b.n	80027a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002758:	7bfa      	ldrb	r2, [r7, #15]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	3301      	adds	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	7bfa      	ldrb	r2, [r7, #15]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d3b5      	bcc.n	8002716 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	687e      	ldr	r6, [r7, #4]
 80027b2:	466d      	mov	r5, sp
 80027b4:	f106 0410 	add.w	r4, r6, #16
 80027b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80027c8:	1d33      	adds	r3, r6, #4
 80027ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027cc:	6838      	ldr	r0, [r7, #0]
 80027ce:	f002 f9b1 	bl	8004b34 <USB_DevInit>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e00d      	b.n	8002800 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f002 fb5c 	bl	8004eb6 <USB_DevDisconnect>

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002808 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e264      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d075      	beq.n	8002912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002826:	4ba3      	ldr	r3, [pc, #652]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b04      	cmp	r3, #4
 8002830:	d00c      	beq.n	800284c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002832:	4ba0      	ldr	r3, [pc, #640]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800283a:	2b08      	cmp	r3, #8
 800283c:	d112      	bne.n	8002864 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283e:	4b9d      	ldr	r3, [pc, #628]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800284a:	d10b      	bne.n	8002864 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	4b99      	ldr	r3, [pc, #612]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d05b      	beq.n	8002910 <HAL_RCC_OscConfig+0x108>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d157      	bne.n	8002910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e23f      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286c:	d106      	bne.n	800287c <HAL_RCC_OscConfig+0x74>
 800286e:	4b91      	ldr	r3, [pc, #580]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a90      	ldr	r2, [pc, #576]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e01d      	b.n	80028b8 <HAL_RCC_OscConfig+0xb0>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x98>
 8002886:	4b8b      	ldr	r3, [pc, #556]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a8a      	ldr	r2, [pc, #552]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b88      	ldr	r3, [pc, #544]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a87      	ldr	r2, [pc, #540]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e00b      	b.n	80028b8 <HAL_RCC_OscConfig+0xb0>
 80028a0:	4b84      	ldr	r3, [pc, #528]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a83      	ldr	r2, [pc, #524]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b81      	ldr	r3, [pc, #516]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a80      	ldr	r2, [pc, #512]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80028b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fe fdd2 	bl	8001468 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c8:	f7fe fdce 	bl	8001468 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e204      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	4b76      	ldr	r3, [pc, #472]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0xc0>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7fe fdbe 	bl	8001468 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f0:	f7fe fdba 	bl	8001468 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1f0      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002902:	4b6c      	ldr	r3, [pc, #432]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0xe8>
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d063      	beq.n	80029e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800291e:	4b65      	ldr	r3, [pc, #404]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292a:	4b62      	ldr	r3, [pc, #392]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002932:	2b08      	cmp	r3, #8
 8002934:	d11c      	bne.n	8002970 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002936:	4b5f      	ldr	r3, [pc, #380]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d116      	bne.n	8002970 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002942:	4b5c      	ldr	r3, [pc, #368]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_RCC_OscConfig+0x152>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e1c4      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295a:	4b56      	ldr	r3, [pc, #344]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4952      	ldr	r1, [pc, #328]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296e:	e03a      	b.n	80029e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002978:	4b4f      	ldr	r3, [pc, #316]	; (8002ab8 <HAL_RCC_OscConfig+0x2b0>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe fd73 	bl	8001468 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002986:	f7fe fd6f 	bl	8001468 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e1a5      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002998:	4b46      	ldr	r3, [pc, #280]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a4:	4b43      	ldr	r3, [pc, #268]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4940      	ldr	r1, [pc, #256]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]
 80029b8:	e015      	b.n	80029e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ba:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <HAL_RCC_OscConfig+0x2b0>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fe fd52 	bl	8001468 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c8:	f7fe fd4e 	bl	8001468 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e184      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d030      	beq.n	8002a54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d016      	beq.n	8002a28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fa:	4b30      	ldr	r3, [pc, #192]	; (8002abc <HAL_RCC_OscConfig+0x2b4>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe fd32 	bl	8001468 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a08:	f7fe fd2e 	bl	8001468 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e164      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1a:	4b26      	ldr	r3, [pc, #152]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x200>
 8002a26:	e015      	b.n	8002a54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a28:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_RCC_OscConfig+0x2b4>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2e:	f7fe fd1b 	bl	8001468 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a36:	f7fe fd17 	bl	8001468 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e14d      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f0      	bne.n	8002a36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80a0 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a62:	2300      	movs	r3, #0
 8002a64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a66:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10f      	bne.n	8002a92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
 8002a82:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a92:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_OscConfig+0x2b8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d121      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9e:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <HAL_RCC_OscConfig+0x2b8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <HAL_RCC_OscConfig+0x2b8>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fcdd 	bl	8001468 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab0:	e011      	b.n	8002ad6 <HAL_RCC_OscConfig+0x2ce>
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	42470000 	.word	0x42470000
 8002abc:	42470e80 	.word	0x42470e80
 8002ac0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac4:	f7fe fcd0 	bl	8001468 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e106      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b85      	ldr	r3, [pc, #532]	; (8002cec <HAL_RCC_OscConfig+0x4e4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d106      	bne.n	8002af8 <HAL_RCC_OscConfig+0x2f0>
 8002aea:	4b81      	ldr	r3, [pc, #516]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	4a80      	ldr	r2, [pc, #512]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6713      	str	r3, [r2, #112]	; 0x70
 8002af6:	e01c      	b.n	8002b32 <HAL_RCC_OscConfig+0x32a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b05      	cmp	r3, #5
 8002afe:	d10c      	bne.n	8002b1a <HAL_RCC_OscConfig+0x312>
 8002b00:	4b7b      	ldr	r3, [pc, #492]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b04:	4a7a      	ldr	r2, [pc, #488]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b06:	f043 0304 	orr.w	r3, r3, #4
 8002b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0c:	4b78      	ldr	r3, [pc, #480]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	4a77      	ldr	r2, [pc, #476]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6713      	str	r3, [r2, #112]	; 0x70
 8002b18:	e00b      	b.n	8002b32 <HAL_RCC_OscConfig+0x32a>
 8002b1a:	4b75      	ldr	r3, [pc, #468]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	4a74      	ldr	r2, [pc, #464]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	6713      	str	r3, [r2, #112]	; 0x70
 8002b26:	4b72      	ldr	r3, [pc, #456]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	4a71      	ldr	r2, [pc, #452]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b2c:	f023 0304 	bic.w	r3, r3, #4
 8002b30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d015      	beq.n	8002b66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3a:	f7fe fc95 	bl	8001468 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7fe fc91 	bl	8001468 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e0c5      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b58:	4b65      	ldr	r3, [pc, #404]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0ee      	beq.n	8002b42 <HAL_RCC_OscConfig+0x33a>
 8002b64:	e014      	b.n	8002b90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b66:	f7fe fc7f 	bl	8001468 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe fc7b 	bl	8001468 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e0af      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b84:	4b5a      	ldr	r3, [pc, #360]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ee      	bne.n	8002b6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d105      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b96:	4b56      	ldr	r3, [pc, #344]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	4a55      	ldr	r2, [pc, #340]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 809b 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bac:	4b50      	ldr	r3, [pc, #320]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d05c      	beq.n	8002c72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d141      	bne.n	8002c44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc0:	4b4c      	ldr	r3, [pc, #304]	; (8002cf4 <HAL_RCC_OscConfig+0x4ec>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fc4f 	bl	8001468 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bce:	f7fe fc4b 	bl	8001468 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e081      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be0:	4b43      	ldr	r3, [pc, #268]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1f0      	bne.n	8002bce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69da      	ldr	r2, [r3, #28]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	019b      	lsls	r3, r3, #6
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	085b      	lsrs	r3, r3, #1
 8002c04:	3b01      	subs	r3, #1
 8002c06:	041b      	lsls	r3, r3, #16
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	061b      	lsls	r3, r3, #24
 8002c10:	4937      	ldr	r1, [pc, #220]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c16:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <HAL_RCC_OscConfig+0x4ec>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fe fc24 	bl	8001468 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c24:	f7fe fc20 	bl	8001468 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e056      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c36:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x41c>
 8002c42:	e04e      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c44:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <HAL_RCC_OscConfig+0x4ec>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4a:	f7fe fc0d 	bl	8001468 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c52:	f7fe fc09 	bl	8001468 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e03f      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c64:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f0      	bne.n	8002c52 <HAL_RCC_OscConfig+0x44a>
 8002c70:	e037      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e032      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c7e:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <HAL_RCC_OscConfig+0x4e8>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d028      	beq.n	8002cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d121      	bne.n	8002cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d11a      	bne.n	8002cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cae:	4013      	ands	r3, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cb4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d111      	bne.n	8002cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	42470060 	.word	0x42470060

08002cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0cc      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b68      	ldr	r3, [pc, #416]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d90c      	bls.n	8002d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b65      	ldr	r3, [pc, #404]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b63      	ldr	r3, [pc, #396]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0b8      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d4c:	4b59      	ldr	r3, [pc, #356]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4a58      	ldr	r2, [pc, #352]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4a52      	ldr	r2, [pc, #328]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d70:	4b50      	ldr	r3, [pc, #320]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	494d      	ldr	r1, [pc, #308]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d044      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d119      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e07f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d003      	beq.n	8002db6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db6:	4b3f      	ldr	r3, [pc, #252]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e06f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc6:	4b3b      	ldr	r3, [pc, #236]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e067      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd6:	4b37      	ldr	r3, [pc, #220]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f023 0203 	bic.w	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4934      	ldr	r1, [pc, #208]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de8:	f7fe fb3e 	bl	8001468 <HAL_GetTick>
 8002dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df0:	f7fe fb3a 	bl	8001468 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e04f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e06:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 020c 	and.w	r2, r3, #12
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d1eb      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e18:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d20c      	bcs.n	8002e40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e032      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4916      	ldr	r1, [pc, #88]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	490e      	ldr	r1, [pc, #56]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e7e:	f000 f821 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002e82:	4602      	mov	r2, r0
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	490a      	ldr	r1, [pc, #40]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	5ccb      	ldrb	r3, [r1, r3]
 8002e92:	fa22 f303 	lsr.w	r3, r2, r3
 8002e96:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe f84e 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023c00 	.word	0x40023c00
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	08006f24 	.word	0x08006f24
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	20000004 	.word	0x20000004

08002ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002edc:	4b67      	ldr	r3, [pc, #412]	; (800307c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d00d      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x40>
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	f200 80bd 	bhi.w	8003068 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d003      	beq.n	8002efe <HAL_RCC_GetSysClockFreq+0x3a>
 8002ef6:	e0b7      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef8:	4b61      	ldr	r3, [pc, #388]	; (8003080 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002efa:	60bb      	str	r3, [r7, #8]
       break;
 8002efc:	e0b7      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002efe:	4b61      	ldr	r3, [pc, #388]	; (8003084 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002f00:	60bb      	str	r3, [r7, #8]
      break;
 8002f02:	e0b4      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f04:	4b5d      	ldr	r3, [pc, #372]	; (800307c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f0e:	4b5b      	ldr	r3, [pc, #364]	; (800307c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d04d      	beq.n	8002fb6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1a:	4b58      	ldr	r3, [pc, #352]	; (800307c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	099b      	lsrs	r3, r3, #6
 8002f20:	461a      	mov	r2, r3
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f2a:	f04f 0100 	mov.w	r1, #0
 8002f2e:	ea02 0800 	and.w	r8, r2, r0
 8002f32:	ea03 0901 	and.w	r9, r3, r1
 8002f36:	4640      	mov	r0, r8
 8002f38:	4649      	mov	r1, r9
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	014b      	lsls	r3, r1, #5
 8002f44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f48:	0142      	lsls	r2, r0, #5
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	ebb0 0008 	subs.w	r0, r0, r8
 8002f52:	eb61 0109 	sbc.w	r1, r1, r9
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	018b      	lsls	r3, r1, #6
 8002f60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f64:	0182      	lsls	r2, r0, #6
 8002f66:	1a12      	subs	r2, r2, r0
 8002f68:	eb63 0301 	sbc.w	r3, r3, r1
 8002f6c:	f04f 0000 	mov.w	r0, #0
 8002f70:	f04f 0100 	mov.w	r1, #0
 8002f74:	00d9      	lsls	r1, r3, #3
 8002f76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f7a:	00d0      	lsls	r0, r2, #3
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	eb12 0208 	adds.w	r2, r2, r8
 8002f84:	eb43 0309 	adc.w	r3, r3, r9
 8002f88:	f04f 0000 	mov.w	r0, #0
 8002f8c:	f04f 0100 	mov.w	r1, #0
 8002f90:	0259      	lsls	r1, r3, #9
 8002f92:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f96:	0250      	lsls	r0, r2, #9
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	f7fd f972 	bl	8000290 <__aeabi_uldivmod>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	e04a      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb6:	4b31      	ldr	r3, [pc, #196]	; (800307c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	099b      	lsrs	r3, r3, #6
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fc6:	f04f 0100 	mov.w	r1, #0
 8002fca:	ea02 0400 	and.w	r4, r2, r0
 8002fce:	ea03 0501 	and.w	r5, r3, r1
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	014b      	lsls	r3, r1, #5
 8002fe0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fe4:	0142      	lsls	r2, r0, #5
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	1b00      	subs	r0, r0, r4
 8002fec:	eb61 0105 	sbc.w	r1, r1, r5
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	018b      	lsls	r3, r1, #6
 8002ffa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ffe:	0182      	lsls	r2, r0, #6
 8003000:	1a12      	subs	r2, r2, r0
 8003002:	eb63 0301 	sbc.w	r3, r3, r1
 8003006:	f04f 0000 	mov.w	r0, #0
 800300a:	f04f 0100 	mov.w	r1, #0
 800300e:	00d9      	lsls	r1, r3, #3
 8003010:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003014:	00d0      	lsls	r0, r2, #3
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	1912      	adds	r2, r2, r4
 800301c:	eb45 0303 	adc.w	r3, r5, r3
 8003020:	f04f 0000 	mov.w	r0, #0
 8003024:	f04f 0100 	mov.w	r1, #0
 8003028:	0299      	lsls	r1, r3, #10
 800302a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800302e:	0290      	lsls	r0, r2, #10
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4610      	mov	r0, r2
 8003036:	4619      	mov	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	461a      	mov	r2, r3
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	f7fd f926 	bl	8000290 <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4613      	mov	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	0c1b      	lsrs	r3, r3, #16
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	3301      	adds	r3, #1
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	fbb2 f3f3 	udiv	r3, r2, r3
 8003064:	60bb      	str	r3, [r7, #8]
      break;
 8003066:	e002      	b.n	800306e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800306a:	60bb      	str	r3, [r7, #8]
      break;
 800306c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800306e:	68bb      	ldr	r3, [r7, #8]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800
 8003080:	00f42400 	.word	0x00f42400
 8003084:	007a1200 	.word	0x007a1200

08003088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <HAL_RCC_GetHCLKFreq+0x14>)
 800308e:	681b      	ldr	r3, [r3, #0]
}
 8003090:	4618      	mov	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	20000000 	.word	0x20000000

080030a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030a4:	f7ff fff0 	bl	8003088 <HAL_RCC_GetHCLKFreq>
 80030a8:	4602      	mov	r2, r0
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	0a9b      	lsrs	r3, r3, #10
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	4903      	ldr	r1, [pc, #12]	; (80030c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b6:	5ccb      	ldrb	r3, [r1, r3]
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030bc:	4618      	mov	r0, r3
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40023800 	.word	0x40023800
 80030c4:	08006f34 	.word	0x08006f34

080030c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030cc:	f7ff ffdc 	bl	8003088 <HAL_RCC_GetHCLKFreq>
 80030d0:	4602      	mov	r2, r0
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	0b5b      	lsrs	r3, r3, #13
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	4903      	ldr	r1, [pc, #12]	; (80030ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80030de:	5ccb      	ldrb	r3, [r1, r3]
 80030e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40023800 	.word	0x40023800
 80030ec:	08006f34 	.word	0x08006f34

080030f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	220f      	movs	r2, #15
 80030fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003100:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_RCC_GetClockConfig+0x5c>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 0203 	and.w	r2, r3, #3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <HAL_RCC_GetClockConfig+0x5c>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <HAL_RCC_GetClockConfig+0x5c>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_RCC_GetClockConfig+0x5c>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	08db      	lsrs	r3, r3, #3
 800312a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003132:	4b07      	ldr	r3, [pc, #28]	; (8003150 <HAL_RCC_GetClockConfig+0x60>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 020f 	and.w	r2, r3, #15
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	601a      	str	r2, [r3, #0]
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
 8003150:	40023c00 	.word	0x40023c00

08003154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e041      	b.n	80031ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f839 	bl	80031f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3304      	adds	r3, #4
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f000 f9d8 	bl	8003548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b01      	cmp	r3, #1
 800321a:	d001      	beq.n	8003220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e04e      	b.n	80032be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a23      	ldr	r2, [pc, #140]	; (80032cc <HAL_TIM_Base_Start_IT+0xc4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d022      	beq.n	8003288 <HAL_TIM_Base_Start_IT+0x80>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324a:	d01d      	beq.n	8003288 <HAL_TIM_Base_Start_IT+0x80>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1f      	ldr	r2, [pc, #124]	; (80032d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d018      	beq.n	8003288 <HAL_TIM_Base_Start_IT+0x80>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1e      	ldr	r2, [pc, #120]	; (80032d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d013      	beq.n	8003288 <HAL_TIM_Base_Start_IT+0x80>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00e      	beq.n	8003288 <HAL_TIM_Base_Start_IT+0x80>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1b      	ldr	r2, [pc, #108]	; (80032dc <HAL_TIM_Base_Start_IT+0xd4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d009      	beq.n	8003288 <HAL_TIM_Base_Start_IT+0x80>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a19      	ldr	r2, [pc, #100]	; (80032e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d004      	beq.n	8003288 <HAL_TIM_Base_Start_IT+0x80>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a18      	ldr	r2, [pc, #96]	; (80032e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d111      	bne.n	80032ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b06      	cmp	r3, #6
 8003298:	d010      	beq.n	80032bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032aa:	e007      	b.n	80032bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40010000 	.word	0x40010000
 80032d0:	40000400 	.word	0x40000400
 80032d4:	40000800 	.word	0x40000800
 80032d8:	40000c00 	.word	0x40000c00
 80032dc:	40010400 	.word	0x40010400
 80032e0:	40014000 	.word	0x40014000
 80032e4:	40001800 	.word	0x40001800

080032e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d122      	bne.n	8003344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b02      	cmp	r3, #2
 800330a:	d11b      	bne.n	8003344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0202 	mvn.w	r2, #2
 8003314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f8ee 	bl	800350c <HAL_TIM_IC_CaptureCallback>
 8003330:	e005      	b.n	800333e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f8e0 	bl	80034f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f8f1 	bl	8003520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f003 0304 	and.w	r3, r3, #4
 800334e:	2b04      	cmp	r3, #4
 8003350:	d122      	bne.n	8003398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b04      	cmp	r3, #4
 800335e:	d11b      	bne.n	8003398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0204 	mvn.w	r2, #4
 8003368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2202      	movs	r2, #2
 800336e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f8c4 	bl	800350c <HAL_TIM_IC_CaptureCallback>
 8003384:	e005      	b.n	8003392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f8b6 	bl	80034f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f8c7 	bl	8003520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d122      	bne.n	80033ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d11b      	bne.n	80033ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0208 	mvn.w	r2, #8
 80033bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2204      	movs	r2, #4
 80033c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f89a 	bl	800350c <HAL_TIM_IC_CaptureCallback>
 80033d8:	e005      	b.n	80033e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f88c 	bl	80034f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f89d 	bl	8003520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0310 	and.w	r3, r3, #16
 80033f6:	2b10      	cmp	r3, #16
 80033f8:	d122      	bne.n	8003440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b10      	cmp	r3, #16
 8003406:	d11b      	bne.n	8003440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0210 	mvn.w	r2, #16
 8003410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2208      	movs	r2, #8
 8003416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f870 	bl	800350c <HAL_TIM_IC_CaptureCallback>
 800342c:	e005      	b.n	800343a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f862 	bl	80034f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f873 	bl	8003520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b01      	cmp	r3, #1
 800344c:	d10e      	bne.n	800346c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b01      	cmp	r3, #1
 800345a:	d107      	bne.n	800346c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0201 	mvn.w	r2, #1
 8003464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fd fcfe 	bl	8000e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003476:	2b80      	cmp	r3, #128	; 0x80
 8003478:	d10e      	bne.n	8003498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003484:	2b80      	cmp	r3, #128	; 0x80
 8003486:	d107      	bne.n	8003498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f902 	bl	800369c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	2b40      	cmp	r3, #64	; 0x40
 80034a4:	d10e      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b40      	cmp	r3, #64	; 0x40
 80034b2:	d107      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f838 	bl	8003534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d10e      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d107      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0220 	mvn.w	r2, #32
 80034e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f8cc 	bl	8003688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a40      	ldr	r2, [pc, #256]	; (800365c <TIM_Base_SetConfig+0x114>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d013      	beq.n	8003588 <TIM_Base_SetConfig+0x40>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003566:	d00f      	beq.n	8003588 <TIM_Base_SetConfig+0x40>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a3d      	ldr	r2, [pc, #244]	; (8003660 <TIM_Base_SetConfig+0x118>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00b      	beq.n	8003588 <TIM_Base_SetConfig+0x40>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a3c      	ldr	r2, [pc, #240]	; (8003664 <TIM_Base_SetConfig+0x11c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d007      	beq.n	8003588 <TIM_Base_SetConfig+0x40>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a3b      	ldr	r2, [pc, #236]	; (8003668 <TIM_Base_SetConfig+0x120>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d003      	beq.n	8003588 <TIM_Base_SetConfig+0x40>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a3a      	ldr	r2, [pc, #232]	; (800366c <TIM_Base_SetConfig+0x124>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d108      	bne.n	800359a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a2f      	ldr	r2, [pc, #188]	; (800365c <TIM_Base_SetConfig+0x114>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d02b      	beq.n	80035fa <TIM_Base_SetConfig+0xb2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a8:	d027      	beq.n	80035fa <TIM_Base_SetConfig+0xb2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a2c      	ldr	r2, [pc, #176]	; (8003660 <TIM_Base_SetConfig+0x118>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d023      	beq.n	80035fa <TIM_Base_SetConfig+0xb2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a2b      	ldr	r2, [pc, #172]	; (8003664 <TIM_Base_SetConfig+0x11c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01f      	beq.n	80035fa <TIM_Base_SetConfig+0xb2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a2a      	ldr	r2, [pc, #168]	; (8003668 <TIM_Base_SetConfig+0x120>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d01b      	beq.n	80035fa <TIM_Base_SetConfig+0xb2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a29      	ldr	r2, [pc, #164]	; (800366c <TIM_Base_SetConfig+0x124>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d017      	beq.n	80035fa <TIM_Base_SetConfig+0xb2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a28      	ldr	r2, [pc, #160]	; (8003670 <TIM_Base_SetConfig+0x128>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d013      	beq.n	80035fa <TIM_Base_SetConfig+0xb2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a27      	ldr	r2, [pc, #156]	; (8003674 <TIM_Base_SetConfig+0x12c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00f      	beq.n	80035fa <TIM_Base_SetConfig+0xb2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a26      	ldr	r2, [pc, #152]	; (8003678 <TIM_Base_SetConfig+0x130>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00b      	beq.n	80035fa <TIM_Base_SetConfig+0xb2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a25      	ldr	r2, [pc, #148]	; (800367c <TIM_Base_SetConfig+0x134>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d007      	beq.n	80035fa <TIM_Base_SetConfig+0xb2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a24      	ldr	r2, [pc, #144]	; (8003680 <TIM_Base_SetConfig+0x138>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d003      	beq.n	80035fa <TIM_Base_SetConfig+0xb2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a23      	ldr	r2, [pc, #140]	; (8003684 <TIM_Base_SetConfig+0x13c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d108      	bne.n	800360c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a0a      	ldr	r2, [pc, #40]	; (800365c <TIM_Base_SetConfig+0x114>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d003      	beq.n	8003640 <TIM_Base_SetConfig+0xf8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a0c      	ldr	r2, [pc, #48]	; (800366c <TIM_Base_SetConfig+0x124>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d103      	bne.n	8003648 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	615a      	str	r2, [r3, #20]
}
 800364e:	bf00      	nop
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40010000 	.word	0x40010000
 8003660:	40000400 	.word	0x40000400
 8003664:	40000800 	.word	0x40000800
 8003668:	40000c00 	.word	0x40000c00
 800366c:	40010400 	.word	0x40010400
 8003670:	40014000 	.word	0x40014000
 8003674:	40014400 	.word	0x40014400
 8003678:	40014800 	.word	0x40014800
 800367c:	40001800 	.word	0x40001800
 8003680:	40001c00 	.word	0x40001c00
 8003684:	40002000 	.word	0x40002000

08003688 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e03f      	b.n	8003742 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fd fd5c 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2224      	movs	r2, #36	; 0x24
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 ff97 	bl	8004628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695a      	ldr	r2, [r3, #20]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b08a      	sub	sp, #40	; 0x28
 800374e:	af02      	add	r7, sp, #8
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b20      	cmp	r3, #32
 8003768:	d17c      	bne.n	8003864 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_UART_Transmit+0x2c>
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e075      	b.n	8003866 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_UART_Transmit+0x3e>
 8003784:	2302      	movs	r3, #2
 8003786:	e06e      	b.n	8003866 <HAL_UART_Transmit+0x11c>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2221      	movs	r2, #33	; 0x21
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800379e:	f7fd fe63 	bl	8001468 <HAL_GetTick>
 80037a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	88fa      	ldrh	r2, [r7, #6]
 80037a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	88fa      	ldrh	r2, [r7, #6]
 80037ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b8:	d108      	bne.n	80037cc <HAL_UART_Transmit+0x82>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d104      	bne.n	80037cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	e003      	b.n	80037d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037dc:	e02a      	b.n	8003834 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2200      	movs	r2, #0
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fc53 	bl	8004094 <UART_WaitOnFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e036      	b.n	8003866 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10b      	bne.n	8003816 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800380c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	3302      	adds	r3, #2
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	e007      	b.n	8003826 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	3301      	adds	r3, #1
 8003824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1cf      	bne.n	80037de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2200      	movs	r2, #0
 8003846:	2140      	movs	r1, #64	; 0x40
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 fc23 	bl	8004094 <UART_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e006      	b.n	8003866 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	e000      	b.n	8003866 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003864:	2302      	movs	r3, #2
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b08c      	sub	sp, #48	; 0x30
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	4613      	mov	r3, r2
 800387a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b20      	cmp	r3, #32
 8003886:	d152      	bne.n	800392e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e04b      	b.n	8003930 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e044      	b.n	8003930 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	461a      	mov	r2, r3
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fc58 	bl	8004170 <UART_Start_Receive_DMA>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80038c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d12c      	bne.n	8003928 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d125      	bne.n	8003922 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	330c      	adds	r3, #12
 80038f2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	e853 3f00 	ldrex	r3, [r3]
 80038fa:	617b      	str	r3, [r7, #20]
   return(result);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f043 0310 	orr.w	r3, r3, #16
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	330c      	adds	r3, #12
 800390a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800390c:	627a      	str	r2, [r7, #36]	; 0x24
 800390e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003910:	6a39      	ldr	r1, [r7, #32]
 8003912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003914:	e841 2300 	strex	r3, r2, [r1]
 8003918:	61fb      	str	r3, [r7, #28]
   return(result);
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e5      	bne.n	80038ec <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003920:	e002      	b.n	8003928 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003928:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800392c:	e000      	b.n	8003930 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3730      	adds	r7, #48	; 0x30
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b0ba      	sub	sp, #232	; 0xe8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800395e:	2300      	movs	r3, #0
 8003960:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003964:	2300      	movs	r3, #0
 8003966:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800396a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003976:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10f      	bne.n	800399e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800397e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d009      	beq.n	800399e <HAL_UART_IRQHandler+0x66>
 800398a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fd8b 	bl	80044b2 <UART_Receive_IT>
      return;
 800399c:	e256      	b.n	8003e4c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800399e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 80de 	beq.w	8003b64 <HAL_UART_IRQHandler+0x22c>
 80039a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80d1 	beq.w	8003b64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <HAL_UART_IRQHandler+0xae>
 80039ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f043 0201 	orr.w	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <HAL_UART_IRQHandler+0xd2>
 80039f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d005      	beq.n	8003a0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f043 0202 	orr.w	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <HAL_UART_IRQHandler+0xf6>
 8003a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f043 0204 	orr.w	r2, r3, #4
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d011      	beq.n	8003a5e <HAL_UART_IRQHandler+0x126>
 8003a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d105      	bne.n	8003a52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f043 0208 	orr.w	r2, r3, #8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 81ed 	beq.w	8003e42 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_UART_IRQHandler+0x14e>
 8003a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fd16 	bl	80044b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b40      	cmp	r3, #64	; 0x40
 8003a92:	bf0c      	ite	eq
 8003a94:	2301      	moveq	r3, #1
 8003a96:	2300      	movne	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d103      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x17a>
 8003aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d04f      	beq.n	8003b52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fc1e 	bl	80042f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b40      	cmp	r3, #64	; 0x40
 8003ac4:	d141      	bne.n	8003b4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3314      	adds	r3, #20
 8003acc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3314      	adds	r3, #20
 8003aee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003af2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003af6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003afe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1d9      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d013      	beq.n	8003b42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	4a7d      	ldr	r2, [pc, #500]	; (8003d14 <HAL_UART_IRQHandler+0x3dc>)
 8003b20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fd ff26 	bl	8001978 <HAL_DMA_Abort_IT>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d016      	beq.n	8003b60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b40:	e00e      	b.n	8003b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f9a4 	bl	8003e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	e00a      	b.n	8003b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f9a0 	bl	8003e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b50:	e006      	b.n	8003b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f99c 	bl	8003e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b5e:	e170      	b.n	8003e42 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b60:	bf00      	nop
    return;
 8003b62:	e16e      	b.n	8003e42 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	f040 814a 	bne.w	8003e02 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8143 	beq.w	8003e02 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 813c 	beq.w	8003e02 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	f040 80b4 	bne.w	8003d18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8140 	beq.w	8003e46 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	f080 8139 	bcs.w	8003e46 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be6:	f000 8088 	beq.w	8003cfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	330c      	adds	r3, #12
 8003bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	330c      	adds	r3, #12
 8003c12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1d9      	bne.n	8003bea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3314      	adds	r3, #20
 8003c3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3314      	adds	r3, #20
 8003c56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e1      	bne.n	8003c36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3314      	adds	r3, #20
 8003c78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3314      	adds	r3, #20
 8003c92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e3      	bne.n	8003c72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cca:	f023 0310 	bic.w	r3, r3, #16
 8003cce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	330c      	adds	r3, #12
 8003cd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cdc:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ce2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e3      	bne.n	8003cb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fd fdcf 	bl	8001898 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	4619      	mov	r1, r3
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fc fd1a 	bl	8000744 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d10:	e099      	b.n	8003e46 <HAL_UART_IRQHandler+0x50e>
 8003d12:	bf00      	nop
 8003d14:	080043bb 	.word	0x080043bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 808b 	beq.w	8003e4a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8086 	beq.w	8003e4a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	330c      	adds	r3, #12
 8003d44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d48:	e853 3f00 	ldrex	r3, [r3]
 8003d4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	330c      	adds	r3, #12
 8003d5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d62:	647a      	str	r2, [r7, #68]	; 0x44
 8003d64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d6a:	e841 2300 	strex	r3, r2, [r1]
 8003d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1e3      	bne.n	8003d3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3314      	adds	r3, #20
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	623b      	str	r3, [r7, #32]
   return(result);
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	f023 0301 	bic.w	r3, r3, #1
 8003d8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3314      	adds	r3, #20
 8003d96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d9a:	633a      	str	r2, [r7, #48]	; 0x30
 8003d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e3      	bne.n	8003d76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0310 	bic.w	r3, r3, #16
 8003dd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	330c      	adds	r3, #12
 8003ddc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003de0:	61fa      	str	r2, [r7, #28]
 8003de2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	69b9      	ldr	r1, [r7, #24]
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	617b      	str	r3, [r7, #20]
   return(result);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e3      	bne.n	8003dbc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003df4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003df8:	4619      	mov	r1, r3
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fc fca2 	bl	8000744 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e00:	e023      	b.n	8003e4a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <HAL_UART_IRQHandler+0x4ea>
 8003e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fae1 	bl	80043e2 <UART_Transmit_IT>
    return;
 8003e20:	e014      	b.n	8003e4c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00e      	beq.n	8003e4c <HAL_UART_IRQHandler+0x514>
 8003e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d008      	beq.n	8003e4c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fb21 	bl	8004482 <UART_EndTransmit_IT>
    return;
 8003e40:	e004      	b.n	8003e4c <HAL_UART_IRQHandler+0x514>
    return;
 8003e42:	bf00      	nop
 8003e44:	e002      	b.n	8003e4c <HAL_UART_IRQHandler+0x514>
      return;
 8003e46:	bf00      	nop
 8003e48:	e000      	b.n	8003e4c <HAL_UART_IRQHandler+0x514>
      return;
 8003e4a:	bf00      	nop
  }
}
 8003e4c:	37e8      	adds	r7, #232	; 0xe8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop

08003e54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b09c      	sub	sp, #112	; 0x70
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d172      	bne.n	8003fa6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	330c      	adds	r3, #12
 8003ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003edc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ee6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ee8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003eec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e5      	bne.n	8003ec6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3314      	adds	r3, #20
 8003f00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	667b      	str	r3, [r7, #100]	; 0x64
 8003f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3314      	adds	r3, #20
 8003f18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003f1a:	647a      	str	r2, [r7, #68]	; 0x44
 8003f1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e5      	bne.n	8003efa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3314      	adds	r3, #20
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f44:	663b      	str	r3, [r7, #96]	; 0x60
 8003f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3314      	adds	r3, #20
 8003f4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f4e:	633a      	str	r2, [r7, #48]	; 0x30
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e5      	bne.n	8003f2e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d119      	bne.n	8003fa6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f023 0310 	bic.w	r3, r3, #16
 8003f88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f92:	61fa      	str	r2, [r7, #28]
 8003f94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	69b9      	ldr	r1, [r7, #24]
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	617b      	str	r3, [r7, #20]
   return(result);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e5      	bne.n	8003f72 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d106      	bne.n	8003fbc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003fb6:	f7fc fbc5 	bl	8000744 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fba:	e002      	b.n	8003fc2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003fbc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003fbe:	f7ff ff53 	bl	8003e68 <HAL_UART_RxCpltCallback>
}
 8003fc2:	bf00      	nop
 8003fc4:	3770      	adds	r7, #112	; 0x70
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d108      	bne.n	8003ff2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fe4:	085b      	lsrs	r3, r3, #1
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	4619      	mov	r1, r3
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f7fc fbaa 	bl	8000744 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ff0:	e002      	b.n	8003ff8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f7ff ff42 	bl	8003e7c <HAL_UART_RxHalfCpltCallback>
}
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401c:	2b80      	cmp	r3, #128	; 0x80
 800401e:	bf0c      	ite	eq
 8004020:	2301      	moveq	r3, #1
 8004022:	2300      	movne	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b21      	cmp	r3, #33	; 0x21
 8004032:	d108      	bne.n	8004046 <UART_DMAError+0x46>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2200      	movs	r2, #0
 800403e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004040:	68b8      	ldr	r0, [r7, #8]
 8004042:	f000 f92f 	bl	80042a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004050:	2b40      	cmp	r3, #64	; 0x40
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b22      	cmp	r3, #34	; 0x22
 8004066:	d108      	bne.n	800407a <UART_DMAError+0x7a>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2200      	movs	r2, #0
 8004072:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004074:	68b8      	ldr	r0, [r7, #8]
 8004076:	f000 f93d 	bl	80042f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f043 0210 	orr.w	r2, r3, #16
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004086:	68b8      	ldr	r0, [r7, #8]
 8004088:	f7ff ff02 	bl	8003e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800408c:	bf00      	nop
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b090      	sub	sp, #64	; 0x40
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a4:	e050      	b.n	8004148 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d04c      	beq.n	8004148 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80040b4:	f7fd f9d8 	bl	8001468 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d241      	bcs.n	8004148 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	330c      	adds	r3, #12
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	330c      	adds	r3, #12
 80040e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040e4:	637a      	str	r2, [r7, #52]	; 0x34
 80040e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e5      	bne.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3314      	adds	r3, #20
 80040fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	613b      	str	r3, [r7, #16]
   return(result);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3314      	adds	r3, #20
 8004116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004118:	623a      	str	r2, [r7, #32]
 800411a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	69f9      	ldr	r1, [r7, #28]
 800411e:	6a3a      	ldr	r2, [r7, #32]
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	61bb      	str	r3, [r7, #24]
   return(result);
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e5      	bne.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e00f      	b.n	8004168 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4013      	ands	r3, r2
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	429a      	cmp	r2, r3
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	429a      	cmp	r2, r3
 8004164:	d09f      	beq.n	80040a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3740      	adds	r7, #64	; 0x40
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b098      	sub	sp, #96	; 0x60
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	4613      	mov	r3, r2
 800417c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	88fa      	ldrh	r2, [r7, #6]
 8004188:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2222      	movs	r2, #34	; 0x22
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	4a3e      	ldr	r2, [pc, #248]	; (8004298 <UART_Start_Receive_DMA+0x128>)
 800419e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	4a3d      	ldr	r2, [pc, #244]	; (800429c <UART_Start_Receive_DMA+0x12c>)
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	4a3c      	ldr	r2, [pc, #240]	; (80042a0 <UART_Start_Receive_DMA+0x130>)
 80041ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	2200      	movs	r2, #0
 80041b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80041b8:	f107 0308 	add.w	r3, r7, #8
 80041bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3304      	adds	r3, #4
 80041c8:	4619      	mov	r1, r3
 80041ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	f7fd fb0a 	bl	80017e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80041d4:	2300      	movs	r3, #0
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	330c      	adds	r3, #12
 80041f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041fc:	e853 3f00 	ldrex	r3, [r3]
 8004200:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004208:	65bb      	str	r3, [r7, #88]	; 0x58
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	330c      	adds	r3, #12
 8004210:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004212:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004214:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004216:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004218:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e5      	bne.n	80041f2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3314      	adds	r3, #20
 800422c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	657b      	str	r3, [r7, #84]	; 0x54
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3314      	adds	r3, #20
 8004244:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004246:	63ba      	str	r2, [r7, #56]	; 0x38
 8004248:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800424c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1e5      	bne.n	8004226 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3314      	adds	r3, #20
 8004260:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	617b      	str	r3, [r7, #20]
   return(result);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004270:	653b      	str	r3, [r7, #80]	; 0x50
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3314      	adds	r3, #20
 8004278:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800427a:	627a      	str	r2, [r7, #36]	; 0x24
 800427c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	6a39      	ldr	r1, [r7, #32]
 8004280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	61fb      	str	r3, [r7, #28]
   return(result);
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e5      	bne.n	800425a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3760      	adds	r7, #96	; 0x60
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	08003ea5 	.word	0x08003ea5
 800429c:	08003fcb 	.word	0x08003fcb
 80042a0:	08004001 	.word	0x08004001

080042a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b089      	sub	sp, #36	; 0x24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	61ba      	str	r2, [r7, #24]
 80042ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6979      	ldr	r1, [r7, #20]
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	613b      	str	r3, [r7, #16]
   return(result);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e5      	bne.n	80042ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80042e8:	bf00      	nop
 80042ea:	3724      	adds	r7, #36	; 0x24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b095      	sub	sp, #84	; 0x54
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	330c      	adds	r3, #12
 8004302:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	330c      	adds	r3, #12
 800431a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800431c:	643a      	str	r2, [r7, #64]	; 0x40
 800431e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004322:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e5      	bne.n	80042fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3314      	adds	r3, #20
 8004336:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	64bb      	str	r3, [r7, #72]	; 0x48
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3314      	adds	r3, #20
 800434e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004350:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004352:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e5      	bne.n	8004330 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	2b01      	cmp	r3, #1
 800436a:	d119      	bne.n	80043a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	60bb      	str	r3, [r7, #8]
   return(result);
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f023 0310 	bic.w	r3, r3, #16
 8004382:	647b      	str	r3, [r7, #68]	; 0x44
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	330c      	adds	r3, #12
 800438a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800438c:	61ba      	str	r2, [r7, #24]
 800438e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	6979      	ldr	r1, [r7, #20]
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	613b      	str	r3, [r7, #16]
   return(result);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e5      	bne.n	800436c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043ae:	bf00      	nop
 80043b0:	3754      	adds	r7, #84	; 0x54
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7ff fd5b 	bl	8003e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b21      	cmp	r3, #33	; 0x21
 80043f4:	d13e      	bne.n	8004474 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fe:	d114      	bne.n	800442a <UART_Transmit_IT+0x48>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d110      	bne.n	800442a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800441c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	1c9a      	adds	r2, r3, #2
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	621a      	str	r2, [r3, #32]
 8004428:	e008      	b.n	800443c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	1c59      	adds	r1, r3, #1
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6211      	str	r1, [r2, #32]
 8004434:	781a      	ldrb	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29b      	uxth	r3, r3
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	4619      	mov	r1, r3
 800444a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10f      	bne.n	8004470 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800445e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800446e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	e000      	b.n	8004476 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004474:	2302      	movs	r3, #2
  }
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004498:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7ff fcd6 	bl	8003e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b08c      	sub	sp, #48	; 0x30
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b22      	cmp	r3, #34	; 0x22
 80044c4:	f040 80ab 	bne.w	800461e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d0:	d117      	bne.n	8004502 <UART_Receive_IT+0x50>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d113      	bne.n	8004502 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	1c9a      	adds	r2, r3, #2
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004500:	e026      	b.n	8004550 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004514:	d007      	beq.n	8004526 <UART_Receive_IT+0x74>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <UART_Receive_IT+0x82>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	b2da      	uxtb	r2, r3
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	701a      	strb	r2, [r3, #0]
 8004532:	e008      	b.n	8004546 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004540:	b2da      	uxtb	r2, r3
 8004542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004544:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29b      	uxth	r3, r3
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4619      	mov	r1, r3
 800455e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004560:	2b00      	cmp	r3, #0
 8004562:	d15a      	bne.n	800461a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0220 	bic.w	r2, r2, #32
 8004572:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004582:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d135      	bne.n	8004610 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	330c      	adds	r3, #12
 80045b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f023 0310 	bic.w	r3, r3, #16
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	330c      	adds	r3, #12
 80045c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ca:	623a      	str	r2, [r7, #32]
 80045cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	69f9      	ldr	r1, [r7, #28]
 80045d0:	6a3a      	ldr	r2, [r7, #32]
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e5      	bne.n	80045aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	d10a      	bne.n	8004602 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7fc f89b 	bl	8000744 <HAL_UARTEx_RxEventCallback>
 800460e:	e002      	b.n	8004616 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff fc29 	bl	8003e68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	e002      	b.n	8004620 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e000      	b.n	8004620 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
  }
}
 8004620:	4618      	mov	r0, r3
 8004622:	3730      	adds	r7, #48	; 0x30
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800462c:	b09f      	sub	sp, #124	; 0x7c
 800462e:	af00      	add	r7, sp, #0
 8004630:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800463c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463e:	68d9      	ldr	r1, [r3, #12]
 8004640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	ea40 0301 	orr.w	r3, r0, r1
 8004648:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800464a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	431a      	orrs	r2, r3
 8004654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	431a      	orrs	r2, r3
 800465a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	4313      	orrs	r3, r2
 8004660:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800466c:	f021 010c 	bic.w	r1, r1, #12
 8004670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004676:	430b      	orrs	r3, r1
 8004678:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800467a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004686:	6999      	ldr	r1, [r3, #24]
 8004688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	ea40 0301 	orr.w	r3, r0, r1
 8004690:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4bc5      	ldr	r3, [pc, #788]	; (80049ac <UART_SetConfig+0x384>)
 8004698:	429a      	cmp	r2, r3
 800469a:	d004      	beq.n	80046a6 <UART_SetConfig+0x7e>
 800469c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	4bc3      	ldr	r3, [pc, #780]	; (80049b0 <UART_SetConfig+0x388>)
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d103      	bne.n	80046ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046a6:	f7fe fd0f 	bl	80030c8 <HAL_RCC_GetPCLK2Freq>
 80046aa:	6778      	str	r0, [r7, #116]	; 0x74
 80046ac:	e002      	b.n	80046b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046ae:	f7fe fcf7 	bl	80030a0 <HAL_RCC_GetPCLK1Freq>
 80046b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046bc:	f040 80b6 	bne.w	800482c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c2:	461c      	mov	r4, r3
 80046c4:	f04f 0500 	mov.w	r5, #0
 80046c8:	4622      	mov	r2, r4
 80046ca:	462b      	mov	r3, r5
 80046cc:	1891      	adds	r1, r2, r2
 80046ce:	6439      	str	r1, [r7, #64]	; 0x40
 80046d0:	415b      	adcs	r3, r3
 80046d2:	647b      	str	r3, [r7, #68]	; 0x44
 80046d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046d8:	1912      	adds	r2, r2, r4
 80046da:	eb45 0303 	adc.w	r3, r5, r3
 80046de:	f04f 0000 	mov.w	r0, #0
 80046e2:	f04f 0100 	mov.w	r1, #0
 80046e6:	00d9      	lsls	r1, r3, #3
 80046e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046ec:	00d0      	lsls	r0, r2, #3
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	1911      	adds	r1, r2, r4
 80046f4:	6639      	str	r1, [r7, #96]	; 0x60
 80046f6:	416b      	adcs	r3, r5
 80046f8:	667b      	str	r3, [r7, #100]	; 0x64
 80046fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	461a      	mov	r2, r3
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	1891      	adds	r1, r2, r2
 8004706:	63b9      	str	r1, [r7, #56]	; 0x38
 8004708:	415b      	adcs	r3, r3
 800470a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800470c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004710:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004714:	f7fb fdbc 	bl	8000290 <__aeabi_uldivmod>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4ba5      	ldr	r3, [pc, #660]	; (80049b4 <UART_SetConfig+0x38c>)
 800471e:	fba3 2302 	umull	r2, r3, r3, r2
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	011e      	lsls	r6, r3, #4
 8004726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004728:	461c      	mov	r4, r3
 800472a:	f04f 0500 	mov.w	r5, #0
 800472e:	4622      	mov	r2, r4
 8004730:	462b      	mov	r3, r5
 8004732:	1891      	adds	r1, r2, r2
 8004734:	6339      	str	r1, [r7, #48]	; 0x30
 8004736:	415b      	adcs	r3, r3
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
 800473a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800473e:	1912      	adds	r2, r2, r4
 8004740:	eb45 0303 	adc.w	r3, r5, r3
 8004744:	f04f 0000 	mov.w	r0, #0
 8004748:	f04f 0100 	mov.w	r1, #0
 800474c:	00d9      	lsls	r1, r3, #3
 800474e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004752:	00d0      	lsls	r0, r2, #3
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	1911      	adds	r1, r2, r4
 800475a:	65b9      	str	r1, [r7, #88]	; 0x58
 800475c:	416b      	adcs	r3, r5
 800475e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	461a      	mov	r2, r3
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	1891      	adds	r1, r2, r2
 800476c:	62b9      	str	r1, [r7, #40]	; 0x28
 800476e:	415b      	adcs	r3, r3
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004772:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004776:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800477a:	f7fb fd89 	bl	8000290 <__aeabi_uldivmod>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4b8c      	ldr	r3, [pc, #560]	; (80049b4 <UART_SetConfig+0x38c>)
 8004784:	fba3 1302 	umull	r1, r3, r3, r2
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	2164      	movs	r1, #100	; 0x64
 800478c:	fb01 f303 	mul.w	r3, r1, r3
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	3332      	adds	r3, #50	; 0x32
 8004796:	4a87      	ldr	r2, [pc, #540]	; (80049b4 <UART_SetConfig+0x38c>)
 8004798:	fba2 2303 	umull	r2, r3, r2, r3
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047a4:	441e      	add	r6, r3
 80047a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047a8:	4618      	mov	r0, r3
 80047aa:	f04f 0100 	mov.w	r1, #0
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	1894      	adds	r4, r2, r2
 80047b4:	623c      	str	r4, [r7, #32]
 80047b6:	415b      	adcs	r3, r3
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047be:	1812      	adds	r2, r2, r0
 80047c0:	eb41 0303 	adc.w	r3, r1, r3
 80047c4:	f04f 0400 	mov.w	r4, #0
 80047c8:	f04f 0500 	mov.w	r5, #0
 80047cc:	00dd      	lsls	r5, r3, #3
 80047ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80047d2:	00d4      	lsls	r4, r2, #3
 80047d4:	4622      	mov	r2, r4
 80047d6:	462b      	mov	r3, r5
 80047d8:	1814      	adds	r4, r2, r0
 80047da:	653c      	str	r4, [r7, #80]	; 0x50
 80047dc:	414b      	adcs	r3, r1
 80047de:	657b      	str	r3, [r7, #84]	; 0x54
 80047e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	461a      	mov	r2, r3
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	1891      	adds	r1, r2, r2
 80047ec:	61b9      	str	r1, [r7, #24]
 80047ee:	415b      	adcs	r3, r3
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80047fa:	f7fb fd49 	bl	8000290 <__aeabi_uldivmod>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4b6c      	ldr	r3, [pc, #432]	; (80049b4 <UART_SetConfig+0x38c>)
 8004804:	fba3 1302 	umull	r1, r3, r3, r2
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	2164      	movs	r1, #100	; 0x64
 800480c:	fb01 f303 	mul.w	r3, r1, r3
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	3332      	adds	r3, #50	; 0x32
 8004816:	4a67      	ldr	r2, [pc, #412]	; (80049b4 <UART_SetConfig+0x38c>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	f003 0207 	and.w	r2, r3, #7
 8004822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4432      	add	r2, r6
 8004828:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800482a:	e0b9      	b.n	80049a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800482c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800482e:	461c      	mov	r4, r3
 8004830:	f04f 0500 	mov.w	r5, #0
 8004834:	4622      	mov	r2, r4
 8004836:	462b      	mov	r3, r5
 8004838:	1891      	adds	r1, r2, r2
 800483a:	6139      	str	r1, [r7, #16]
 800483c:	415b      	adcs	r3, r3
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004844:	1912      	adds	r2, r2, r4
 8004846:	eb45 0303 	adc.w	r3, r5, r3
 800484a:	f04f 0000 	mov.w	r0, #0
 800484e:	f04f 0100 	mov.w	r1, #0
 8004852:	00d9      	lsls	r1, r3, #3
 8004854:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004858:	00d0      	lsls	r0, r2, #3
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	eb12 0804 	adds.w	r8, r2, r4
 8004862:	eb43 0905 	adc.w	r9, r3, r5
 8004866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4618      	mov	r0, r3
 800486c:	f04f 0100 	mov.w	r1, #0
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	008b      	lsls	r3, r1, #2
 800487a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800487e:	0082      	lsls	r2, r0, #2
 8004880:	4640      	mov	r0, r8
 8004882:	4649      	mov	r1, r9
 8004884:	f7fb fd04 	bl	8000290 <__aeabi_uldivmod>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4b49      	ldr	r3, [pc, #292]	; (80049b4 <UART_SetConfig+0x38c>)
 800488e:	fba3 2302 	umull	r2, r3, r3, r2
 8004892:	095b      	lsrs	r3, r3, #5
 8004894:	011e      	lsls	r6, r3, #4
 8004896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004898:	4618      	mov	r0, r3
 800489a:	f04f 0100 	mov.w	r1, #0
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	1894      	adds	r4, r2, r2
 80048a4:	60bc      	str	r4, [r7, #8]
 80048a6:	415b      	adcs	r3, r3
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048ae:	1812      	adds	r2, r2, r0
 80048b0:	eb41 0303 	adc.w	r3, r1, r3
 80048b4:	f04f 0400 	mov.w	r4, #0
 80048b8:	f04f 0500 	mov.w	r5, #0
 80048bc:	00dd      	lsls	r5, r3, #3
 80048be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048c2:	00d4      	lsls	r4, r2, #3
 80048c4:	4622      	mov	r2, r4
 80048c6:	462b      	mov	r3, r5
 80048c8:	1814      	adds	r4, r2, r0
 80048ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80048cc:	414b      	adcs	r3, r1
 80048ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f04f 0100 	mov.w	r1, #0
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	f04f 0300 	mov.w	r3, #0
 80048e2:	008b      	lsls	r3, r1, #2
 80048e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048e8:	0082      	lsls	r2, r0, #2
 80048ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80048ee:	f7fb fccf 	bl	8000290 <__aeabi_uldivmod>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4b2f      	ldr	r3, [pc, #188]	; (80049b4 <UART_SetConfig+0x38c>)
 80048f8:	fba3 1302 	umull	r1, r3, r3, r2
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	2164      	movs	r1, #100	; 0x64
 8004900:	fb01 f303 	mul.w	r3, r1, r3
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	3332      	adds	r3, #50	; 0x32
 800490a:	4a2a      	ldr	r2, [pc, #168]	; (80049b4 <UART_SetConfig+0x38c>)
 800490c:	fba2 2303 	umull	r2, r3, r2, r3
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004916:	441e      	add	r6, r3
 8004918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800491a:	4618      	mov	r0, r3
 800491c:	f04f 0100 	mov.w	r1, #0
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	1894      	adds	r4, r2, r2
 8004926:	603c      	str	r4, [r7, #0]
 8004928:	415b      	adcs	r3, r3
 800492a:	607b      	str	r3, [r7, #4]
 800492c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004930:	1812      	adds	r2, r2, r0
 8004932:	eb41 0303 	adc.w	r3, r1, r3
 8004936:	f04f 0400 	mov.w	r4, #0
 800493a:	f04f 0500 	mov.w	r5, #0
 800493e:	00dd      	lsls	r5, r3, #3
 8004940:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004944:	00d4      	lsls	r4, r2, #3
 8004946:	4622      	mov	r2, r4
 8004948:	462b      	mov	r3, r5
 800494a:	eb12 0a00 	adds.w	sl, r2, r0
 800494e:	eb43 0b01 	adc.w	fp, r3, r1
 8004952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4618      	mov	r0, r3
 8004958:	f04f 0100 	mov.w	r1, #0
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	008b      	lsls	r3, r1, #2
 8004966:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800496a:	0082      	lsls	r2, r0, #2
 800496c:	4650      	mov	r0, sl
 800496e:	4659      	mov	r1, fp
 8004970:	f7fb fc8e 	bl	8000290 <__aeabi_uldivmod>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4b0e      	ldr	r3, [pc, #56]	; (80049b4 <UART_SetConfig+0x38c>)
 800497a:	fba3 1302 	umull	r1, r3, r3, r2
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	2164      	movs	r1, #100	; 0x64
 8004982:	fb01 f303 	mul.w	r3, r1, r3
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	3332      	adds	r3, #50	; 0x32
 800498c:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <UART_SetConfig+0x38c>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	f003 020f 	and.w	r2, r3, #15
 8004998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4432      	add	r2, r6
 800499e:	609a      	str	r2, [r3, #8]
}
 80049a0:	bf00      	nop
 80049a2:	377c      	adds	r7, #124	; 0x7c
 80049a4:	46bd      	mov	sp, r7
 80049a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049aa:	bf00      	nop
 80049ac:	40011000 	.word	0x40011000
 80049b0:	40011400 	.word	0x40011400
 80049b4:	51eb851f 	.word	0x51eb851f

080049b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049b8:	b084      	sub	sp, #16
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b084      	sub	sp, #16
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	f107 001c 	add.w	r0, r7, #28
 80049c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d122      	bne.n	8004a16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d105      	bne.n	8004a0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fa82 	bl	8004f14 <USB_CoreReset>
 8004a10:	4603      	mov	r3, r0
 8004a12:	73fb      	strb	r3, [r7, #15]
 8004a14:	e01a      	b.n	8004a4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fa76 	bl	8004f14 <USB_CoreReset>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38
 8004a3e:	e005      	b.n	8004a4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d10b      	bne.n	8004a6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f043 0206 	orr.w	r2, r3, #6
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f043 0220 	orr.w	r2, r3, #32
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a76:	b004      	add	sp, #16
 8004a78:	4770      	bx	lr

08004a7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f023 0201 	bic.w	r2, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d115      	bne.n	8004aea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004aca:	2001      	movs	r0, #1
 8004acc:	f7fc fcd8 	bl	8001480 <HAL_Delay>
      ms++;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fa0e 	bl	8004ef8 <USB_GetMode>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d01e      	beq.n	8004b20 <USB_SetCurrentMode+0x84>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b31      	cmp	r3, #49	; 0x31
 8004ae6:	d9f0      	bls.n	8004aca <USB_SetCurrentMode+0x2e>
 8004ae8:	e01a      	b.n	8004b20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d115      	bne.n	8004b1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004afc:	2001      	movs	r0, #1
 8004afe:	f7fc fcbf 	bl	8001480 <HAL_Delay>
      ms++;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3301      	adds	r3, #1
 8004b06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f9f5 	bl	8004ef8 <USB_GetMode>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <USB_SetCurrentMode+0x84>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b31      	cmp	r3, #49	; 0x31
 8004b18:	d9f0      	bls.n	8004afc <USB_SetCurrentMode+0x60>
 8004b1a:	e001      	b.n	8004b20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e005      	b.n	8004b2c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b32      	cmp	r3, #50	; 0x32
 8004b24:	d101      	bne.n	8004b2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b34:	b084      	sub	sp, #16
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b086      	sub	sp, #24
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b4e:	2300      	movs	r3, #0
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	e009      	b.n	8004b68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	3340      	adds	r3, #64	; 0x40
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	2200      	movs	r2, #0
 8004b60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	3301      	adds	r3, #1
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	2b0e      	cmp	r3, #14
 8004b6c:	d9f2      	bls.n	8004b54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d11c      	bne.n	8004bae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b82:	f043 0302 	orr.w	r3, r3, #2
 8004b86:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	639a      	str	r2, [r3, #56]	; 0x38
 8004bac:	e00b      	b.n	8004bc6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bcc:	461a      	mov	r2, r3
 8004bce:	2300      	movs	r3, #0
 8004bd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd8:	4619      	mov	r1, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be0:	461a      	mov	r2, r3
 8004be2:	680b      	ldr	r3, [r1, #0]
 8004be4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d10c      	bne.n	8004c06 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d104      	bne.n	8004bfc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f945 	bl	8004e84 <USB_SetDevSpeed>
 8004bfa:	e008      	b.n	8004c0e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f940 	bl	8004e84 <USB_SetDevSpeed>
 8004c04:	e003      	b.n	8004c0e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c06:	2103      	movs	r1, #3
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f93b 	bl	8004e84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c0e:	2110      	movs	r1, #16
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f8f3 	bl	8004dfc <USB_FlushTxFifo>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f90f 	bl	8004e44 <USB_FlushRxFifo>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c36:	461a      	mov	r2, r3
 8004c38:	2300      	movs	r3, #0
 8004c3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c42:	461a      	mov	r2, r3
 8004c44:	2300      	movs	r3, #0
 8004c46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4e:	461a      	mov	r2, r3
 8004c50:	2300      	movs	r3, #0
 8004c52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c54:	2300      	movs	r3, #0
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	e043      	b.n	8004ce2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c70:	d118      	bne.n	8004ca4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10a      	bne.n	8004c8e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c84:	461a      	mov	r2, r3
 8004c86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	e013      	b.n	8004cb6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e008      	b.n	8004cb6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d3b7      	bcc.n	8004c5a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	e043      	b.n	8004d78 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d06:	d118      	bne.n	8004d3a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10a      	bne.n	8004d24 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e013      	b.n	8004d4c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d30:	461a      	mov	r2, r3
 8004d32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	e008      	b.n	8004d4c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d46:	461a      	mov	r2, r3
 8004d48:	2300      	movs	r3, #0
 8004d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d58:	461a      	mov	r2, r3
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	3301      	adds	r3, #1
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d3b7      	bcc.n	8004cf0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004da0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d105      	bne.n	8004db4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	f043 0210 	orr.w	r2, r3, #16
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699a      	ldr	r2, [r3, #24]
 8004db8:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <USB_DevInit+0x2c4>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d005      	beq.n	8004dd2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	f043 0208 	orr.w	r2, r3, #8
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d107      	bne.n	8004de8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004de0:	f043 0304 	orr.w	r3, r3, #4
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004df4:	b004      	add	sp, #16
 8004df6:	4770      	bx	lr
 8004df8:	803c3800 	.word	0x803c3800

08004dfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	019b      	lsls	r3, r3, #6
 8004e0e:	f043 0220 	orr.w	r2, r3, #32
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	4a08      	ldr	r2, [pc, #32]	; (8004e40 <USB_FlushTxFifo+0x44>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e006      	b.n	8004e34 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d0f1      	beq.n	8004e16 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	00030d40 	.word	0x00030d40

08004e44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2210      	movs	r2, #16
 8004e54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <USB_FlushRxFifo+0x3c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d901      	bls.n	8004e66 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e006      	b.n	8004e74 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b10      	cmp	r3, #16
 8004e70:	d0f1      	beq.n	8004e56 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	00030d40 	.word	0x00030d40

08004e84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	68f9      	ldr	r1, [r7, #12]
 8004ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr

08004eb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b085      	sub	sp, #20
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ed0:	f023 0303 	bic.w	r3, r3, #3
 8004ed4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ee4:	f043 0302 	orr.w	r3, r3, #2
 8004ee8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	f003 0301 	and.w	r3, r3, #1
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3301      	adds	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	4a13      	ldr	r2, [pc, #76]	; (8004f74 <USB_CoreReset+0x60>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d901      	bls.n	8004f30 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e01a      	b.n	8004f66 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	daf3      	bge.n	8004f20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f043 0201 	orr.w	r2, r3, #1
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	4a09      	ldr	r2, [pc, #36]	; (8004f74 <USB_CoreReset+0x60>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d901      	bls.n	8004f58 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e006      	b.n	8004f66 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d0f1      	beq.n	8004f48 <USB_CoreReset+0x34>

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	00030d40 	.word	0x00030d40

08004f78 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f8a:	2b84      	cmp	r3, #132	; 0x84
 8004f8c:	d005      	beq.n	8004f9a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4413      	add	r3, r2
 8004f96:	3303      	adds	r3, #3
 8004f98:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004fac:	f000 faf6 	bl	800559c <vTaskStartScheduler>
  
  return osOK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fb8:	b089      	sub	sp, #36	; 0x24
 8004fba:	af04      	add	r7, sp, #16
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d020      	beq.n	800500a <osThreadCreate+0x54>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01c      	beq.n	800500a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685c      	ldr	r4, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681d      	ldr	r5, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691e      	ldr	r6, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff ffc8 	bl	8004f78 <makeFreeRtosPriority>
 8004fe8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ff2:	9202      	str	r2, [sp, #8]
 8004ff4:	9301      	str	r3, [sp, #4]
 8004ff6:	9100      	str	r1, [sp, #0]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	4632      	mov	r2, r6
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	4620      	mov	r0, r4
 8005000:	f000 f8ed 	bl	80051de <xTaskCreateStatic>
 8005004:	4603      	mov	r3, r0
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e01c      	b.n	8005044 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685c      	ldr	r4, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005016:	b29e      	uxth	r6, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff ffaa 	bl	8004f78 <makeFreeRtosPriority>
 8005024:	4602      	mov	r2, r0
 8005026:	f107 030c 	add.w	r3, r7, #12
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	9200      	str	r2, [sp, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	4632      	mov	r2, r6
 8005032:	4629      	mov	r1, r5
 8005034:	4620      	mov	r0, r4
 8005036:	f000 f92f 	bl	8005298 <xTaskCreate>
 800503a:	4603      	mov	r3, r0
 800503c:	2b01      	cmp	r3, #1
 800503e:	d001      	beq.n	8005044 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005040:	2300      	movs	r3, #0
 8005042:	e000      	b.n	8005046 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005044:	68fb      	ldr	r3, [r7, #12]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800504e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <osDelay+0x16>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	e000      	b.n	8005066 <osDelay+0x18>
 8005064:	2301      	movs	r3, #1
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fa64 	bl	8005534 <vTaskDelay>
  
  return osOK;
 800506c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f103 0208 	add.w	r2, r3, #8
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f04f 32ff 	mov.w	r2, #4294967295
 800508e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f103 0208 	add.w	r2, r3, #8
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f103 0208 	add.w	r2, r3, #8
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	601a      	str	r2, [r3, #0]
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512e:	d103      	bne.n	8005138 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	e00c      	b.n	8005152 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3308      	adds	r3, #8
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	e002      	b.n	8005146 <vListInsert+0x2e>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	429a      	cmp	r2, r3
 8005150:	d2f6      	bcs.n	8005140 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	601a      	str	r2, [r3, #0]
}
 800517e:	bf00      	nop
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800518a:	b480      	push	{r7}
 800518c:	b085      	sub	sp, #20
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6892      	ldr	r2, [r2, #8]
 80051a0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6852      	ldr	r2, [r2, #4]
 80051aa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d103      	bne.n	80051be <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689a      	ldr	r2, [r3, #8]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	1e5a      	subs	r2, r3, #1
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b08e      	sub	sp, #56	; 0x38
 80051e2:	af04      	add	r7, sp, #16
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	607a      	str	r2, [r7, #4]
 80051ea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10a      	bne.n	8005208 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005204:	bf00      	nop
 8005206:	e7fe      	b.n	8005206 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10a      	bne.n	8005224 <xTaskCreateStatic+0x46>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	61fb      	str	r3, [r7, #28]
}
 8005220:	bf00      	nop
 8005222:	e7fe      	b.n	8005222 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005224:	23b4      	movs	r3, #180	; 0xb4
 8005226:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	2bb4      	cmp	r3, #180	; 0xb4
 800522c:	d00a      	beq.n	8005244 <xTaskCreateStatic+0x66>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	61bb      	str	r3, [r7, #24]
}
 8005240:	bf00      	nop
 8005242:	e7fe      	b.n	8005242 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005244:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01e      	beq.n	800528a <xTaskCreateStatic+0xac>
 800524c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524e:	2b00      	cmp	r3, #0
 8005250:	d01b      	beq.n	800528a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800525a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	2202      	movs	r2, #2
 8005260:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005264:	2300      	movs	r3, #0
 8005266:	9303      	str	r3, [sp, #12]
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	9302      	str	r3, [sp, #8]
 800526c:	f107 0314 	add.w	r3, r7, #20
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f851 	bl	8005324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005282:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005284:	f000 f8ec 	bl	8005460 <prvAddNewTaskToReadyList>
 8005288:	e001      	b.n	800528e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800528a:	2300      	movs	r3, #0
 800528c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800528e:	697b      	ldr	r3, [r7, #20]
	}
 8005290:	4618      	mov	r0, r3
 8005292:	3728      	adds	r7, #40	; 0x28
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08c      	sub	sp, #48	; 0x30
 800529c:	af04      	add	r7, sp, #16
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	4613      	mov	r3, r2
 80052a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052a8:	88fb      	ldrh	r3, [r7, #6]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fef3 	bl	8006098 <pvPortMalloc>
 80052b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00e      	beq.n	80052d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052ba:	20b4      	movs	r0, #180	; 0xb4
 80052bc:	f000 feec 	bl	8006098 <pvPortMalloc>
 80052c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	631a      	str	r2, [r3, #48]	; 0x30
 80052ce:	e005      	b.n	80052dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052d0:	6978      	ldr	r0, [r7, #20]
 80052d2:	f000 ffad 	bl	8006230 <vPortFree>
 80052d6:	e001      	b.n	80052dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052d8:	2300      	movs	r3, #0
 80052da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d017      	beq.n	8005312 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052ea:	88fa      	ldrh	r2, [r7, #6]
 80052ec:	2300      	movs	r3, #0
 80052ee:	9303      	str	r3, [sp, #12]
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	9302      	str	r3, [sp, #8]
 80052f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 f80f 	bl	8005324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005306:	69f8      	ldr	r0, [r7, #28]
 8005308:	f000 f8aa 	bl	8005460 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800530c:	2301      	movs	r3, #1
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	e002      	b.n	8005318 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005312:	f04f 33ff 	mov.w	r3, #4294967295
 8005316:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005318:	69bb      	ldr	r3, [r7, #24]
	}
 800531a:	4618      	mov	r0, r3
 800531c:	3720      	adds	r7, #32
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800533c:	3b01      	subs	r3, #1
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f023 0307 	bic.w	r3, r3, #7
 800534a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	617b      	str	r3, [r7, #20]
}
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01f      	beq.n	80053b2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005372:	2300      	movs	r3, #0
 8005374:	61fb      	str	r3, [r7, #28]
 8005376:	e012      	b.n	800539e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	7819      	ldrb	r1, [r3, #0]
 8005380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	4413      	add	r3, r2
 8005386:	3334      	adds	r3, #52	; 0x34
 8005388:	460a      	mov	r2, r1
 800538a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d006      	beq.n	80053a6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	3301      	adds	r3, #1
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	2b0f      	cmp	r3, #15
 80053a2:	d9e9      	bls.n	8005378 <prvInitialiseNewTask+0x54>
 80053a4:	e000      	b.n	80053a8 <prvInitialiseNewTask+0x84>
			{
				break;
 80053a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053b0:	e003      	b.n	80053ba <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	2b06      	cmp	r3, #6
 80053be:	d901      	bls.n	80053c4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053c0:	2306      	movs	r3, #6
 80053c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	2200      	movs	r2, #0
 80053d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	3304      	adds	r3, #4
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff fe6b 	bl	80050b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e2:	3318      	adds	r3, #24
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff fe66 	bl	80050b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f2:	f1c3 0207 	rsb	r2, r3, #7
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	2200      	movs	r2, #0
 8005404:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	2200      	movs	r2, #0
 800540c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	334c      	adds	r3, #76	; 0x4c
 8005414:	2260      	movs	r2, #96	; 0x60
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f001 f861 	bl	80064e0 <memset>
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	4a0c      	ldr	r2, [pc, #48]	; (8005454 <prvInitialiseNewTask+0x130>)
 8005422:	651a      	str	r2, [r3, #80]	; 0x50
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	4a0c      	ldr	r2, [pc, #48]	; (8005458 <prvInitialiseNewTask+0x134>)
 8005428:	655a      	str	r2, [r3, #84]	; 0x54
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	4a0b      	ldr	r2, [pc, #44]	; (800545c <prvInitialiseNewTask+0x138>)
 800542e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	68f9      	ldr	r1, [r7, #12]
 8005434:	69b8      	ldr	r0, [r7, #24]
 8005436:	f000 fc1f 	bl	8005c78 <pxPortInitialiseStack>
 800543a:	4602      	mov	r2, r0
 800543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800544a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800544c:	bf00      	nop
 800544e:	3720      	adds	r7, #32
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	08006f64 	.word	0x08006f64
 8005458:	08006f84 	.word	0x08006f84
 800545c:	08006f44 	.word	0x08006f44

08005460 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005468:	f000 fd34 	bl	8005ed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800546c:	4b2a      	ldr	r3, [pc, #168]	; (8005518 <prvAddNewTaskToReadyList+0xb8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3301      	adds	r3, #1
 8005472:	4a29      	ldr	r2, [pc, #164]	; (8005518 <prvAddNewTaskToReadyList+0xb8>)
 8005474:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005476:	4b29      	ldr	r3, [pc, #164]	; (800551c <prvAddNewTaskToReadyList+0xbc>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d109      	bne.n	8005492 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800547e:	4a27      	ldr	r2, [pc, #156]	; (800551c <prvAddNewTaskToReadyList+0xbc>)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005484:	4b24      	ldr	r3, [pc, #144]	; (8005518 <prvAddNewTaskToReadyList+0xb8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d110      	bne.n	80054ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800548c:	f000 facc 	bl	8005a28 <prvInitialiseTaskLists>
 8005490:	e00d      	b.n	80054ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005492:	4b23      	ldr	r3, [pc, #140]	; (8005520 <prvAddNewTaskToReadyList+0xc0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d109      	bne.n	80054ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800549a:	4b20      	ldr	r3, [pc, #128]	; (800551c <prvAddNewTaskToReadyList+0xbc>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d802      	bhi.n	80054ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054a8:	4a1c      	ldr	r2, [pc, #112]	; (800551c <prvAddNewTaskToReadyList+0xbc>)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054ae:	4b1d      	ldr	r3, [pc, #116]	; (8005524 <prvAddNewTaskToReadyList+0xc4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3301      	adds	r3, #1
 80054b4:	4a1b      	ldr	r2, [pc, #108]	; (8005524 <prvAddNewTaskToReadyList+0xc4>)
 80054b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	2201      	movs	r2, #1
 80054be:	409a      	lsls	r2, r3
 80054c0:	4b19      	ldr	r3, [pc, #100]	; (8005528 <prvAddNewTaskToReadyList+0xc8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	4a18      	ldr	r2, [pc, #96]	; (8005528 <prvAddNewTaskToReadyList+0xc8>)
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4a15      	ldr	r2, [pc, #84]	; (800552c <prvAddNewTaskToReadyList+0xcc>)
 80054d8:	441a      	add	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3304      	adds	r3, #4
 80054de:	4619      	mov	r1, r3
 80054e0:	4610      	mov	r0, r2
 80054e2:	f7ff fdf5 	bl	80050d0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054e6:	f000 fd25 	bl	8005f34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054ea:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <prvAddNewTaskToReadyList+0xc0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00e      	beq.n	8005510 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054f2:	4b0a      	ldr	r3, [pc, #40]	; (800551c <prvAddNewTaskToReadyList+0xbc>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d207      	bcs.n	8005510 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <prvAddNewTaskToReadyList+0xd0>)
 8005502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20000454 	.word	0x20000454
 800551c:	20000354 	.word	0x20000354
 8005520:	20000460 	.word	0x20000460
 8005524:	20000470 	.word	0x20000470
 8005528:	2000045c 	.word	0x2000045c
 800552c:	20000358 	.word	0x20000358
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d017      	beq.n	8005576 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <vTaskDelay+0x60>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <vTaskDelay+0x30>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	60bb      	str	r3, [r7, #8]
}
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005564:	f000 f884 	bl	8005670 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005568:	2100      	movs	r1, #0
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fb1e 	bl	8005bac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005570:	f000 f88c 	bl	800568c <xTaskResumeAll>
 8005574:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d107      	bne.n	800558c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800557c:	4b06      	ldr	r3, [pc, #24]	; (8005598 <vTaskDelay+0x64>)
 800557e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800558c:	bf00      	nop
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	2000047c 	.word	0x2000047c
 8005598:	e000ed04 	.word	0xe000ed04

0800559c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08a      	sub	sp, #40	; 0x28
 80055a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055aa:	463a      	mov	r2, r7
 80055ac:	1d39      	adds	r1, r7, #4
 80055ae:	f107 0308 	add.w	r3, r7, #8
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fb f90c 	bl	80007d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	9202      	str	r2, [sp, #8]
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	2300      	movs	r3, #0
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	2300      	movs	r3, #0
 80055c8:	460a      	mov	r2, r1
 80055ca:	4921      	ldr	r1, [pc, #132]	; (8005650 <vTaskStartScheduler+0xb4>)
 80055cc:	4821      	ldr	r0, [pc, #132]	; (8005654 <vTaskStartScheduler+0xb8>)
 80055ce:	f7ff fe06 	bl	80051de <xTaskCreateStatic>
 80055d2:	4603      	mov	r3, r0
 80055d4:	4a20      	ldr	r2, [pc, #128]	; (8005658 <vTaskStartScheduler+0xbc>)
 80055d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055d8:	4b1f      	ldr	r3, [pc, #124]	; (8005658 <vTaskStartScheduler+0xbc>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055e0:	2301      	movs	r3, #1
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	e001      	b.n	80055ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d11b      	bne.n	8005628 <vTaskStartScheduler+0x8c>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	613b      	str	r3, [r7, #16]
}
 8005602:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005604:	4b15      	ldr	r3, [pc, #84]	; (800565c <vTaskStartScheduler+0xc0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	334c      	adds	r3, #76	; 0x4c
 800560a:	4a15      	ldr	r2, [pc, #84]	; (8005660 <vTaskStartScheduler+0xc4>)
 800560c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800560e:	4b15      	ldr	r3, [pc, #84]	; (8005664 <vTaskStartScheduler+0xc8>)
 8005610:	f04f 32ff 	mov.w	r2, #4294967295
 8005614:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005616:	4b14      	ldr	r3, [pc, #80]	; (8005668 <vTaskStartScheduler+0xcc>)
 8005618:	2201      	movs	r2, #1
 800561a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800561c:	4b13      	ldr	r3, [pc, #76]	; (800566c <vTaskStartScheduler+0xd0>)
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005622:	f000 fbb5 	bl	8005d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005626:	e00e      	b.n	8005646 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562e:	d10a      	bne.n	8005646 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	60fb      	str	r3, [r7, #12]
}
 8005642:	bf00      	nop
 8005644:	e7fe      	b.n	8005644 <vTaskStartScheduler+0xa8>
}
 8005646:	bf00      	nop
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	08006f1c 	.word	0x08006f1c
 8005654:	080059f9 	.word	0x080059f9
 8005658:	20000478 	.word	0x20000478
 800565c:	20000354 	.word	0x20000354
 8005660:	20000010 	.word	0x20000010
 8005664:	20000474 	.word	0x20000474
 8005668:	20000460 	.word	0x20000460
 800566c:	20000458 	.word	0x20000458

08005670 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <vTaskSuspendAll+0x18>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3301      	adds	r3, #1
 800567a:	4a03      	ldr	r2, [pc, #12]	; (8005688 <vTaskSuspendAll+0x18>)
 800567c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800567e:	bf00      	nop
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	2000047c 	.word	0x2000047c

0800568c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005696:	2300      	movs	r3, #0
 8005698:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800569a:	4b41      	ldr	r3, [pc, #260]	; (80057a0 <xTaskResumeAll+0x114>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10a      	bne.n	80056b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	603b      	str	r3, [r7, #0]
}
 80056b4:	bf00      	nop
 80056b6:	e7fe      	b.n	80056b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056b8:	f000 fc0c 	bl	8005ed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056bc:	4b38      	ldr	r3, [pc, #224]	; (80057a0 <xTaskResumeAll+0x114>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	4a37      	ldr	r2, [pc, #220]	; (80057a0 <xTaskResumeAll+0x114>)
 80056c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056c6:	4b36      	ldr	r3, [pc, #216]	; (80057a0 <xTaskResumeAll+0x114>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d161      	bne.n	8005792 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056ce:	4b35      	ldr	r3, [pc, #212]	; (80057a4 <xTaskResumeAll+0x118>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d05d      	beq.n	8005792 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056d6:	e02e      	b.n	8005736 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056d8:	4b33      	ldr	r3, [pc, #204]	; (80057a8 <xTaskResumeAll+0x11c>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3318      	adds	r3, #24
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff fd50 	bl	800518a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3304      	adds	r3, #4
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff fd4b 	bl	800518a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	2201      	movs	r2, #1
 80056fa:	409a      	lsls	r2, r3
 80056fc:	4b2b      	ldr	r3, [pc, #172]	; (80057ac <xTaskResumeAll+0x120>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4313      	orrs	r3, r2
 8005702:	4a2a      	ldr	r2, [pc, #168]	; (80057ac <xTaskResumeAll+0x120>)
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4a27      	ldr	r2, [pc, #156]	; (80057b0 <xTaskResumeAll+0x124>)
 8005714:	441a      	add	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3304      	adds	r3, #4
 800571a:	4619      	mov	r1, r3
 800571c:	4610      	mov	r0, r2
 800571e:	f7ff fcd7 	bl	80050d0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005726:	4b23      	ldr	r3, [pc, #140]	; (80057b4 <xTaskResumeAll+0x128>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	429a      	cmp	r2, r3
 800572e:	d302      	bcc.n	8005736 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005730:	4b21      	ldr	r3, [pc, #132]	; (80057b8 <xTaskResumeAll+0x12c>)
 8005732:	2201      	movs	r2, #1
 8005734:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005736:	4b1c      	ldr	r3, [pc, #112]	; (80057a8 <xTaskResumeAll+0x11c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1cc      	bne.n	80056d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005744:	f000 fa12 	bl	8005b6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005748:	4b1c      	ldr	r3, [pc, #112]	; (80057bc <xTaskResumeAll+0x130>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d010      	beq.n	8005776 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005754:	f000 f836 	bl	80057c4 <xTaskIncrementTick>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800575e:	4b16      	ldr	r3, [pc, #88]	; (80057b8 <xTaskResumeAll+0x12c>)
 8005760:	2201      	movs	r2, #1
 8005762:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3b01      	subs	r3, #1
 8005768:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1f1      	bne.n	8005754 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005770:	4b12      	ldr	r3, [pc, #72]	; (80057bc <xTaskResumeAll+0x130>)
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005776:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <xTaskResumeAll+0x12c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d009      	beq.n	8005792 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800577e:	2301      	movs	r3, #1
 8005780:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005782:	4b0f      	ldr	r3, [pc, #60]	; (80057c0 <xTaskResumeAll+0x134>)
 8005784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005792:	f000 fbcf 	bl	8005f34 <vPortExitCritical>

	return xAlreadyYielded;
 8005796:	68bb      	ldr	r3, [r7, #8]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	2000047c 	.word	0x2000047c
 80057a4:	20000454 	.word	0x20000454
 80057a8:	20000414 	.word	0x20000414
 80057ac:	2000045c 	.word	0x2000045c
 80057b0:	20000358 	.word	0x20000358
 80057b4:	20000354 	.word	0x20000354
 80057b8:	20000468 	.word	0x20000468
 80057bc:	20000464 	.word	0x20000464
 80057c0:	e000ed04 	.word	0xe000ed04

080057c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ce:	4b4e      	ldr	r3, [pc, #312]	; (8005908 <xTaskIncrementTick+0x144>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f040 808e 	bne.w	80058f4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057d8:	4b4c      	ldr	r3, [pc, #304]	; (800590c <xTaskIncrementTick+0x148>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3301      	adds	r3, #1
 80057de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057e0:	4a4a      	ldr	r2, [pc, #296]	; (800590c <xTaskIncrementTick+0x148>)
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d120      	bne.n	800582e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80057ec:	4b48      	ldr	r3, [pc, #288]	; (8005910 <xTaskIncrementTick+0x14c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <xTaskIncrementTick+0x48>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	603b      	str	r3, [r7, #0]
}
 8005808:	bf00      	nop
 800580a:	e7fe      	b.n	800580a <xTaskIncrementTick+0x46>
 800580c:	4b40      	ldr	r3, [pc, #256]	; (8005910 <xTaskIncrementTick+0x14c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	4b40      	ldr	r3, [pc, #256]	; (8005914 <xTaskIncrementTick+0x150>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a3e      	ldr	r2, [pc, #248]	; (8005910 <xTaskIncrementTick+0x14c>)
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	4a3e      	ldr	r2, [pc, #248]	; (8005914 <xTaskIncrementTick+0x150>)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	4b3d      	ldr	r3, [pc, #244]	; (8005918 <xTaskIncrementTick+0x154>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3301      	adds	r3, #1
 8005826:	4a3c      	ldr	r2, [pc, #240]	; (8005918 <xTaskIncrementTick+0x154>)
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	f000 f99f 	bl	8005b6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800582e:	4b3b      	ldr	r3, [pc, #236]	; (800591c <xTaskIncrementTick+0x158>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	429a      	cmp	r2, r3
 8005836:	d348      	bcc.n	80058ca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005838:	4b35      	ldr	r3, [pc, #212]	; (8005910 <xTaskIncrementTick+0x14c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d104      	bne.n	800584c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005842:	4b36      	ldr	r3, [pc, #216]	; (800591c <xTaskIncrementTick+0x158>)
 8005844:	f04f 32ff 	mov.w	r2, #4294967295
 8005848:	601a      	str	r2, [r3, #0]
					break;
 800584a:	e03e      	b.n	80058ca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800584c:	4b30      	ldr	r3, [pc, #192]	; (8005910 <xTaskIncrementTick+0x14c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	429a      	cmp	r2, r3
 8005862:	d203      	bcs.n	800586c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005864:	4a2d      	ldr	r2, [pc, #180]	; (800591c <xTaskIncrementTick+0x158>)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800586a:	e02e      	b.n	80058ca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	3304      	adds	r3, #4
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff fc8a 	bl	800518a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	2b00      	cmp	r3, #0
 800587c:	d004      	beq.n	8005888 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	3318      	adds	r3, #24
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff fc81 	bl	800518a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	2201      	movs	r2, #1
 800588e:	409a      	lsls	r2, r3
 8005890:	4b23      	ldr	r3, [pc, #140]	; (8005920 <xTaskIncrementTick+0x15c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4313      	orrs	r3, r2
 8005896:	4a22      	ldr	r2, [pc, #136]	; (8005920 <xTaskIncrementTick+0x15c>)
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4a1f      	ldr	r2, [pc, #124]	; (8005924 <xTaskIncrementTick+0x160>)
 80058a8:	441a      	add	r2, r3
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	3304      	adds	r3, #4
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f7ff fc0d 	bl	80050d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ba:	4b1b      	ldr	r3, [pc, #108]	; (8005928 <xTaskIncrementTick+0x164>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d3b9      	bcc.n	8005838 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80058c4:	2301      	movs	r3, #1
 80058c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058c8:	e7b6      	b.n	8005838 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058ca:	4b17      	ldr	r3, [pc, #92]	; (8005928 <xTaskIncrementTick+0x164>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d0:	4914      	ldr	r1, [pc, #80]	; (8005924 <xTaskIncrementTick+0x160>)
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	440b      	add	r3, r1
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d901      	bls.n	80058e6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80058e2:	2301      	movs	r3, #1
 80058e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058e6:	4b11      	ldr	r3, [pc, #68]	; (800592c <xTaskIncrementTick+0x168>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d007      	beq.n	80058fe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80058ee:	2301      	movs	r3, #1
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	e004      	b.n	80058fe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058f4:	4b0e      	ldr	r3, [pc, #56]	; (8005930 <xTaskIncrementTick+0x16c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3301      	adds	r3, #1
 80058fa:	4a0d      	ldr	r2, [pc, #52]	; (8005930 <xTaskIncrementTick+0x16c>)
 80058fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058fe:	697b      	ldr	r3, [r7, #20]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	2000047c 	.word	0x2000047c
 800590c:	20000458 	.word	0x20000458
 8005910:	2000040c 	.word	0x2000040c
 8005914:	20000410 	.word	0x20000410
 8005918:	2000046c 	.word	0x2000046c
 800591c:	20000474 	.word	0x20000474
 8005920:	2000045c 	.word	0x2000045c
 8005924:	20000358 	.word	0x20000358
 8005928:	20000354 	.word	0x20000354
 800592c:	20000468 	.word	0x20000468
 8005930:	20000464 	.word	0x20000464

08005934 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800593a:	4b29      	ldr	r3, [pc, #164]	; (80059e0 <vTaskSwitchContext+0xac>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005942:	4b28      	ldr	r3, [pc, #160]	; (80059e4 <vTaskSwitchContext+0xb0>)
 8005944:	2201      	movs	r2, #1
 8005946:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005948:	e044      	b.n	80059d4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800594a:	4b26      	ldr	r3, [pc, #152]	; (80059e4 <vTaskSwitchContext+0xb0>)
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005950:	4b25      	ldr	r3, [pc, #148]	; (80059e8 <vTaskSwitchContext+0xb4>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	fab3 f383 	clz	r3, r3
 800595c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800595e:	7afb      	ldrb	r3, [r7, #11]
 8005960:	f1c3 031f 	rsb	r3, r3, #31
 8005964:	617b      	str	r3, [r7, #20]
 8005966:	4921      	ldr	r1, [pc, #132]	; (80059ec <vTaskSwitchContext+0xb8>)
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4613      	mov	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	440b      	add	r3, r1
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10a      	bne.n	8005990 <vTaskSwitchContext+0x5c>
	__asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	607b      	str	r3, [r7, #4]
}
 800598c:	bf00      	nop
 800598e:	e7fe      	b.n	800598e <vTaskSwitchContext+0x5a>
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4a14      	ldr	r2, [pc, #80]	; (80059ec <vTaskSwitchContext+0xb8>)
 800599c:	4413      	add	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	605a      	str	r2, [r3, #4]
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	3308      	adds	r3, #8
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d104      	bne.n	80059c0 <vTaskSwitchContext+0x8c>
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	605a      	str	r2, [r3, #4]
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	4a0a      	ldr	r2, [pc, #40]	; (80059f0 <vTaskSwitchContext+0xbc>)
 80059c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059ca:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <vTaskSwitchContext+0xbc>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	334c      	adds	r3, #76	; 0x4c
 80059d0:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <vTaskSwitchContext+0xc0>)
 80059d2:	6013      	str	r3, [r2, #0]
}
 80059d4:	bf00      	nop
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	2000047c 	.word	0x2000047c
 80059e4:	20000468 	.word	0x20000468
 80059e8:	2000045c 	.word	0x2000045c
 80059ec:	20000358 	.word	0x20000358
 80059f0:	20000354 	.word	0x20000354
 80059f4:	20000010 	.word	0x20000010

080059f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a00:	f000 f852 	bl	8005aa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a04:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <prvIdleTask+0x28>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d9f9      	bls.n	8005a00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a0c:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <prvIdleTask+0x2c>)
 8005a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a1c:	e7f0      	b.n	8005a00 <prvIdleTask+0x8>
 8005a1e:	bf00      	nop
 8005a20:	20000358 	.word	0x20000358
 8005a24:	e000ed04 	.word	0xe000ed04

08005a28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a2e:	2300      	movs	r3, #0
 8005a30:	607b      	str	r3, [r7, #4]
 8005a32:	e00c      	b.n	8005a4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4a12      	ldr	r2, [pc, #72]	; (8005a88 <prvInitialiseTaskLists+0x60>)
 8005a40:	4413      	add	r3, r2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff fb17 	bl	8005076 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	607b      	str	r3, [r7, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b06      	cmp	r3, #6
 8005a52:	d9ef      	bls.n	8005a34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a54:	480d      	ldr	r0, [pc, #52]	; (8005a8c <prvInitialiseTaskLists+0x64>)
 8005a56:	f7ff fb0e 	bl	8005076 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a5a:	480d      	ldr	r0, [pc, #52]	; (8005a90 <prvInitialiseTaskLists+0x68>)
 8005a5c:	f7ff fb0b 	bl	8005076 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a60:	480c      	ldr	r0, [pc, #48]	; (8005a94 <prvInitialiseTaskLists+0x6c>)
 8005a62:	f7ff fb08 	bl	8005076 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a66:	480c      	ldr	r0, [pc, #48]	; (8005a98 <prvInitialiseTaskLists+0x70>)
 8005a68:	f7ff fb05 	bl	8005076 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a6c:	480b      	ldr	r0, [pc, #44]	; (8005a9c <prvInitialiseTaskLists+0x74>)
 8005a6e:	f7ff fb02 	bl	8005076 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a72:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <prvInitialiseTaskLists+0x78>)
 8005a74:	4a05      	ldr	r2, [pc, #20]	; (8005a8c <prvInitialiseTaskLists+0x64>)
 8005a76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a78:	4b0a      	ldr	r3, [pc, #40]	; (8005aa4 <prvInitialiseTaskLists+0x7c>)
 8005a7a:	4a05      	ldr	r2, [pc, #20]	; (8005a90 <prvInitialiseTaskLists+0x68>)
 8005a7c:	601a      	str	r2, [r3, #0]
}
 8005a7e:	bf00      	nop
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000358 	.word	0x20000358
 8005a8c:	200003e4 	.word	0x200003e4
 8005a90:	200003f8 	.word	0x200003f8
 8005a94:	20000414 	.word	0x20000414
 8005a98:	20000428 	.word	0x20000428
 8005a9c:	20000440 	.word	0x20000440
 8005aa0:	2000040c 	.word	0x2000040c
 8005aa4:	20000410 	.word	0x20000410

08005aa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aae:	e019      	b.n	8005ae4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ab0:	f000 fa10 	bl	8005ed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ab4:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <prvCheckTasksWaitingTermination+0x50>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff fb62 	bl	800518a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ac6:	4b0d      	ldr	r3, [pc, #52]	; (8005afc <prvCheckTasksWaitingTermination+0x54>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	4a0b      	ldr	r2, [pc, #44]	; (8005afc <prvCheckTasksWaitingTermination+0x54>)
 8005ace:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <prvCheckTasksWaitingTermination+0x58>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	4a0a      	ldr	r2, [pc, #40]	; (8005b00 <prvCheckTasksWaitingTermination+0x58>)
 8005ad8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ada:	f000 fa2b 	bl	8005f34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f810 	bl	8005b04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ae4:	4b06      	ldr	r3, [pc, #24]	; (8005b00 <prvCheckTasksWaitingTermination+0x58>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e1      	bne.n	8005ab0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005aec:	bf00      	nop
 8005aee:	bf00      	nop
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000428 	.word	0x20000428
 8005afc:	20000454 	.word	0x20000454
 8005b00:	2000043c 	.word	0x2000043c

08005b04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	334c      	adds	r3, #76	; 0x4c
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 fd55 	bl	80065c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d108      	bne.n	8005b32 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 fb83 	bl	8006230 <vPortFree>
				vPortFree( pxTCB );
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fb80 	bl	8006230 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b30:	e018      	b.n	8005b64 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d103      	bne.n	8005b44 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fb77 	bl	8006230 <vPortFree>
	}
 8005b42:	e00f      	b.n	8005b64 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d00a      	beq.n	8005b64 <prvDeleteTCB+0x60>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	60fb      	str	r3, [r7, #12]
}
 8005b60:	bf00      	nop
 8005b62:	e7fe      	b.n	8005b62 <prvDeleteTCB+0x5e>
	}
 8005b64:	bf00      	nop
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b72:	4b0c      	ldr	r3, [pc, #48]	; (8005ba4 <prvResetNextTaskUnblockTime+0x38>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d104      	bne.n	8005b86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <prvResetNextTaskUnblockTime+0x3c>)
 8005b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b84:	e008      	b.n	8005b98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b86:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <prvResetNextTaskUnblockTime+0x38>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	4a04      	ldr	r2, [pc, #16]	; (8005ba8 <prvResetNextTaskUnblockTime+0x3c>)
 8005b96:	6013      	str	r3, [r2, #0]
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	2000040c 	.word	0x2000040c
 8005ba8:	20000474 	.word	0x20000474

08005bac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bb6:	4b29      	ldr	r3, [pc, #164]	; (8005c5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bbc:	4b28      	ldr	r3, [pc, #160]	; (8005c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff fae1 	bl	800518a <uxListRemove>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10b      	bne.n	8005be6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005bce:	4b24      	ldr	r3, [pc, #144]	; (8005c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bda:	43da      	mvns	r2, r3
 8005bdc:	4b21      	ldr	r3, [pc, #132]	; (8005c64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4013      	ands	r3, r2
 8005be2:	4a20      	ldr	r2, [pc, #128]	; (8005c64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005be4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d10a      	bne.n	8005c04 <prvAddCurrentTaskToDelayedList+0x58>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d007      	beq.n	8005c04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bf4:	4b1a      	ldr	r3, [pc, #104]	; (8005c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	481a      	ldr	r0, [pc, #104]	; (8005c68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005bfe:	f7ff fa67 	bl	80050d0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c02:	e026      	b.n	8005c52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4413      	add	r3, r2
 8005c0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c0c:	4b14      	ldr	r3, [pc, #80]	; (8005c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d209      	bcs.n	8005c30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c1c:	4b13      	ldr	r3, [pc, #76]	; (8005c6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	4b0f      	ldr	r3, [pc, #60]	; (8005c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3304      	adds	r3, #4
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f7ff fa75 	bl	8005118 <vListInsert>
}
 8005c2e:	e010      	b.n	8005c52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c30:	4b0f      	ldr	r3, [pc, #60]	; (8005c70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	f7ff fa6b 	bl	8005118 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c42:	4b0c      	ldr	r3, [pc, #48]	; (8005c74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d202      	bcs.n	8005c52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c4c:	4a09      	ldr	r2, [pc, #36]	; (8005c74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	6013      	str	r3, [r2, #0]
}
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20000458 	.word	0x20000458
 8005c60:	20000354 	.word	0x20000354
 8005c64:	2000045c 	.word	0x2000045c
 8005c68:	20000440 	.word	0x20000440
 8005c6c:	20000410 	.word	0x20000410
 8005c70:	2000040c 	.word	0x2000040c
 8005c74:	20000474 	.word	0x20000474

08005c78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3b04      	subs	r3, #4
 8005c88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3b04      	subs	r3, #4
 8005c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f023 0201 	bic.w	r2, r3, #1
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3b04      	subs	r3, #4
 8005ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ca8:	4a0c      	ldr	r2, [pc, #48]	; (8005cdc <pxPortInitialiseStack+0x64>)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3b14      	subs	r3, #20
 8005cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3b04      	subs	r3, #4
 8005cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f06f 0202 	mvn.w	r2, #2
 8005cc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3b20      	subs	r3, #32
 8005ccc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005cce:	68fb      	ldr	r3, [r7, #12]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	08005ce1 	.word	0x08005ce1

08005ce0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005cea:	4b12      	ldr	r3, [pc, #72]	; (8005d34 <prvTaskExitError+0x54>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf2:	d00a      	beq.n	8005d0a <prvTaskExitError+0x2a>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	60fb      	str	r3, [r7, #12]
}
 8005d06:	bf00      	nop
 8005d08:	e7fe      	b.n	8005d08 <prvTaskExitError+0x28>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	60bb      	str	r3, [r7, #8]
}
 8005d1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005d1e:	bf00      	nop
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0fc      	beq.n	8005d20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005d26:	bf00      	nop
 8005d28:	bf00      	nop
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	2000000c 	.word	0x2000000c
	...

08005d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d40:	4b07      	ldr	r3, [pc, #28]	; (8005d60 <pxCurrentTCBConst2>)
 8005d42:	6819      	ldr	r1, [r3, #0]
 8005d44:	6808      	ldr	r0, [r1, #0]
 8005d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4a:	f380 8809 	msr	PSP, r0
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f04f 0000 	mov.w	r0, #0
 8005d56:	f380 8811 	msr	BASEPRI, r0
 8005d5a:	4770      	bx	lr
 8005d5c:	f3af 8000 	nop.w

08005d60 <pxCurrentTCBConst2>:
 8005d60:	20000354 	.word	0x20000354
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop

08005d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d68:	4808      	ldr	r0, [pc, #32]	; (8005d8c <prvPortStartFirstTask+0x24>)
 8005d6a:	6800      	ldr	r0, [r0, #0]
 8005d6c:	6800      	ldr	r0, [r0, #0]
 8005d6e:	f380 8808 	msr	MSP, r0
 8005d72:	f04f 0000 	mov.w	r0, #0
 8005d76:	f380 8814 	msr	CONTROL, r0
 8005d7a:	b662      	cpsie	i
 8005d7c:	b661      	cpsie	f
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	df00      	svc	0
 8005d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d8a:	bf00      	nop
 8005d8c:	e000ed08 	.word	0xe000ed08

08005d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d96:	4b46      	ldr	r3, [pc, #280]	; (8005eb0 <xPortStartScheduler+0x120>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a46      	ldr	r2, [pc, #280]	; (8005eb4 <xPortStartScheduler+0x124>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d10a      	bne.n	8005db6 <xPortStartScheduler+0x26>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	613b      	str	r3, [r7, #16]
}
 8005db2:	bf00      	nop
 8005db4:	e7fe      	b.n	8005db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005db6:	4b3e      	ldr	r3, [pc, #248]	; (8005eb0 <xPortStartScheduler+0x120>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a3f      	ldr	r2, [pc, #252]	; (8005eb8 <xPortStartScheduler+0x128>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d10a      	bne.n	8005dd6 <xPortStartScheduler+0x46>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	60fb      	str	r3, [r7, #12]
}
 8005dd2:	bf00      	nop
 8005dd4:	e7fe      	b.n	8005dd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005dd6:	4b39      	ldr	r3, [pc, #228]	; (8005ebc <xPortStartScheduler+0x12c>)
 8005dd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	22ff      	movs	r2, #255	; 0xff
 8005de6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005df0:	78fb      	ldrb	r3, [r7, #3]
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	4b31      	ldr	r3, [pc, #196]	; (8005ec0 <xPortStartScheduler+0x130>)
 8005dfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005dfe:	4b31      	ldr	r3, [pc, #196]	; (8005ec4 <xPortStartScheduler+0x134>)
 8005e00:	2207      	movs	r2, #7
 8005e02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e04:	e009      	b.n	8005e1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005e06:	4b2f      	ldr	r3, [pc, #188]	; (8005ec4 <xPortStartScheduler+0x134>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	4a2d      	ldr	r2, [pc, #180]	; (8005ec4 <xPortStartScheduler+0x134>)
 8005e0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005e1a:	78fb      	ldrb	r3, [r7, #3]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e22:	2b80      	cmp	r3, #128	; 0x80
 8005e24:	d0ef      	beq.n	8005e06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005e26:	4b27      	ldr	r3, [pc, #156]	; (8005ec4 <xPortStartScheduler+0x134>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f1c3 0307 	rsb	r3, r3, #7
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d00a      	beq.n	8005e48 <xPortStartScheduler+0xb8>
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	60bb      	str	r3, [r7, #8]
}
 8005e44:	bf00      	nop
 8005e46:	e7fe      	b.n	8005e46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e48:	4b1e      	ldr	r3, [pc, #120]	; (8005ec4 <xPortStartScheduler+0x134>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	021b      	lsls	r3, r3, #8
 8005e4e:	4a1d      	ldr	r2, [pc, #116]	; (8005ec4 <xPortStartScheduler+0x134>)
 8005e50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e52:	4b1c      	ldr	r3, [pc, #112]	; (8005ec4 <xPortStartScheduler+0x134>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e5a:	4a1a      	ldr	r2, [pc, #104]	; (8005ec4 <xPortStartScheduler+0x134>)
 8005e5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e66:	4b18      	ldr	r3, [pc, #96]	; (8005ec8 <xPortStartScheduler+0x138>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a17      	ldr	r2, [pc, #92]	; (8005ec8 <xPortStartScheduler+0x138>)
 8005e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e72:	4b15      	ldr	r3, [pc, #84]	; (8005ec8 <xPortStartScheduler+0x138>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a14      	ldr	r2, [pc, #80]	; (8005ec8 <xPortStartScheduler+0x138>)
 8005e78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e7e:	f000 f8dd 	bl	800603c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e82:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <xPortStartScheduler+0x13c>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e88:	f000 f8fc 	bl	8006084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e8c:	4b10      	ldr	r3, [pc, #64]	; (8005ed0 <xPortStartScheduler+0x140>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a0f      	ldr	r2, [pc, #60]	; (8005ed0 <xPortStartScheduler+0x140>)
 8005e92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005e96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e98:	f7ff ff66 	bl	8005d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e9c:	f7ff fd4a 	bl	8005934 <vTaskSwitchContext>
	prvTaskExitError();
 8005ea0:	f7ff ff1e 	bl	8005ce0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	e000ed00 	.word	0xe000ed00
 8005eb4:	410fc271 	.word	0x410fc271
 8005eb8:	410fc270 	.word	0x410fc270
 8005ebc:	e000e400 	.word	0xe000e400
 8005ec0:	20000480 	.word	0x20000480
 8005ec4:	20000484 	.word	0x20000484
 8005ec8:	e000ed20 	.word	0xe000ed20
 8005ecc:	2000000c 	.word	0x2000000c
 8005ed0:	e000ef34 	.word	0xe000ef34

08005ed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
	__asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	607b      	str	r3, [r7, #4]
}
 8005eec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005eee:	4b0f      	ldr	r3, [pc, #60]	; (8005f2c <vPortEnterCritical+0x58>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	4a0d      	ldr	r2, [pc, #52]	; (8005f2c <vPortEnterCritical+0x58>)
 8005ef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ef8:	4b0c      	ldr	r3, [pc, #48]	; (8005f2c <vPortEnterCritical+0x58>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d10f      	bne.n	8005f20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f00:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <vPortEnterCritical+0x5c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <vPortEnterCritical+0x4c>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	603b      	str	r3, [r7, #0]
}
 8005f1c:	bf00      	nop
 8005f1e:	e7fe      	b.n	8005f1e <vPortEnterCritical+0x4a>
	}
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	2000000c 	.word	0x2000000c
 8005f30:	e000ed04 	.word	0xe000ed04

08005f34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f3a:	4b12      	ldr	r3, [pc, #72]	; (8005f84 <vPortExitCritical+0x50>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <vPortExitCritical+0x24>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	607b      	str	r3, [r7, #4]
}
 8005f54:	bf00      	nop
 8005f56:	e7fe      	b.n	8005f56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f58:	4b0a      	ldr	r3, [pc, #40]	; (8005f84 <vPortExitCritical+0x50>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	4a09      	ldr	r2, [pc, #36]	; (8005f84 <vPortExitCritical+0x50>)
 8005f60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f62:	4b08      	ldr	r3, [pc, #32]	; (8005f84 <vPortExitCritical+0x50>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d105      	bne.n	8005f76 <vPortExitCritical+0x42>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	2000000c 	.word	0x2000000c
	...

08005f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f90:	f3ef 8009 	mrs	r0, PSP
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	4b15      	ldr	r3, [pc, #84]	; (8005ff0 <pxCurrentTCBConst>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	f01e 0f10 	tst.w	lr, #16
 8005fa0:	bf08      	it	eq
 8005fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005faa:	6010      	str	r0, [r2, #0]
 8005fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005fb4:	f380 8811 	msr	BASEPRI, r0
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f7ff fcb8 	bl	8005934 <vTaskSwitchContext>
 8005fc4:	f04f 0000 	mov.w	r0, #0
 8005fc8:	f380 8811 	msr	BASEPRI, r0
 8005fcc:	bc09      	pop	{r0, r3}
 8005fce:	6819      	ldr	r1, [r3, #0]
 8005fd0:	6808      	ldr	r0, [r1, #0]
 8005fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd6:	f01e 0f10 	tst.w	lr, #16
 8005fda:	bf08      	it	eq
 8005fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005fe0:	f380 8809 	msr	PSP, r0
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	f3af 8000 	nop.w

08005ff0 <pxCurrentTCBConst>:
 8005ff0:	20000354 	.word	0x20000354
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop

08005ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	607b      	str	r3, [r7, #4]
}
 8006010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006012:	f7ff fbd7 	bl	80057c4 <xTaskIncrementTick>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800601c:	4b06      	ldr	r3, [pc, #24]	; (8006038 <SysTick_Handler+0x40>)
 800601e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	2300      	movs	r3, #0
 8006026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	f383 8811 	msr	BASEPRI, r3
}
 800602e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006030:	bf00      	nop
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	e000ed04 	.word	0xe000ed04

0800603c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006040:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <vPortSetupTimerInterrupt+0x34>)
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006046:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <vPortSetupTimerInterrupt+0x38>)
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800604c:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <vPortSetupTimerInterrupt+0x3c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a0a      	ldr	r2, [pc, #40]	; (800607c <vPortSetupTimerInterrupt+0x40>)
 8006052:	fba2 2303 	umull	r2, r3, r2, r3
 8006056:	099b      	lsrs	r3, r3, #6
 8006058:	4a09      	ldr	r2, [pc, #36]	; (8006080 <vPortSetupTimerInterrupt+0x44>)
 800605a:	3b01      	subs	r3, #1
 800605c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800605e:	4b04      	ldr	r3, [pc, #16]	; (8006070 <vPortSetupTimerInterrupt+0x34>)
 8006060:	2207      	movs	r2, #7
 8006062:	601a      	str	r2, [r3, #0]
}
 8006064:	bf00      	nop
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	e000e010 	.word	0xe000e010
 8006074:	e000e018 	.word	0xe000e018
 8006078:	20000000 	.word	0x20000000
 800607c:	10624dd3 	.word	0x10624dd3
 8006080:	e000e014 	.word	0xe000e014

08006084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006094 <vPortEnableVFP+0x10>
 8006088:	6801      	ldr	r1, [r0, #0]
 800608a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800608e:	6001      	str	r1, [r0, #0]
 8006090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006092:	bf00      	nop
 8006094:	e000ed88 	.word	0xe000ed88

08006098 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08a      	sub	sp, #40	; 0x28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060a0:	2300      	movs	r3, #0
 80060a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060a4:	f7ff fae4 	bl	8005670 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060a8:	4b5b      	ldr	r3, [pc, #364]	; (8006218 <pvPortMalloc+0x180>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060b0:	f000 f920 	bl	80062f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060b4:	4b59      	ldr	r3, [pc, #356]	; (800621c <pvPortMalloc+0x184>)
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f040 8093 	bne.w	80061e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01d      	beq.n	8006104 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80060c8:	2208      	movs	r2, #8
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4413      	add	r3, r2
 80060ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d014      	beq.n	8006104 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f023 0307 	bic.w	r3, r3, #7
 80060e0:	3308      	adds	r3, #8
 80060e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <pvPortMalloc+0x6c>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	617b      	str	r3, [r7, #20]
}
 8006100:	bf00      	nop
 8006102:	e7fe      	b.n	8006102 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d06e      	beq.n	80061e8 <pvPortMalloc+0x150>
 800610a:	4b45      	ldr	r3, [pc, #276]	; (8006220 <pvPortMalloc+0x188>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	429a      	cmp	r2, r3
 8006112:	d869      	bhi.n	80061e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006114:	4b43      	ldr	r3, [pc, #268]	; (8006224 <pvPortMalloc+0x18c>)
 8006116:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006118:	4b42      	ldr	r3, [pc, #264]	; (8006224 <pvPortMalloc+0x18c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800611e:	e004      	b.n	800612a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	429a      	cmp	r2, r3
 8006132:	d903      	bls.n	800613c <pvPortMalloc+0xa4>
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1f1      	bne.n	8006120 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800613c:	4b36      	ldr	r3, [pc, #216]	; (8006218 <pvPortMalloc+0x180>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006142:	429a      	cmp	r2, r3
 8006144:	d050      	beq.n	80061e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2208      	movs	r2, #8
 800614c:	4413      	add	r3, r2
 800614e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	1ad2      	subs	r2, r2, r3
 8006160:	2308      	movs	r3, #8
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	429a      	cmp	r2, r3
 8006166:	d91f      	bls.n	80061a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4413      	add	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <pvPortMalloc+0xf8>
	__asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	613b      	str	r3, [r7, #16]
}
 800618c:	bf00      	nop
 800618e:	e7fe      	b.n	800618e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	1ad2      	subs	r2, r2, r3
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061a2:	69b8      	ldr	r0, [r7, #24]
 80061a4:	f000 f908 	bl	80063b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061a8:	4b1d      	ldr	r3, [pc, #116]	; (8006220 <pvPortMalloc+0x188>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	4a1b      	ldr	r2, [pc, #108]	; (8006220 <pvPortMalloc+0x188>)
 80061b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061b6:	4b1a      	ldr	r3, [pc, #104]	; (8006220 <pvPortMalloc+0x188>)
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <pvPortMalloc+0x190>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d203      	bcs.n	80061ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061c2:	4b17      	ldr	r3, [pc, #92]	; (8006220 <pvPortMalloc+0x188>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a18      	ldr	r2, [pc, #96]	; (8006228 <pvPortMalloc+0x190>)
 80061c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	4b13      	ldr	r3, [pc, #76]	; (800621c <pvPortMalloc+0x184>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	431a      	orrs	r2, r3
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80061de:	4b13      	ldr	r3, [pc, #76]	; (800622c <pvPortMalloc+0x194>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3301      	adds	r3, #1
 80061e4:	4a11      	ldr	r2, [pc, #68]	; (800622c <pvPortMalloc+0x194>)
 80061e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061e8:	f7ff fa50 	bl	800568c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f003 0307 	and.w	r3, r3, #7
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <pvPortMalloc+0x174>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	60fb      	str	r3, [r7, #12]
}
 8006208:	bf00      	nop
 800620a:	e7fe      	b.n	800620a <pvPortMalloc+0x172>
	return pvReturn;
 800620c:	69fb      	ldr	r3, [r7, #28]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3728      	adds	r7, #40	; 0x28
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20004090 	.word	0x20004090
 800621c:	200040a4 	.word	0x200040a4
 8006220:	20004094 	.word	0x20004094
 8006224:	20004088 	.word	0x20004088
 8006228:	20004098 	.word	0x20004098
 800622c:	2000409c 	.word	0x2000409c

08006230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d04d      	beq.n	80062de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006242:	2308      	movs	r3, #8
 8006244:	425b      	negs	r3, r3
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4413      	add	r3, r2
 800624a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	4b24      	ldr	r3, [pc, #144]	; (80062e8 <vPortFree+0xb8>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4013      	ands	r3, r2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10a      	bne.n	8006274 <vPortFree+0x44>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	60fb      	str	r3, [r7, #12]
}
 8006270:	bf00      	nop
 8006272:	e7fe      	b.n	8006272 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00a      	beq.n	8006292 <vPortFree+0x62>
	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	60bb      	str	r3, [r7, #8]
}
 800628e:	bf00      	nop
 8006290:	e7fe      	b.n	8006290 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	4b14      	ldr	r3, [pc, #80]	; (80062e8 <vPortFree+0xb8>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4013      	ands	r3, r2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d01e      	beq.n	80062de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d11a      	bne.n	80062de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	4b0e      	ldr	r3, [pc, #56]	; (80062e8 <vPortFree+0xb8>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	43db      	mvns	r3, r3
 80062b2:	401a      	ands	r2, r3
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062b8:	f7ff f9da 	bl	8005670 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <vPortFree+0xbc>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4413      	add	r3, r2
 80062c6:	4a09      	ldr	r2, [pc, #36]	; (80062ec <vPortFree+0xbc>)
 80062c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062ca:	6938      	ldr	r0, [r7, #16]
 80062cc:	f000 f874 	bl	80063b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80062d0:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <vPortFree+0xc0>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3301      	adds	r3, #1
 80062d6:	4a06      	ldr	r2, [pc, #24]	; (80062f0 <vPortFree+0xc0>)
 80062d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80062da:	f7ff f9d7 	bl	800568c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062de:	bf00      	nop
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	200040a4 	.word	0x200040a4
 80062ec:	20004094 	.word	0x20004094
 80062f0:	200040a0 	.word	0x200040a0

080062f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80062fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006300:	4b27      	ldr	r3, [pc, #156]	; (80063a0 <prvHeapInit+0xac>)
 8006302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3307      	adds	r3, #7
 8006312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0307 	bic.w	r3, r3, #7
 800631a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	4a1f      	ldr	r2, [pc, #124]	; (80063a0 <prvHeapInit+0xac>)
 8006324:	4413      	add	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800632c:	4a1d      	ldr	r2, [pc, #116]	; (80063a4 <prvHeapInit+0xb0>)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006332:	4b1c      	ldr	r3, [pc, #112]	; (80063a4 <prvHeapInit+0xb0>)
 8006334:	2200      	movs	r2, #0
 8006336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	4413      	add	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006340:	2208      	movs	r2, #8
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	1a9b      	subs	r3, r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0307 	bic.w	r3, r3, #7
 800634e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4a15      	ldr	r2, [pc, #84]	; (80063a8 <prvHeapInit+0xb4>)
 8006354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006356:	4b14      	ldr	r3, [pc, #80]	; (80063a8 <prvHeapInit+0xb4>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2200      	movs	r2, #0
 800635c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800635e:	4b12      	ldr	r3, [pc, #72]	; (80063a8 <prvHeapInit+0xb4>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	1ad2      	subs	r2, r2, r3
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006374:	4b0c      	ldr	r3, [pc, #48]	; (80063a8 <prvHeapInit+0xb4>)
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	4a0a      	ldr	r2, [pc, #40]	; (80063ac <prvHeapInit+0xb8>)
 8006382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	4a09      	ldr	r2, [pc, #36]	; (80063b0 <prvHeapInit+0xbc>)
 800638a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800638c:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <prvHeapInit+0xc0>)
 800638e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006392:	601a      	str	r2, [r3, #0]
}
 8006394:	bf00      	nop
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	20000488 	.word	0x20000488
 80063a4:	20004088 	.word	0x20004088
 80063a8:	20004090 	.word	0x20004090
 80063ac:	20004098 	.word	0x20004098
 80063b0:	20004094 	.word	0x20004094
 80063b4:	200040a4 	.word	0x200040a4

080063b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063c0:	4b28      	ldr	r3, [pc, #160]	; (8006464 <prvInsertBlockIntoFreeList+0xac>)
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	e002      	b.n	80063cc <prvInsertBlockIntoFreeList+0x14>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d8f7      	bhi.n	80063c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	4413      	add	r3, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d108      	bne.n	80063fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	441a      	add	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	441a      	add	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d118      	bne.n	8006440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4b15      	ldr	r3, [pc, #84]	; (8006468 <prvInsertBlockIntoFreeList+0xb0>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d00d      	beq.n	8006436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	441a      	add	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	e008      	b.n	8006448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006436:	4b0c      	ldr	r3, [pc, #48]	; (8006468 <prvInsertBlockIntoFreeList+0xb0>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	e003      	b.n	8006448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	429a      	cmp	r2, r3
 800644e:	d002      	beq.n	8006456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006456:	bf00      	nop
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	20004088 	.word	0x20004088
 8006468:	20004090 	.word	0x20004090

0800646c <__errno>:
 800646c:	4b01      	ldr	r3, [pc, #4]	; (8006474 <__errno+0x8>)
 800646e:	6818      	ldr	r0, [r3, #0]
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	20000010 	.word	0x20000010

08006478 <__libc_init_array>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	4d0d      	ldr	r5, [pc, #52]	; (80064b0 <__libc_init_array+0x38>)
 800647c:	4c0d      	ldr	r4, [pc, #52]	; (80064b4 <__libc_init_array+0x3c>)
 800647e:	1b64      	subs	r4, r4, r5
 8006480:	10a4      	asrs	r4, r4, #2
 8006482:	2600      	movs	r6, #0
 8006484:	42a6      	cmp	r6, r4
 8006486:	d109      	bne.n	800649c <__libc_init_array+0x24>
 8006488:	4d0b      	ldr	r5, [pc, #44]	; (80064b8 <__libc_init_array+0x40>)
 800648a:	4c0c      	ldr	r4, [pc, #48]	; (80064bc <__libc_init_array+0x44>)
 800648c:	f000 fccc 	bl	8006e28 <_init>
 8006490:	1b64      	subs	r4, r4, r5
 8006492:	10a4      	asrs	r4, r4, #2
 8006494:	2600      	movs	r6, #0
 8006496:	42a6      	cmp	r6, r4
 8006498:	d105      	bne.n	80064a6 <__libc_init_array+0x2e>
 800649a:	bd70      	pop	{r4, r5, r6, pc}
 800649c:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a0:	4798      	blx	r3
 80064a2:	3601      	adds	r6, #1
 80064a4:	e7ee      	b.n	8006484 <__libc_init_array+0xc>
 80064a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064aa:	4798      	blx	r3
 80064ac:	3601      	adds	r6, #1
 80064ae:	e7f2      	b.n	8006496 <__libc_init_array+0x1e>
 80064b0:	08006fe0 	.word	0x08006fe0
 80064b4:	08006fe0 	.word	0x08006fe0
 80064b8:	08006fe0 	.word	0x08006fe0
 80064bc:	08006fe4 	.word	0x08006fe4

080064c0 <__retarget_lock_acquire_recursive>:
 80064c0:	4770      	bx	lr

080064c2 <__retarget_lock_release_recursive>:
 80064c2:	4770      	bx	lr

080064c4 <memcpy>:
 80064c4:	440a      	add	r2, r1
 80064c6:	4291      	cmp	r1, r2
 80064c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80064cc:	d100      	bne.n	80064d0 <memcpy+0xc>
 80064ce:	4770      	bx	lr
 80064d0:	b510      	push	{r4, lr}
 80064d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064da:	4291      	cmp	r1, r2
 80064dc:	d1f9      	bne.n	80064d2 <memcpy+0xe>
 80064de:	bd10      	pop	{r4, pc}

080064e0 <memset>:
 80064e0:	4402      	add	r2, r0
 80064e2:	4603      	mov	r3, r0
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d100      	bne.n	80064ea <memset+0xa>
 80064e8:	4770      	bx	lr
 80064ea:	f803 1b01 	strb.w	r1, [r3], #1
 80064ee:	e7f9      	b.n	80064e4 <memset+0x4>

080064f0 <_malloc_r>:
 80064f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f2:	1ccd      	adds	r5, r1, #3
 80064f4:	f025 0503 	bic.w	r5, r5, #3
 80064f8:	3508      	adds	r5, #8
 80064fa:	2d0c      	cmp	r5, #12
 80064fc:	bf38      	it	cc
 80064fe:	250c      	movcc	r5, #12
 8006500:	2d00      	cmp	r5, #0
 8006502:	4606      	mov	r6, r0
 8006504:	db01      	blt.n	800650a <_malloc_r+0x1a>
 8006506:	42a9      	cmp	r1, r5
 8006508:	d903      	bls.n	8006512 <_malloc_r+0x22>
 800650a:	230c      	movs	r3, #12
 800650c:	6033      	str	r3, [r6, #0]
 800650e:	2000      	movs	r0, #0
 8006510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006512:	f000 f8f5 	bl	8006700 <__malloc_lock>
 8006516:	4921      	ldr	r1, [pc, #132]	; (800659c <_malloc_r+0xac>)
 8006518:	680a      	ldr	r2, [r1, #0]
 800651a:	4614      	mov	r4, r2
 800651c:	b99c      	cbnz	r4, 8006546 <_malloc_r+0x56>
 800651e:	4f20      	ldr	r7, [pc, #128]	; (80065a0 <_malloc_r+0xb0>)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	b923      	cbnz	r3, 800652e <_malloc_r+0x3e>
 8006524:	4621      	mov	r1, r4
 8006526:	4630      	mov	r0, r6
 8006528:	f000 f8a6 	bl	8006678 <_sbrk_r>
 800652c:	6038      	str	r0, [r7, #0]
 800652e:	4629      	mov	r1, r5
 8006530:	4630      	mov	r0, r6
 8006532:	f000 f8a1 	bl	8006678 <_sbrk_r>
 8006536:	1c43      	adds	r3, r0, #1
 8006538:	d123      	bne.n	8006582 <_malloc_r+0x92>
 800653a:	230c      	movs	r3, #12
 800653c:	6033      	str	r3, [r6, #0]
 800653e:	4630      	mov	r0, r6
 8006540:	f000 f8e4 	bl	800670c <__malloc_unlock>
 8006544:	e7e3      	b.n	800650e <_malloc_r+0x1e>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	1b5b      	subs	r3, r3, r5
 800654a:	d417      	bmi.n	800657c <_malloc_r+0x8c>
 800654c:	2b0b      	cmp	r3, #11
 800654e:	d903      	bls.n	8006558 <_malloc_r+0x68>
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	441c      	add	r4, r3
 8006554:	6025      	str	r5, [r4, #0]
 8006556:	e004      	b.n	8006562 <_malloc_r+0x72>
 8006558:	6863      	ldr	r3, [r4, #4]
 800655a:	42a2      	cmp	r2, r4
 800655c:	bf0c      	ite	eq
 800655e:	600b      	streq	r3, [r1, #0]
 8006560:	6053      	strne	r3, [r2, #4]
 8006562:	4630      	mov	r0, r6
 8006564:	f000 f8d2 	bl	800670c <__malloc_unlock>
 8006568:	f104 000b 	add.w	r0, r4, #11
 800656c:	1d23      	adds	r3, r4, #4
 800656e:	f020 0007 	bic.w	r0, r0, #7
 8006572:	1ac2      	subs	r2, r0, r3
 8006574:	d0cc      	beq.n	8006510 <_malloc_r+0x20>
 8006576:	1a1b      	subs	r3, r3, r0
 8006578:	50a3      	str	r3, [r4, r2]
 800657a:	e7c9      	b.n	8006510 <_malloc_r+0x20>
 800657c:	4622      	mov	r2, r4
 800657e:	6864      	ldr	r4, [r4, #4]
 8006580:	e7cc      	b.n	800651c <_malloc_r+0x2c>
 8006582:	1cc4      	adds	r4, r0, #3
 8006584:	f024 0403 	bic.w	r4, r4, #3
 8006588:	42a0      	cmp	r0, r4
 800658a:	d0e3      	beq.n	8006554 <_malloc_r+0x64>
 800658c:	1a21      	subs	r1, r4, r0
 800658e:	4630      	mov	r0, r6
 8006590:	f000 f872 	bl	8006678 <_sbrk_r>
 8006594:	3001      	adds	r0, #1
 8006596:	d1dd      	bne.n	8006554 <_malloc_r+0x64>
 8006598:	e7cf      	b.n	800653a <_malloc_r+0x4a>
 800659a:	bf00      	nop
 800659c:	200040a8 	.word	0x200040a8
 80065a0:	200040ac 	.word	0x200040ac

080065a4 <cleanup_glue>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	460c      	mov	r4, r1
 80065a8:	6809      	ldr	r1, [r1, #0]
 80065aa:	4605      	mov	r5, r0
 80065ac:	b109      	cbz	r1, 80065b2 <cleanup_glue+0xe>
 80065ae:	f7ff fff9 	bl	80065a4 <cleanup_glue>
 80065b2:	4621      	mov	r1, r4
 80065b4:	4628      	mov	r0, r5
 80065b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065ba:	f000 b8ad 	b.w	8006718 <_free_r>
	...

080065c0 <_reclaim_reent>:
 80065c0:	4b2c      	ldr	r3, [pc, #176]	; (8006674 <_reclaim_reent+0xb4>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4283      	cmp	r3, r0
 80065c6:	b570      	push	{r4, r5, r6, lr}
 80065c8:	4604      	mov	r4, r0
 80065ca:	d051      	beq.n	8006670 <_reclaim_reent+0xb0>
 80065cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80065ce:	b143      	cbz	r3, 80065e2 <_reclaim_reent+0x22>
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d14a      	bne.n	800666c <_reclaim_reent+0xac>
 80065d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065d8:	6819      	ldr	r1, [r3, #0]
 80065da:	b111      	cbz	r1, 80065e2 <_reclaim_reent+0x22>
 80065dc:	4620      	mov	r0, r4
 80065de:	f000 f89b 	bl	8006718 <_free_r>
 80065e2:	6961      	ldr	r1, [r4, #20]
 80065e4:	b111      	cbz	r1, 80065ec <_reclaim_reent+0x2c>
 80065e6:	4620      	mov	r0, r4
 80065e8:	f000 f896 	bl	8006718 <_free_r>
 80065ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80065ee:	b111      	cbz	r1, 80065f6 <_reclaim_reent+0x36>
 80065f0:	4620      	mov	r0, r4
 80065f2:	f000 f891 	bl	8006718 <_free_r>
 80065f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80065f8:	b111      	cbz	r1, 8006600 <_reclaim_reent+0x40>
 80065fa:	4620      	mov	r0, r4
 80065fc:	f000 f88c 	bl	8006718 <_free_r>
 8006600:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006602:	b111      	cbz	r1, 800660a <_reclaim_reent+0x4a>
 8006604:	4620      	mov	r0, r4
 8006606:	f000 f887 	bl	8006718 <_free_r>
 800660a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800660c:	b111      	cbz	r1, 8006614 <_reclaim_reent+0x54>
 800660e:	4620      	mov	r0, r4
 8006610:	f000 f882 	bl	8006718 <_free_r>
 8006614:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006616:	b111      	cbz	r1, 800661e <_reclaim_reent+0x5e>
 8006618:	4620      	mov	r0, r4
 800661a:	f000 f87d 	bl	8006718 <_free_r>
 800661e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006620:	b111      	cbz	r1, 8006628 <_reclaim_reent+0x68>
 8006622:	4620      	mov	r0, r4
 8006624:	f000 f878 	bl	8006718 <_free_r>
 8006628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800662a:	b111      	cbz	r1, 8006632 <_reclaim_reent+0x72>
 800662c:	4620      	mov	r0, r4
 800662e:	f000 f873 	bl	8006718 <_free_r>
 8006632:	69a3      	ldr	r3, [r4, #24]
 8006634:	b1e3      	cbz	r3, 8006670 <_reclaim_reent+0xb0>
 8006636:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006638:	4620      	mov	r0, r4
 800663a:	4798      	blx	r3
 800663c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800663e:	b1b9      	cbz	r1, 8006670 <_reclaim_reent+0xb0>
 8006640:	4620      	mov	r0, r4
 8006642:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006646:	f7ff bfad 	b.w	80065a4 <cleanup_glue>
 800664a:	5949      	ldr	r1, [r1, r5]
 800664c:	b941      	cbnz	r1, 8006660 <_reclaim_reent+0xa0>
 800664e:	3504      	adds	r5, #4
 8006650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006652:	2d80      	cmp	r5, #128	; 0x80
 8006654:	68d9      	ldr	r1, [r3, #12]
 8006656:	d1f8      	bne.n	800664a <_reclaim_reent+0x8a>
 8006658:	4620      	mov	r0, r4
 800665a:	f000 f85d 	bl	8006718 <_free_r>
 800665e:	e7ba      	b.n	80065d6 <_reclaim_reent+0x16>
 8006660:	680e      	ldr	r6, [r1, #0]
 8006662:	4620      	mov	r0, r4
 8006664:	f000 f858 	bl	8006718 <_free_r>
 8006668:	4631      	mov	r1, r6
 800666a:	e7ef      	b.n	800664c <_reclaim_reent+0x8c>
 800666c:	2500      	movs	r5, #0
 800666e:	e7ef      	b.n	8006650 <_reclaim_reent+0x90>
 8006670:	bd70      	pop	{r4, r5, r6, pc}
 8006672:	bf00      	nop
 8006674:	20000010 	.word	0x20000010

08006678 <_sbrk_r>:
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	4d06      	ldr	r5, [pc, #24]	; (8006694 <_sbrk_r+0x1c>)
 800667c:	2300      	movs	r3, #0
 800667e:	4604      	mov	r4, r0
 8006680:	4608      	mov	r0, r1
 8006682:	602b      	str	r3, [r5, #0]
 8006684:	f7fa fd14 	bl	80010b0 <_sbrk>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d102      	bne.n	8006692 <_sbrk_r+0x1a>
 800668c:	682b      	ldr	r3, [r5, #0]
 800668e:	b103      	cbz	r3, 8006692 <_sbrk_r+0x1a>
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	200049e0 	.word	0x200049e0

08006698 <sniprintf>:
 8006698:	b40c      	push	{r2, r3}
 800669a:	b530      	push	{r4, r5, lr}
 800669c:	4b17      	ldr	r3, [pc, #92]	; (80066fc <sniprintf+0x64>)
 800669e:	1e0c      	subs	r4, r1, #0
 80066a0:	681d      	ldr	r5, [r3, #0]
 80066a2:	b09d      	sub	sp, #116	; 0x74
 80066a4:	da08      	bge.n	80066b8 <sniprintf+0x20>
 80066a6:	238b      	movs	r3, #139	; 0x8b
 80066a8:	602b      	str	r3, [r5, #0]
 80066aa:	f04f 30ff 	mov.w	r0, #4294967295
 80066ae:	b01d      	add	sp, #116	; 0x74
 80066b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066b4:	b002      	add	sp, #8
 80066b6:	4770      	bx	lr
 80066b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80066bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80066c0:	bf14      	ite	ne
 80066c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80066c6:	4623      	moveq	r3, r4
 80066c8:	9304      	str	r3, [sp, #16]
 80066ca:	9307      	str	r3, [sp, #28]
 80066cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066d0:	9002      	str	r0, [sp, #8]
 80066d2:	9006      	str	r0, [sp, #24]
 80066d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80066d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80066da:	ab21      	add	r3, sp, #132	; 0x84
 80066dc:	a902      	add	r1, sp, #8
 80066de:	4628      	mov	r0, r5
 80066e0:	9301      	str	r3, [sp, #4]
 80066e2:	f000 f8c5 	bl	8006870 <_svfiprintf_r>
 80066e6:	1c43      	adds	r3, r0, #1
 80066e8:	bfbc      	itt	lt
 80066ea:	238b      	movlt	r3, #139	; 0x8b
 80066ec:	602b      	strlt	r3, [r5, #0]
 80066ee:	2c00      	cmp	r4, #0
 80066f0:	d0dd      	beq.n	80066ae <sniprintf+0x16>
 80066f2:	9b02      	ldr	r3, [sp, #8]
 80066f4:	2200      	movs	r2, #0
 80066f6:	701a      	strb	r2, [r3, #0]
 80066f8:	e7d9      	b.n	80066ae <sniprintf+0x16>
 80066fa:	bf00      	nop
 80066fc:	20000010 	.word	0x20000010

08006700 <__malloc_lock>:
 8006700:	4801      	ldr	r0, [pc, #4]	; (8006708 <__malloc_lock+0x8>)
 8006702:	f7ff bedd 	b.w	80064c0 <__retarget_lock_acquire_recursive>
 8006706:	bf00      	nop
 8006708:	200049d8 	.word	0x200049d8

0800670c <__malloc_unlock>:
 800670c:	4801      	ldr	r0, [pc, #4]	; (8006714 <__malloc_unlock+0x8>)
 800670e:	f7ff bed8 	b.w	80064c2 <__retarget_lock_release_recursive>
 8006712:	bf00      	nop
 8006714:	200049d8 	.word	0x200049d8

08006718 <_free_r>:
 8006718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800671a:	2900      	cmp	r1, #0
 800671c:	d048      	beq.n	80067b0 <_free_r+0x98>
 800671e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006722:	9001      	str	r0, [sp, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	f1a1 0404 	sub.w	r4, r1, #4
 800672a:	bfb8      	it	lt
 800672c:	18e4      	addlt	r4, r4, r3
 800672e:	f7ff ffe7 	bl	8006700 <__malloc_lock>
 8006732:	4a20      	ldr	r2, [pc, #128]	; (80067b4 <_free_r+0x9c>)
 8006734:	9801      	ldr	r0, [sp, #4]
 8006736:	6813      	ldr	r3, [r2, #0]
 8006738:	4615      	mov	r5, r2
 800673a:	b933      	cbnz	r3, 800674a <_free_r+0x32>
 800673c:	6063      	str	r3, [r4, #4]
 800673e:	6014      	str	r4, [r2, #0]
 8006740:	b003      	add	sp, #12
 8006742:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006746:	f7ff bfe1 	b.w	800670c <__malloc_unlock>
 800674a:	42a3      	cmp	r3, r4
 800674c:	d90b      	bls.n	8006766 <_free_r+0x4e>
 800674e:	6821      	ldr	r1, [r4, #0]
 8006750:	1862      	adds	r2, r4, r1
 8006752:	4293      	cmp	r3, r2
 8006754:	bf04      	itt	eq
 8006756:	681a      	ldreq	r2, [r3, #0]
 8006758:	685b      	ldreq	r3, [r3, #4]
 800675a:	6063      	str	r3, [r4, #4]
 800675c:	bf04      	itt	eq
 800675e:	1852      	addeq	r2, r2, r1
 8006760:	6022      	streq	r2, [r4, #0]
 8006762:	602c      	str	r4, [r5, #0]
 8006764:	e7ec      	b.n	8006740 <_free_r+0x28>
 8006766:	461a      	mov	r2, r3
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	b10b      	cbz	r3, 8006770 <_free_r+0x58>
 800676c:	42a3      	cmp	r3, r4
 800676e:	d9fa      	bls.n	8006766 <_free_r+0x4e>
 8006770:	6811      	ldr	r1, [r2, #0]
 8006772:	1855      	adds	r5, r2, r1
 8006774:	42a5      	cmp	r5, r4
 8006776:	d10b      	bne.n	8006790 <_free_r+0x78>
 8006778:	6824      	ldr	r4, [r4, #0]
 800677a:	4421      	add	r1, r4
 800677c:	1854      	adds	r4, r2, r1
 800677e:	42a3      	cmp	r3, r4
 8006780:	6011      	str	r1, [r2, #0]
 8006782:	d1dd      	bne.n	8006740 <_free_r+0x28>
 8006784:	681c      	ldr	r4, [r3, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	6053      	str	r3, [r2, #4]
 800678a:	4421      	add	r1, r4
 800678c:	6011      	str	r1, [r2, #0]
 800678e:	e7d7      	b.n	8006740 <_free_r+0x28>
 8006790:	d902      	bls.n	8006798 <_free_r+0x80>
 8006792:	230c      	movs	r3, #12
 8006794:	6003      	str	r3, [r0, #0]
 8006796:	e7d3      	b.n	8006740 <_free_r+0x28>
 8006798:	6825      	ldr	r5, [r4, #0]
 800679a:	1961      	adds	r1, r4, r5
 800679c:	428b      	cmp	r3, r1
 800679e:	bf04      	itt	eq
 80067a0:	6819      	ldreq	r1, [r3, #0]
 80067a2:	685b      	ldreq	r3, [r3, #4]
 80067a4:	6063      	str	r3, [r4, #4]
 80067a6:	bf04      	itt	eq
 80067a8:	1949      	addeq	r1, r1, r5
 80067aa:	6021      	streq	r1, [r4, #0]
 80067ac:	6054      	str	r4, [r2, #4]
 80067ae:	e7c7      	b.n	8006740 <_free_r+0x28>
 80067b0:	b003      	add	sp, #12
 80067b2:	bd30      	pop	{r4, r5, pc}
 80067b4:	200040a8 	.word	0x200040a8

080067b8 <__ssputs_r>:
 80067b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067bc:	688e      	ldr	r6, [r1, #8]
 80067be:	429e      	cmp	r6, r3
 80067c0:	4682      	mov	sl, r0
 80067c2:	460c      	mov	r4, r1
 80067c4:	4690      	mov	r8, r2
 80067c6:	461f      	mov	r7, r3
 80067c8:	d838      	bhi.n	800683c <__ssputs_r+0x84>
 80067ca:	898a      	ldrh	r2, [r1, #12]
 80067cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067d0:	d032      	beq.n	8006838 <__ssputs_r+0x80>
 80067d2:	6825      	ldr	r5, [r4, #0]
 80067d4:	6909      	ldr	r1, [r1, #16]
 80067d6:	eba5 0901 	sub.w	r9, r5, r1
 80067da:	6965      	ldr	r5, [r4, #20]
 80067dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067e4:	3301      	adds	r3, #1
 80067e6:	444b      	add	r3, r9
 80067e8:	106d      	asrs	r5, r5, #1
 80067ea:	429d      	cmp	r5, r3
 80067ec:	bf38      	it	cc
 80067ee:	461d      	movcc	r5, r3
 80067f0:	0553      	lsls	r3, r2, #21
 80067f2:	d531      	bpl.n	8006858 <__ssputs_r+0xa0>
 80067f4:	4629      	mov	r1, r5
 80067f6:	f7ff fe7b 	bl	80064f0 <_malloc_r>
 80067fa:	4606      	mov	r6, r0
 80067fc:	b950      	cbnz	r0, 8006814 <__ssputs_r+0x5c>
 80067fe:	230c      	movs	r3, #12
 8006800:	f8ca 3000 	str.w	r3, [sl]
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800680a:	81a3      	strh	r3, [r4, #12]
 800680c:	f04f 30ff 	mov.w	r0, #4294967295
 8006810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006814:	6921      	ldr	r1, [r4, #16]
 8006816:	464a      	mov	r2, r9
 8006818:	f7ff fe54 	bl	80064c4 <memcpy>
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006826:	81a3      	strh	r3, [r4, #12]
 8006828:	6126      	str	r6, [r4, #16]
 800682a:	6165      	str	r5, [r4, #20]
 800682c:	444e      	add	r6, r9
 800682e:	eba5 0509 	sub.w	r5, r5, r9
 8006832:	6026      	str	r6, [r4, #0]
 8006834:	60a5      	str	r5, [r4, #8]
 8006836:	463e      	mov	r6, r7
 8006838:	42be      	cmp	r6, r7
 800683a:	d900      	bls.n	800683e <__ssputs_r+0x86>
 800683c:	463e      	mov	r6, r7
 800683e:	4632      	mov	r2, r6
 8006840:	6820      	ldr	r0, [r4, #0]
 8006842:	4641      	mov	r1, r8
 8006844:	f000 faa8 	bl	8006d98 <memmove>
 8006848:	68a3      	ldr	r3, [r4, #8]
 800684a:	6822      	ldr	r2, [r4, #0]
 800684c:	1b9b      	subs	r3, r3, r6
 800684e:	4432      	add	r2, r6
 8006850:	60a3      	str	r3, [r4, #8]
 8006852:	6022      	str	r2, [r4, #0]
 8006854:	2000      	movs	r0, #0
 8006856:	e7db      	b.n	8006810 <__ssputs_r+0x58>
 8006858:	462a      	mov	r2, r5
 800685a:	f000 fab7 	bl	8006dcc <_realloc_r>
 800685e:	4606      	mov	r6, r0
 8006860:	2800      	cmp	r0, #0
 8006862:	d1e1      	bne.n	8006828 <__ssputs_r+0x70>
 8006864:	6921      	ldr	r1, [r4, #16]
 8006866:	4650      	mov	r0, sl
 8006868:	f7ff ff56 	bl	8006718 <_free_r>
 800686c:	e7c7      	b.n	80067fe <__ssputs_r+0x46>
	...

08006870 <_svfiprintf_r>:
 8006870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006874:	4698      	mov	r8, r3
 8006876:	898b      	ldrh	r3, [r1, #12]
 8006878:	061b      	lsls	r3, r3, #24
 800687a:	b09d      	sub	sp, #116	; 0x74
 800687c:	4607      	mov	r7, r0
 800687e:	460d      	mov	r5, r1
 8006880:	4614      	mov	r4, r2
 8006882:	d50e      	bpl.n	80068a2 <_svfiprintf_r+0x32>
 8006884:	690b      	ldr	r3, [r1, #16]
 8006886:	b963      	cbnz	r3, 80068a2 <_svfiprintf_r+0x32>
 8006888:	2140      	movs	r1, #64	; 0x40
 800688a:	f7ff fe31 	bl	80064f0 <_malloc_r>
 800688e:	6028      	str	r0, [r5, #0]
 8006890:	6128      	str	r0, [r5, #16]
 8006892:	b920      	cbnz	r0, 800689e <_svfiprintf_r+0x2e>
 8006894:	230c      	movs	r3, #12
 8006896:	603b      	str	r3, [r7, #0]
 8006898:	f04f 30ff 	mov.w	r0, #4294967295
 800689c:	e0d1      	b.n	8006a42 <_svfiprintf_r+0x1d2>
 800689e:	2340      	movs	r3, #64	; 0x40
 80068a0:	616b      	str	r3, [r5, #20]
 80068a2:	2300      	movs	r3, #0
 80068a4:	9309      	str	r3, [sp, #36]	; 0x24
 80068a6:	2320      	movs	r3, #32
 80068a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80068b0:	2330      	movs	r3, #48	; 0x30
 80068b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a5c <_svfiprintf_r+0x1ec>
 80068b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068ba:	f04f 0901 	mov.w	r9, #1
 80068be:	4623      	mov	r3, r4
 80068c0:	469a      	mov	sl, r3
 80068c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068c6:	b10a      	cbz	r2, 80068cc <_svfiprintf_r+0x5c>
 80068c8:	2a25      	cmp	r2, #37	; 0x25
 80068ca:	d1f9      	bne.n	80068c0 <_svfiprintf_r+0x50>
 80068cc:	ebba 0b04 	subs.w	fp, sl, r4
 80068d0:	d00b      	beq.n	80068ea <_svfiprintf_r+0x7a>
 80068d2:	465b      	mov	r3, fp
 80068d4:	4622      	mov	r2, r4
 80068d6:	4629      	mov	r1, r5
 80068d8:	4638      	mov	r0, r7
 80068da:	f7ff ff6d 	bl	80067b8 <__ssputs_r>
 80068de:	3001      	adds	r0, #1
 80068e0:	f000 80aa 	beq.w	8006a38 <_svfiprintf_r+0x1c8>
 80068e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068e6:	445a      	add	r2, fp
 80068e8:	9209      	str	r2, [sp, #36]	; 0x24
 80068ea:	f89a 3000 	ldrb.w	r3, [sl]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 80a2 	beq.w	8006a38 <_svfiprintf_r+0x1c8>
 80068f4:	2300      	movs	r3, #0
 80068f6:	f04f 32ff 	mov.w	r2, #4294967295
 80068fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068fe:	f10a 0a01 	add.w	sl, sl, #1
 8006902:	9304      	str	r3, [sp, #16]
 8006904:	9307      	str	r3, [sp, #28]
 8006906:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800690a:	931a      	str	r3, [sp, #104]	; 0x68
 800690c:	4654      	mov	r4, sl
 800690e:	2205      	movs	r2, #5
 8006910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006914:	4851      	ldr	r0, [pc, #324]	; (8006a5c <_svfiprintf_r+0x1ec>)
 8006916:	f7f9 fc6b 	bl	80001f0 <memchr>
 800691a:	9a04      	ldr	r2, [sp, #16]
 800691c:	b9d8      	cbnz	r0, 8006956 <_svfiprintf_r+0xe6>
 800691e:	06d0      	lsls	r0, r2, #27
 8006920:	bf44      	itt	mi
 8006922:	2320      	movmi	r3, #32
 8006924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006928:	0711      	lsls	r1, r2, #28
 800692a:	bf44      	itt	mi
 800692c:	232b      	movmi	r3, #43	; 0x2b
 800692e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006932:	f89a 3000 	ldrb.w	r3, [sl]
 8006936:	2b2a      	cmp	r3, #42	; 0x2a
 8006938:	d015      	beq.n	8006966 <_svfiprintf_r+0xf6>
 800693a:	9a07      	ldr	r2, [sp, #28]
 800693c:	4654      	mov	r4, sl
 800693e:	2000      	movs	r0, #0
 8006940:	f04f 0c0a 	mov.w	ip, #10
 8006944:	4621      	mov	r1, r4
 8006946:	f811 3b01 	ldrb.w	r3, [r1], #1
 800694a:	3b30      	subs	r3, #48	; 0x30
 800694c:	2b09      	cmp	r3, #9
 800694e:	d94e      	bls.n	80069ee <_svfiprintf_r+0x17e>
 8006950:	b1b0      	cbz	r0, 8006980 <_svfiprintf_r+0x110>
 8006952:	9207      	str	r2, [sp, #28]
 8006954:	e014      	b.n	8006980 <_svfiprintf_r+0x110>
 8006956:	eba0 0308 	sub.w	r3, r0, r8
 800695a:	fa09 f303 	lsl.w	r3, r9, r3
 800695e:	4313      	orrs	r3, r2
 8006960:	9304      	str	r3, [sp, #16]
 8006962:	46a2      	mov	sl, r4
 8006964:	e7d2      	b.n	800690c <_svfiprintf_r+0x9c>
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	1d19      	adds	r1, r3, #4
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	9103      	str	r1, [sp, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	bfbb      	ittet	lt
 8006972:	425b      	neglt	r3, r3
 8006974:	f042 0202 	orrlt.w	r2, r2, #2
 8006978:	9307      	strge	r3, [sp, #28]
 800697a:	9307      	strlt	r3, [sp, #28]
 800697c:	bfb8      	it	lt
 800697e:	9204      	strlt	r2, [sp, #16]
 8006980:	7823      	ldrb	r3, [r4, #0]
 8006982:	2b2e      	cmp	r3, #46	; 0x2e
 8006984:	d10c      	bne.n	80069a0 <_svfiprintf_r+0x130>
 8006986:	7863      	ldrb	r3, [r4, #1]
 8006988:	2b2a      	cmp	r3, #42	; 0x2a
 800698a:	d135      	bne.n	80069f8 <_svfiprintf_r+0x188>
 800698c:	9b03      	ldr	r3, [sp, #12]
 800698e:	1d1a      	adds	r2, r3, #4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	9203      	str	r2, [sp, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	bfb8      	it	lt
 8006998:	f04f 33ff 	movlt.w	r3, #4294967295
 800699c:	3402      	adds	r4, #2
 800699e:	9305      	str	r3, [sp, #20]
 80069a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a6c <_svfiprintf_r+0x1fc>
 80069a4:	7821      	ldrb	r1, [r4, #0]
 80069a6:	2203      	movs	r2, #3
 80069a8:	4650      	mov	r0, sl
 80069aa:	f7f9 fc21 	bl	80001f0 <memchr>
 80069ae:	b140      	cbz	r0, 80069c2 <_svfiprintf_r+0x152>
 80069b0:	2340      	movs	r3, #64	; 0x40
 80069b2:	eba0 000a 	sub.w	r0, r0, sl
 80069b6:	fa03 f000 	lsl.w	r0, r3, r0
 80069ba:	9b04      	ldr	r3, [sp, #16]
 80069bc:	4303      	orrs	r3, r0
 80069be:	3401      	adds	r4, #1
 80069c0:	9304      	str	r3, [sp, #16]
 80069c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069c6:	4826      	ldr	r0, [pc, #152]	; (8006a60 <_svfiprintf_r+0x1f0>)
 80069c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069cc:	2206      	movs	r2, #6
 80069ce:	f7f9 fc0f 	bl	80001f0 <memchr>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d038      	beq.n	8006a48 <_svfiprintf_r+0x1d8>
 80069d6:	4b23      	ldr	r3, [pc, #140]	; (8006a64 <_svfiprintf_r+0x1f4>)
 80069d8:	bb1b      	cbnz	r3, 8006a22 <_svfiprintf_r+0x1b2>
 80069da:	9b03      	ldr	r3, [sp, #12]
 80069dc:	3307      	adds	r3, #7
 80069de:	f023 0307 	bic.w	r3, r3, #7
 80069e2:	3308      	adds	r3, #8
 80069e4:	9303      	str	r3, [sp, #12]
 80069e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e8:	4433      	add	r3, r6
 80069ea:	9309      	str	r3, [sp, #36]	; 0x24
 80069ec:	e767      	b.n	80068be <_svfiprintf_r+0x4e>
 80069ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80069f2:	460c      	mov	r4, r1
 80069f4:	2001      	movs	r0, #1
 80069f6:	e7a5      	b.n	8006944 <_svfiprintf_r+0xd4>
 80069f8:	2300      	movs	r3, #0
 80069fa:	3401      	adds	r4, #1
 80069fc:	9305      	str	r3, [sp, #20]
 80069fe:	4619      	mov	r1, r3
 8006a00:	f04f 0c0a 	mov.w	ip, #10
 8006a04:	4620      	mov	r0, r4
 8006a06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a0a:	3a30      	subs	r2, #48	; 0x30
 8006a0c:	2a09      	cmp	r2, #9
 8006a0e:	d903      	bls.n	8006a18 <_svfiprintf_r+0x1a8>
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d0c5      	beq.n	80069a0 <_svfiprintf_r+0x130>
 8006a14:	9105      	str	r1, [sp, #20]
 8006a16:	e7c3      	b.n	80069a0 <_svfiprintf_r+0x130>
 8006a18:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e7f0      	b.n	8006a04 <_svfiprintf_r+0x194>
 8006a22:	ab03      	add	r3, sp, #12
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	462a      	mov	r2, r5
 8006a28:	4b0f      	ldr	r3, [pc, #60]	; (8006a68 <_svfiprintf_r+0x1f8>)
 8006a2a:	a904      	add	r1, sp, #16
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	f3af 8000 	nop.w
 8006a32:	1c42      	adds	r2, r0, #1
 8006a34:	4606      	mov	r6, r0
 8006a36:	d1d6      	bne.n	80069e6 <_svfiprintf_r+0x176>
 8006a38:	89ab      	ldrh	r3, [r5, #12]
 8006a3a:	065b      	lsls	r3, r3, #25
 8006a3c:	f53f af2c 	bmi.w	8006898 <_svfiprintf_r+0x28>
 8006a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a42:	b01d      	add	sp, #116	; 0x74
 8006a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a48:	ab03      	add	r3, sp, #12
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	462a      	mov	r2, r5
 8006a4e:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <_svfiprintf_r+0x1f8>)
 8006a50:	a904      	add	r1, sp, #16
 8006a52:	4638      	mov	r0, r7
 8006a54:	f000 f87a 	bl	8006b4c <_printf_i>
 8006a58:	e7eb      	b.n	8006a32 <_svfiprintf_r+0x1c2>
 8006a5a:	bf00      	nop
 8006a5c:	08006fa4 	.word	0x08006fa4
 8006a60:	08006fae 	.word	0x08006fae
 8006a64:	00000000 	.word	0x00000000
 8006a68:	080067b9 	.word	0x080067b9
 8006a6c:	08006faa 	.word	0x08006faa

08006a70 <_printf_common>:
 8006a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a74:	4616      	mov	r6, r2
 8006a76:	4699      	mov	r9, r3
 8006a78:	688a      	ldr	r2, [r1, #8]
 8006a7a:	690b      	ldr	r3, [r1, #16]
 8006a7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a80:	4293      	cmp	r3, r2
 8006a82:	bfb8      	it	lt
 8006a84:	4613      	movlt	r3, r2
 8006a86:	6033      	str	r3, [r6, #0]
 8006a88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a8c:	4607      	mov	r7, r0
 8006a8e:	460c      	mov	r4, r1
 8006a90:	b10a      	cbz	r2, 8006a96 <_printf_common+0x26>
 8006a92:	3301      	adds	r3, #1
 8006a94:	6033      	str	r3, [r6, #0]
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	0699      	lsls	r1, r3, #26
 8006a9a:	bf42      	ittt	mi
 8006a9c:	6833      	ldrmi	r3, [r6, #0]
 8006a9e:	3302      	addmi	r3, #2
 8006aa0:	6033      	strmi	r3, [r6, #0]
 8006aa2:	6825      	ldr	r5, [r4, #0]
 8006aa4:	f015 0506 	ands.w	r5, r5, #6
 8006aa8:	d106      	bne.n	8006ab8 <_printf_common+0x48>
 8006aaa:	f104 0a19 	add.w	sl, r4, #25
 8006aae:	68e3      	ldr	r3, [r4, #12]
 8006ab0:	6832      	ldr	r2, [r6, #0]
 8006ab2:	1a9b      	subs	r3, r3, r2
 8006ab4:	42ab      	cmp	r3, r5
 8006ab6:	dc26      	bgt.n	8006b06 <_printf_common+0x96>
 8006ab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006abc:	1e13      	subs	r3, r2, #0
 8006abe:	6822      	ldr	r2, [r4, #0]
 8006ac0:	bf18      	it	ne
 8006ac2:	2301      	movne	r3, #1
 8006ac4:	0692      	lsls	r2, r2, #26
 8006ac6:	d42b      	bmi.n	8006b20 <_printf_common+0xb0>
 8006ac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006acc:	4649      	mov	r1, r9
 8006ace:	4638      	mov	r0, r7
 8006ad0:	47c0      	blx	r8
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	d01e      	beq.n	8006b14 <_printf_common+0xa4>
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	68e5      	ldr	r5, [r4, #12]
 8006ada:	6832      	ldr	r2, [r6, #0]
 8006adc:	f003 0306 	and.w	r3, r3, #6
 8006ae0:	2b04      	cmp	r3, #4
 8006ae2:	bf08      	it	eq
 8006ae4:	1aad      	subeq	r5, r5, r2
 8006ae6:	68a3      	ldr	r3, [r4, #8]
 8006ae8:	6922      	ldr	r2, [r4, #16]
 8006aea:	bf0c      	ite	eq
 8006aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006af0:	2500      	movne	r5, #0
 8006af2:	4293      	cmp	r3, r2
 8006af4:	bfc4      	itt	gt
 8006af6:	1a9b      	subgt	r3, r3, r2
 8006af8:	18ed      	addgt	r5, r5, r3
 8006afa:	2600      	movs	r6, #0
 8006afc:	341a      	adds	r4, #26
 8006afe:	42b5      	cmp	r5, r6
 8006b00:	d11a      	bne.n	8006b38 <_printf_common+0xc8>
 8006b02:	2000      	movs	r0, #0
 8006b04:	e008      	b.n	8006b18 <_printf_common+0xa8>
 8006b06:	2301      	movs	r3, #1
 8006b08:	4652      	mov	r2, sl
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	47c0      	blx	r8
 8006b10:	3001      	adds	r0, #1
 8006b12:	d103      	bne.n	8006b1c <_printf_common+0xac>
 8006b14:	f04f 30ff 	mov.w	r0, #4294967295
 8006b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b1c:	3501      	adds	r5, #1
 8006b1e:	e7c6      	b.n	8006aae <_printf_common+0x3e>
 8006b20:	18e1      	adds	r1, r4, r3
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	2030      	movs	r0, #48	; 0x30
 8006b26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b2a:	4422      	add	r2, r4
 8006b2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b34:	3302      	adds	r3, #2
 8006b36:	e7c7      	b.n	8006ac8 <_printf_common+0x58>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	4622      	mov	r2, r4
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	4638      	mov	r0, r7
 8006b40:	47c0      	blx	r8
 8006b42:	3001      	adds	r0, #1
 8006b44:	d0e6      	beq.n	8006b14 <_printf_common+0xa4>
 8006b46:	3601      	adds	r6, #1
 8006b48:	e7d9      	b.n	8006afe <_printf_common+0x8e>
	...

08006b4c <_printf_i>:
 8006b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b50:	460c      	mov	r4, r1
 8006b52:	4691      	mov	r9, r2
 8006b54:	7e27      	ldrb	r7, [r4, #24]
 8006b56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b58:	2f78      	cmp	r7, #120	; 0x78
 8006b5a:	4680      	mov	r8, r0
 8006b5c:	469a      	mov	sl, r3
 8006b5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b62:	d807      	bhi.n	8006b74 <_printf_i+0x28>
 8006b64:	2f62      	cmp	r7, #98	; 0x62
 8006b66:	d80a      	bhi.n	8006b7e <_printf_i+0x32>
 8006b68:	2f00      	cmp	r7, #0
 8006b6a:	f000 80d8 	beq.w	8006d1e <_printf_i+0x1d2>
 8006b6e:	2f58      	cmp	r7, #88	; 0x58
 8006b70:	f000 80a3 	beq.w	8006cba <_printf_i+0x16e>
 8006b74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b7c:	e03a      	b.n	8006bf4 <_printf_i+0xa8>
 8006b7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b82:	2b15      	cmp	r3, #21
 8006b84:	d8f6      	bhi.n	8006b74 <_printf_i+0x28>
 8006b86:	a001      	add	r0, pc, #4	; (adr r0, 8006b8c <_printf_i+0x40>)
 8006b88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b8c:	08006be5 	.word	0x08006be5
 8006b90:	08006bf9 	.word	0x08006bf9
 8006b94:	08006b75 	.word	0x08006b75
 8006b98:	08006b75 	.word	0x08006b75
 8006b9c:	08006b75 	.word	0x08006b75
 8006ba0:	08006b75 	.word	0x08006b75
 8006ba4:	08006bf9 	.word	0x08006bf9
 8006ba8:	08006b75 	.word	0x08006b75
 8006bac:	08006b75 	.word	0x08006b75
 8006bb0:	08006b75 	.word	0x08006b75
 8006bb4:	08006b75 	.word	0x08006b75
 8006bb8:	08006d05 	.word	0x08006d05
 8006bbc:	08006c29 	.word	0x08006c29
 8006bc0:	08006ce7 	.word	0x08006ce7
 8006bc4:	08006b75 	.word	0x08006b75
 8006bc8:	08006b75 	.word	0x08006b75
 8006bcc:	08006d27 	.word	0x08006d27
 8006bd0:	08006b75 	.word	0x08006b75
 8006bd4:	08006c29 	.word	0x08006c29
 8006bd8:	08006b75 	.word	0x08006b75
 8006bdc:	08006b75 	.word	0x08006b75
 8006be0:	08006cef 	.word	0x08006cef
 8006be4:	680b      	ldr	r3, [r1, #0]
 8006be6:	1d1a      	adds	r2, r3, #4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	600a      	str	r2, [r1, #0]
 8006bec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e0a3      	b.n	8006d40 <_printf_i+0x1f4>
 8006bf8:	6825      	ldr	r5, [r4, #0]
 8006bfa:	6808      	ldr	r0, [r1, #0]
 8006bfc:	062e      	lsls	r6, r5, #24
 8006bfe:	f100 0304 	add.w	r3, r0, #4
 8006c02:	d50a      	bpl.n	8006c1a <_printf_i+0xce>
 8006c04:	6805      	ldr	r5, [r0, #0]
 8006c06:	600b      	str	r3, [r1, #0]
 8006c08:	2d00      	cmp	r5, #0
 8006c0a:	da03      	bge.n	8006c14 <_printf_i+0xc8>
 8006c0c:	232d      	movs	r3, #45	; 0x2d
 8006c0e:	426d      	negs	r5, r5
 8006c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c14:	485e      	ldr	r0, [pc, #376]	; (8006d90 <_printf_i+0x244>)
 8006c16:	230a      	movs	r3, #10
 8006c18:	e019      	b.n	8006c4e <_printf_i+0x102>
 8006c1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006c1e:	6805      	ldr	r5, [r0, #0]
 8006c20:	600b      	str	r3, [r1, #0]
 8006c22:	bf18      	it	ne
 8006c24:	b22d      	sxthne	r5, r5
 8006c26:	e7ef      	b.n	8006c08 <_printf_i+0xbc>
 8006c28:	680b      	ldr	r3, [r1, #0]
 8006c2a:	6825      	ldr	r5, [r4, #0]
 8006c2c:	1d18      	adds	r0, r3, #4
 8006c2e:	6008      	str	r0, [r1, #0]
 8006c30:	0628      	lsls	r0, r5, #24
 8006c32:	d501      	bpl.n	8006c38 <_printf_i+0xec>
 8006c34:	681d      	ldr	r5, [r3, #0]
 8006c36:	e002      	b.n	8006c3e <_printf_i+0xf2>
 8006c38:	0669      	lsls	r1, r5, #25
 8006c3a:	d5fb      	bpl.n	8006c34 <_printf_i+0xe8>
 8006c3c:	881d      	ldrh	r5, [r3, #0]
 8006c3e:	4854      	ldr	r0, [pc, #336]	; (8006d90 <_printf_i+0x244>)
 8006c40:	2f6f      	cmp	r7, #111	; 0x6f
 8006c42:	bf0c      	ite	eq
 8006c44:	2308      	moveq	r3, #8
 8006c46:	230a      	movne	r3, #10
 8006c48:	2100      	movs	r1, #0
 8006c4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c4e:	6866      	ldr	r6, [r4, #4]
 8006c50:	60a6      	str	r6, [r4, #8]
 8006c52:	2e00      	cmp	r6, #0
 8006c54:	bfa2      	ittt	ge
 8006c56:	6821      	ldrge	r1, [r4, #0]
 8006c58:	f021 0104 	bicge.w	r1, r1, #4
 8006c5c:	6021      	strge	r1, [r4, #0]
 8006c5e:	b90d      	cbnz	r5, 8006c64 <_printf_i+0x118>
 8006c60:	2e00      	cmp	r6, #0
 8006c62:	d04d      	beq.n	8006d00 <_printf_i+0x1b4>
 8006c64:	4616      	mov	r6, r2
 8006c66:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c6a:	fb03 5711 	mls	r7, r3, r1, r5
 8006c6e:	5dc7      	ldrb	r7, [r0, r7]
 8006c70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c74:	462f      	mov	r7, r5
 8006c76:	42bb      	cmp	r3, r7
 8006c78:	460d      	mov	r5, r1
 8006c7a:	d9f4      	bls.n	8006c66 <_printf_i+0x11a>
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d10b      	bne.n	8006c98 <_printf_i+0x14c>
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	07df      	lsls	r7, r3, #31
 8006c84:	d508      	bpl.n	8006c98 <_printf_i+0x14c>
 8006c86:	6923      	ldr	r3, [r4, #16]
 8006c88:	6861      	ldr	r1, [r4, #4]
 8006c8a:	4299      	cmp	r1, r3
 8006c8c:	bfde      	ittt	le
 8006c8e:	2330      	movle	r3, #48	; 0x30
 8006c90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c98:	1b92      	subs	r2, r2, r6
 8006c9a:	6122      	str	r2, [r4, #16]
 8006c9c:	f8cd a000 	str.w	sl, [sp]
 8006ca0:	464b      	mov	r3, r9
 8006ca2:	aa03      	add	r2, sp, #12
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	4640      	mov	r0, r8
 8006ca8:	f7ff fee2 	bl	8006a70 <_printf_common>
 8006cac:	3001      	adds	r0, #1
 8006cae:	d14c      	bne.n	8006d4a <_printf_i+0x1fe>
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb4:	b004      	add	sp, #16
 8006cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cba:	4835      	ldr	r0, [pc, #212]	; (8006d90 <_printf_i+0x244>)
 8006cbc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	680e      	ldr	r6, [r1, #0]
 8006cc4:	061f      	lsls	r7, r3, #24
 8006cc6:	f856 5b04 	ldr.w	r5, [r6], #4
 8006cca:	600e      	str	r6, [r1, #0]
 8006ccc:	d514      	bpl.n	8006cf8 <_printf_i+0x1ac>
 8006cce:	07d9      	lsls	r1, r3, #31
 8006cd0:	bf44      	itt	mi
 8006cd2:	f043 0320 	orrmi.w	r3, r3, #32
 8006cd6:	6023      	strmi	r3, [r4, #0]
 8006cd8:	b91d      	cbnz	r5, 8006ce2 <_printf_i+0x196>
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	f023 0320 	bic.w	r3, r3, #32
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	2310      	movs	r3, #16
 8006ce4:	e7b0      	b.n	8006c48 <_printf_i+0xfc>
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	f043 0320 	orr.w	r3, r3, #32
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	2378      	movs	r3, #120	; 0x78
 8006cf0:	4828      	ldr	r0, [pc, #160]	; (8006d94 <_printf_i+0x248>)
 8006cf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cf6:	e7e3      	b.n	8006cc0 <_printf_i+0x174>
 8006cf8:	065e      	lsls	r6, r3, #25
 8006cfa:	bf48      	it	mi
 8006cfc:	b2ad      	uxthmi	r5, r5
 8006cfe:	e7e6      	b.n	8006cce <_printf_i+0x182>
 8006d00:	4616      	mov	r6, r2
 8006d02:	e7bb      	b.n	8006c7c <_printf_i+0x130>
 8006d04:	680b      	ldr	r3, [r1, #0]
 8006d06:	6826      	ldr	r6, [r4, #0]
 8006d08:	6960      	ldr	r0, [r4, #20]
 8006d0a:	1d1d      	adds	r5, r3, #4
 8006d0c:	600d      	str	r5, [r1, #0]
 8006d0e:	0635      	lsls	r5, r6, #24
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	d501      	bpl.n	8006d18 <_printf_i+0x1cc>
 8006d14:	6018      	str	r0, [r3, #0]
 8006d16:	e002      	b.n	8006d1e <_printf_i+0x1d2>
 8006d18:	0671      	lsls	r1, r6, #25
 8006d1a:	d5fb      	bpl.n	8006d14 <_printf_i+0x1c8>
 8006d1c:	8018      	strh	r0, [r3, #0]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	6123      	str	r3, [r4, #16]
 8006d22:	4616      	mov	r6, r2
 8006d24:	e7ba      	b.n	8006c9c <_printf_i+0x150>
 8006d26:	680b      	ldr	r3, [r1, #0]
 8006d28:	1d1a      	adds	r2, r3, #4
 8006d2a:	600a      	str	r2, [r1, #0]
 8006d2c:	681e      	ldr	r6, [r3, #0]
 8006d2e:	6862      	ldr	r2, [r4, #4]
 8006d30:	2100      	movs	r1, #0
 8006d32:	4630      	mov	r0, r6
 8006d34:	f7f9 fa5c 	bl	80001f0 <memchr>
 8006d38:	b108      	cbz	r0, 8006d3e <_printf_i+0x1f2>
 8006d3a:	1b80      	subs	r0, r0, r6
 8006d3c:	6060      	str	r0, [r4, #4]
 8006d3e:	6863      	ldr	r3, [r4, #4]
 8006d40:	6123      	str	r3, [r4, #16]
 8006d42:	2300      	movs	r3, #0
 8006d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d48:	e7a8      	b.n	8006c9c <_printf_i+0x150>
 8006d4a:	6923      	ldr	r3, [r4, #16]
 8006d4c:	4632      	mov	r2, r6
 8006d4e:	4649      	mov	r1, r9
 8006d50:	4640      	mov	r0, r8
 8006d52:	47d0      	blx	sl
 8006d54:	3001      	adds	r0, #1
 8006d56:	d0ab      	beq.n	8006cb0 <_printf_i+0x164>
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	079b      	lsls	r3, r3, #30
 8006d5c:	d413      	bmi.n	8006d86 <_printf_i+0x23a>
 8006d5e:	68e0      	ldr	r0, [r4, #12]
 8006d60:	9b03      	ldr	r3, [sp, #12]
 8006d62:	4298      	cmp	r0, r3
 8006d64:	bfb8      	it	lt
 8006d66:	4618      	movlt	r0, r3
 8006d68:	e7a4      	b.n	8006cb4 <_printf_i+0x168>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	4632      	mov	r2, r6
 8006d6e:	4649      	mov	r1, r9
 8006d70:	4640      	mov	r0, r8
 8006d72:	47d0      	blx	sl
 8006d74:	3001      	adds	r0, #1
 8006d76:	d09b      	beq.n	8006cb0 <_printf_i+0x164>
 8006d78:	3501      	adds	r5, #1
 8006d7a:	68e3      	ldr	r3, [r4, #12]
 8006d7c:	9903      	ldr	r1, [sp, #12]
 8006d7e:	1a5b      	subs	r3, r3, r1
 8006d80:	42ab      	cmp	r3, r5
 8006d82:	dcf2      	bgt.n	8006d6a <_printf_i+0x21e>
 8006d84:	e7eb      	b.n	8006d5e <_printf_i+0x212>
 8006d86:	2500      	movs	r5, #0
 8006d88:	f104 0619 	add.w	r6, r4, #25
 8006d8c:	e7f5      	b.n	8006d7a <_printf_i+0x22e>
 8006d8e:	bf00      	nop
 8006d90:	08006fb5 	.word	0x08006fb5
 8006d94:	08006fc6 	.word	0x08006fc6

08006d98 <memmove>:
 8006d98:	4288      	cmp	r0, r1
 8006d9a:	b510      	push	{r4, lr}
 8006d9c:	eb01 0402 	add.w	r4, r1, r2
 8006da0:	d902      	bls.n	8006da8 <memmove+0x10>
 8006da2:	4284      	cmp	r4, r0
 8006da4:	4623      	mov	r3, r4
 8006da6:	d807      	bhi.n	8006db8 <memmove+0x20>
 8006da8:	1e43      	subs	r3, r0, #1
 8006daa:	42a1      	cmp	r1, r4
 8006dac:	d008      	beq.n	8006dc0 <memmove+0x28>
 8006dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006db2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006db6:	e7f8      	b.n	8006daa <memmove+0x12>
 8006db8:	4402      	add	r2, r0
 8006dba:	4601      	mov	r1, r0
 8006dbc:	428a      	cmp	r2, r1
 8006dbe:	d100      	bne.n	8006dc2 <memmove+0x2a>
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dca:	e7f7      	b.n	8006dbc <memmove+0x24>

08006dcc <_realloc_r>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	4607      	mov	r7, r0
 8006dd0:	4614      	mov	r4, r2
 8006dd2:	460e      	mov	r6, r1
 8006dd4:	b921      	cbnz	r1, 8006de0 <_realloc_r+0x14>
 8006dd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006dda:	4611      	mov	r1, r2
 8006ddc:	f7ff bb88 	b.w	80064f0 <_malloc_r>
 8006de0:	b922      	cbnz	r2, 8006dec <_realloc_r+0x20>
 8006de2:	f7ff fc99 	bl	8006718 <_free_r>
 8006de6:	4625      	mov	r5, r4
 8006de8:	4628      	mov	r0, r5
 8006dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dec:	f000 f814 	bl	8006e18 <_malloc_usable_size_r>
 8006df0:	42a0      	cmp	r0, r4
 8006df2:	d20f      	bcs.n	8006e14 <_realloc_r+0x48>
 8006df4:	4621      	mov	r1, r4
 8006df6:	4638      	mov	r0, r7
 8006df8:	f7ff fb7a 	bl	80064f0 <_malloc_r>
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d0f2      	beq.n	8006de8 <_realloc_r+0x1c>
 8006e02:	4631      	mov	r1, r6
 8006e04:	4622      	mov	r2, r4
 8006e06:	f7ff fb5d 	bl	80064c4 <memcpy>
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4638      	mov	r0, r7
 8006e0e:	f7ff fc83 	bl	8006718 <_free_r>
 8006e12:	e7e9      	b.n	8006de8 <_realloc_r+0x1c>
 8006e14:	4635      	mov	r5, r6
 8006e16:	e7e7      	b.n	8006de8 <_realloc_r+0x1c>

08006e18 <_malloc_usable_size_r>:
 8006e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e1c:	1f18      	subs	r0, r3, #4
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	bfbc      	itt	lt
 8006e22:	580b      	ldrlt	r3, [r1, r0]
 8006e24:	18c0      	addlt	r0, r0, r3
 8006e26:	4770      	bx	lr

08006e28 <_init>:
 8006e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2a:	bf00      	nop
 8006e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2e:	bc08      	pop	{r3}
 8006e30:	469e      	mov	lr, r3
 8006e32:	4770      	bx	lr

08006e34 <_fini>:
 8006e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e36:	bf00      	nop
 8006e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e3a:	bc08      	pop	{r3}
 8006e3c:	469e      	mov	lr, r3
 8006e3e:	4770      	bx	lr
