
SatelliteF429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000461c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080047cc  080047cc  000147cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b8  080048b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048c0  080048c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c0  080048c0  000148c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048c4  080048c4  000148c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080048c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000044e0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004554  20004554  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b2de  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000371e  00000000  00000000  0003b382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  0003eaa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001250  00000000  00000000  0003fe48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026198  00000000  00000000  00041098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000170d7  00000000  00000000  00067230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3ec8  00000000  00000000  0007e307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001621cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054d4  00000000  00000000  00162224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080047b4 	.word	0x080047b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080047b4 	.word	0x080047b4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <UserTaskInit>:
 * @param[output]     none
 * @return            none
 * @note              none
 *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */
void UserTaskInit(void const *argument) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	/*
	 * Initialise Device Here
	 */
	UserTaskLoop();
 80004f0:	f000 f804 	bl	80004fc <UserTaskLoop>

}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <UserTaskLoop>:
 * @param[output]     none
 * @return            none
 * @note              none
 *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */
void UserTaskLoop(void const *argument) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	/* blink the Amber LED for 50ms to indicate the OBC is running */
	for (;;) {
		if (HAL_GetTick() - u32_SevenHundredMillisecondLoop > SEVENHUNDREDMILLISECONDS) {
 8000504:	f000 fc8e 	bl	8000e24 <HAL_GetTick>
 8000508:	4602      	mov	r2, r0
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <UserTaskLoop+0x80>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	1ad3      	subs	r3, r2, r3
 8000510:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000514:	d908      	bls.n	8000528 <UserTaskLoop+0x2c>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000516:	2180      	movs	r1, #128	; 0x80
 8000518:	4819      	ldr	r0, [pc, #100]	; (8000580 <UserTaskLoop+0x84>)
 800051a:	f000 ff5a 	bl	80013d2 <HAL_GPIO_TogglePin>
			u32_SevenHundredMillisecondLoop = HAL_GetTick();
 800051e:	f000 fc81 	bl	8000e24 <HAL_GetTick>
 8000522:	4603      	mov	r3, r0
 8000524:	4a15      	ldr	r2, [pc, #84]	; (800057c <UserTaskLoop+0x80>)
 8000526:	6013      	str	r3, [r2, #0]
		}

		if (HAL_GetTick() - u32_HundredMilliSecondLoop_ms > HUNDREDMILLISECONDS) {
 8000528:	f000 fc7c 	bl	8000e24 <HAL_GetTick>
 800052c:	4602      	mov	r2, r0
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <UserTaskLoop+0x88>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	2b64      	cmp	r3, #100	; 0x64
 8000536:	d908      	bls.n	800054a <UserTaskLoop+0x4e>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000538:	2101      	movs	r1, #1
 800053a:	4811      	ldr	r0, [pc, #68]	; (8000580 <UserTaskLoop+0x84>)
 800053c:	f000 ff49 	bl	80013d2 <HAL_GPIO_TogglePin>
			u32_HundredMilliSecondLoop_ms = HAL_GetTick();
 8000540:	f000 fc70 	bl	8000e24 <HAL_GetTick>
 8000544:	4603      	mov	r3, r0
 8000546:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <UserTaskLoop+0x88>)
 8000548:	6013      	str	r3, [r2, #0]
		}

		if(HAL_GetTick() - u32_SecondLoop_ms > ONESECOND){
 800054a:	f000 fc6b 	bl	8000e24 <HAL_GetTick>
 800054e:	4602      	mov	r2, r0
 8000550:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <UserTaskLoop+0x8c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800055a:	d90a      	bls.n	8000572 <UserTaskLoop+0x76>
			HAL_UART_Transmit(&huart3, (uint8_t*)"Hello from UserTaskLoop\r\n", 25, 20);
 800055c:	2314      	movs	r3, #20
 800055e:	2219      	movs	r2, #25
 8000560:	490a      	ldr	r1, [pc, #40]	; (800058c <UserTaskLoop+0x90>)
 8000562:	480b      	ldr	r0, [pc, #44]	; (8000590 <UserTaskLoop+0x94>)
 8000564:	f002 f80d 	bl	8002582 <HAL_UART_Transmit>
			u32_SecondLoop_ms = HAL_GetTick();
 8000568:	f000 fc5c 	bl	8000e24 <HAL_GetTick>
 800056c:	4603      	mov	r3, r0
 800056e:	4a06      	ldr	r2, [pc, #24]	; (8000588 <UserTaskLoop+0x8c>)
 8000570:	6013      	str	r3, [r2, #0]
		}

		osDelay(5);
 8000572:	2005      	movs	r0, #5
 8000574:	f002 fe19 	bl	80031aa <osDelay>
		if (HAL_GetTick() - u32_SevenHundredMillisecondLoop > SEVENHUNDREDMILLISECONDS) {
 8000578:	e7c4      	b.n	8000504 <UserTaskLoop+0x8>
 800057a:	bf00      	nop
 800057c:	20000090 	.word	0x20000090
 8000580:	40020400 	.word	0x40020400
 8000584:	20000094 	.word	0x20000094
 8000588:	20000098 	.word	0x20000098
 800058c:	080047cc 	.word	0x080047cc
 8000590:	200040f8 	.word	0x200040f8

08000594 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <vApplicationGetIdleTaskMemory+0x30>)
 80005aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	2000009c 	.word	0x2000009c
 80005c4:	20000150 	.word	0x20000150

080005c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b08e      	sub	sp, #56	; 0x38
 80005cc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <MX_FREERTOS_Init+0x58>)
 80005d0:	f107 041c 	add.w	r4, r7, #28
 80005d4:	461d      	mov	r5, r3
 80005d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f002 fd92 	bl	8003112 <osThreadCreate>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a0c      	ldr	r2, [pc, #48]	; (8000624 <MX_FREERTOS_Init+0x5c>)
 80005f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(myUserTask, UserTaskInit, osPriorityNormal, 0, 6*128);
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_FREERTOS_Init+0x60>)
 80005f6:	463c      	mov	r4, r7
 80005f8:	461d      	mov	r5, r3
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000602:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  userTaskHandle = osThreadCreate(osThread(myUserTask), NULL);
 8000606:	463b      	mov	r3, r7
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fd81 	bl	8003112 <osThreadCreate>
 8000610:	4603      	mov	r3, r0
 8000612:	4a06      	ldr	r2, [pc, #24]	; (800062c <MX_FREERTOS_Init+0x64>)
 8000614:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

}
 8000616:	bf00      	nop
 8000618:	3738      	adds	r7, #56	; 0x38
 800061a:	46bd      	mov	sp, r7
 800061c:	bdb0      	pop	{r4, r5, r7, pc}
 800061e:	bf00      	nop
 8000620:	08004800 	.word	0x08004800
 8000624:	200040a8 	.word	0x200040a8
 8000628:	0800481c 	.word	0x0800481c
 800062c:	200040ac 	.word	0x200040ac

08000630 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000638:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <StartDefaultTask+0x1c>)
 800063e:	f000 fec8 	bl	80013d2 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000646:	f002 fdb0 	bl	80031aa <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800064a:	e7f5      	b.n	8000638 <StartDefaultTask+0x8>
 800064c:	40020400 	.word	0x40020400

08000650 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	; 0x30
 8000654:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	61bb      	str	r3, [r7, #24]
 800066a:	4b6d      	ldr	r3, [pc, #436]	; (8000820 <MX_GPIO_Init+0x1d0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a6c      	ldr	r2, [pc, #432]	; (8000820 <MX_GPIO_Init+0x1d0>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b6a      	ldr	r3, [pc, #424]	; (8000820 <MX_GPIO_Init+0x1d0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0304 	and.w	r3, r3, #4
 800067e:	61bb      	str	r3, [r7, #24]
 8000680:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
 8000686:	4b66      	ldr	r3, [pc, #408]	; (8000820 <MX_GPIO_Init+0x1d0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a65      	ldr	r2, [pc, #404]	; (8000820 <MX_GPIO_Init+0x1d0>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b63      	ldr	r3, [pc, #396]	; (8000820 <MX_GPIO_Init+0x1d0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	4b5f      	ldr	r3, [pc, #380]	; (8000820 <MX_GPIO_Init+0x1d0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a5e      	ldr	r2, [pc, #376]	; (8000820 <MX_GPIO_Init+0x1d0>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b5c      	ldr	r3, [pc, #368]	; (8000820 <MX_GPIO_Init+0x1d0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	4b58      	ldr	r3, [pc, #352]	; (8000820 <MX_GPIO_Init+0x1d0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a57      	ldr	r2, [pc, #348]	; (8000820 <MX_GPIO_Init+0x1d0>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b55      	ldr	r3, [pc, #340]	; (8000820 <MX_GPIO_Init+0x1d0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b51      	ldr	r3, [pc, #324]	; (8000820 <MX_GPIO_Init+0x1d0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a50      	ldr	r2, [pc, #320]	; (8000820 <MX_GPIO_Init+0x1d0>)
 80006e0:	f043 0308 	orr.w	r3, r3, #8
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b4e      	ldr	r3, [pc, #312]	; (8000820 <MX_GPIO_Init+0x1d0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b4a      	ldr	r3, [pc, #296]	; (8000820 <MX_GPIO_Init+0x1d0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a49      	ldr	r2, [pc, #292]	; (8000820 <MX_GPIO_Init+0x1d0>)
 80006fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b47      	ldr	r3, [pc, #284]	; (8000820 <MX_GPIO_Init+0x1d0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f244 0181 	movw	r1, #16513	; 0x4081
 8000714:	4843      	ldr	r0, [pc, #268]	; (8000824 <MX_GPIO_Init+0x1d4>)
 8000716:	f000 fe43 	bl	80013a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2140      	movs	r1, #64	; 0x40
 800071e:	4842      	ldr	r0, [pc, #264]	; (8000828 <MX_GPIO_Init+0x1d8>)
 8000720:	f000 fe3e 	bl	80013a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800072a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	483c      	ldr	r0, [pc, #240]	; (800082c <MX_GPIO_Init+0x1dc>)
 800073c:	f000 fc84 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000740:	2332      	movs	r3, #50	; 0x32
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000750:	230b      	movs	r3, #11
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4619      	mov	r1, r3
 800075a:	4834      	ldr	r0, [pc, #208]	; (800082c <MX_GPIO_Init+0x1dc>)
 800075c:	f000 fc74 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000760:	2386      	movs	r3, #134	; 0x86
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000770:	230b      	movs	r3, #11
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	482d      	ldr	r0, [pc, #180]	; (8000830 <MX_GPIO_Init+0x1e0>)
 800077c:	f000 fc64 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000780:	f244 0381 	movw	r3, #16513	; 0x4081
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4822      	ldr	r0, [pc, #136]	; (8000824 <MX_GPIO_Init+0x1d4>)
 800079a:	f000 fc55 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800079e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ac:	2303      	movs	r3, #3
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b0:	230b      	movs	r3, #11
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	481a      	ldr	r0, [pc, #104]	; (8000824 <MX_GPIO_Init+0x1d4>)
 80007bc:	f000 fc44 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007c0:	2340      	movs	r3, #64	; 0x40
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	4814      	ldr	r0, [pc, #80]	; (8000828 <MX_GPIO_Init+0x1d8>)
 80007d8:	f000 fc36 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <MX_GPIO_Init+0x1d8>)
 80007f0:	f000 fc2a 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000806:	230b      	movs	r3, #11
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_GPIO_Init+0x1d8>)
 8000812:	f000 fc19 	bl	8001048 <HAL_GPIO_Init>

}
 8000816:	bf00      	nop
 8000818:	3730      	adds	r7, #48	; 0x30
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40020400 	.word	0x40020400
 8000828:	40021800 	.word	0x40021800
 800082c:	40020800 	.word	0x40020800
 8000830:	40020000 	.word	0x40020000

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f000 fabe 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f80c 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f7ff ff06 	bl	8000650 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000844:	f000 f994 	bl	8000b70 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000848:	f000 fa04 	bl	8000c54 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800084c:	f7ff febc 	bl	80005c8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000850:	f002 fc58 	bl	8003104 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000854:	e7fe      	b.n	8000854 <main+0x20>
	...

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	; 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f003 fed6 	bl	8004618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <SystemClock_Config+0xcc>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a27      	ldr	r2, [pc, #156]	; (8000924 <SystemClock_Config+0xcc>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <SystemClock_Config+0xcc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <SystemClock_Config+0xd0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a21      	ldr	r2, [pc, #132]	; (8000928 <SystemClock_Config+0xd0>)
 80008a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <SystemClock_Config+0xd0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008cc:	23a8      	movs	r3, #168	; 0xa8
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008d4:	2307      	movs	r3, #7
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 feaf 	bl	8001640 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e8:	f000 f832 	bl	8000950 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	230f      	movs	r3, #15
 80008ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	2302      	movs	r3, #2
 80008f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2105      	movs	r1, #5
 800090a:	4618      	mov	r0, r3
 800090c:	f001 f910 	bl	8001b30 <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000916:	f000 f81b 	bl	8000950 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3750      	adds	r7, #80	; 0x50
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d101      	bne.n	8000942 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093e:	f000 fa5d 	bl	8000dfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40002000 	.word	0x40002000

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2101      	movs	r1, #1
 800095c:	4812      	ldr	r0, [pc, #72]	; (80009a8 <Error_Handler+0x58>)
 800095e:	f000 fd1f 	bl	80013a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	4810      	ldr	r0, [pc, #64]	; (80009a8 <Error_Handler+0x58>)
 8000968:	f000 fd1a 	bl	80013a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000972:	480d      	ldr	r0, [pc, #52]	; (80009a8 <Error_Handler+0x58>)
 8000974:	f000 fd14 	bl	80013a0 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8000978:	2096      	movs	r0, #150	; 0x96
 800097a:	f000 fa5f 	bl	8000e3c <HAL_Delay>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2101      	movs	r1, #1
 8000982:	4809      	ldr	r0, [pc, #36]	; (80009a8 <Error_Handler+0x58>)
 8000984:	f000 fd0c 	bl	80013a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2180      	movs	r1, #128	; 0x80
 800098c:	4806      	ldr	r0, [pc, #24]	; (80009a8 <Error_Handler+0x58>)
 800098e:	f000 fd07 	bl	80013a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <Error_Handler+0x58>)
 800099a:	f000 fd01 	bl	80013a0 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 800099e:	2096      	movs	r0, #150	; 0x96
 80009a0:	f000 fa4c 	bl	8000e3c <HAL_Delay>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80009a4:	e7d8      	b.n	8000958 <Error_Handler+0x8>
 80009a6:	bf00      	nop
 80009a8:	40020400 	.word	0x40020400

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_MspInit+0x54>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a11      	ldr	r2, [pc, #68]	; (8000a00 <HAL_MspInit+0x54>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <HAL_MspInit+0x54>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <HAL_MspInit+0x54>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <HAL_MspInit+0x54>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_MspInit+0x54>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	210f      	movs	r1, #15
 80009ee:	f06f 0001 	mvn.w	r0, #1
 80009f2:	f000 faff 	bl	8000ff4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	; 0x30
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	202d      	movs	r0, #45	; 0x2d
 8000a1a:	f000 faeb 	bl	8000ff4 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a1e:	202d      	movs	r0, #45	; 0x2d
 8000a20:	f000 fb04 	bl	800102c <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <HAL_InitTick+0xa4>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a1e      	ldr	r2, [pc, #120]	; (8000aa8 <HAL_InitTick+0xa4>)
 8000a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <HAL_InitTick+0xa4>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a40:	f107 0210 	add.w	r2, r7, #16
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 fa6c 	bl	8001f28 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a50:	f001 fa42 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8000a54:	4603      	mov	r3, r0
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a5c:	4a13      	ldr	r2, [pc, #76]	; (8000aac <HAL_InitTick+0xa8>)
 8000a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a62:	0c9b      	lsrs	r3, r3, #18
 8000a64:	3b01      	subs	r3, #1
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <HAL_InitTick+0xb0>)
 8000a6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a74:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000a88:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a8a:	f001 fa7f 	bl	8001f8c <HAL_TIM_Base_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d104      	bne.n	8000a9e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000a94:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a96:	f001 fad3 	bl	8002040 <HAL_TIM_Base_Start_IT>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3730      	adds	r7, #48	; 0x30
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	431bde83 	.word	0x431bde83
 8000ab0:	200040b0 	.word	0x200040b0
 8000ab4:	40002000 	.word	0x40002000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>
	...

08000ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	4812      	ldr	r0, [pc, #72]	; (8000b14 <HardFault_Handler+0x54>)
 8000aca:	f000 fc69 	bl	80013a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	4810      	ldr	r0, [pc, #64]	; (8000b14 <HardFault_Handler+0x54>)
 8000ad4:	f000 fc64 	bl	80013a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ade:	480d      	ldr	r0, [pc, #52]	; (8000b14 <HardFault_Handler+0x54>)
 8000ae0:	f000 fc5e 	bl	80013a0 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8000ae4:	2096      	movs	r0, #150	; 0x96
 8000ae6:	f000 f9a9 	bl	8000e3c <HAL_Delay>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2101      	movs	r1, #1
 8000aee:	4809      	ldr	r0, [pc, #36]	; (8000b14 <HardFault_Handler+0x54>)
 8000af0:	f000 fc56 	bl	80013a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2180      	movs	r1, #128	; 0x80
 8000af8:	4806      	ldr	r0, [pc, #24]	; (8000b14 <HardFault_Handler+0x54>)
 8000afa:	f000 fc51 	bl	80013a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <HardFault_Handler+0x54>)
 8000b06:	f000 fc4b 	bl	80013a0 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8000b0a:	2096      	movs	r0, #150	; 0x96
 8000b0c:	f000 f996 	bl	8000e3c <HAL_Delay>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000b10:	e7d8      	b.n	8000ac4 <HardFault_Handler+0x4>
 8000b12:	bf00      	nop
 8000b14:	40020400 	.word	0x40020400

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <MemManage_Handler+0x4>

08000b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b3e:	f001 faef 	bl	8002120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200040b0 	.word	0x200040b0

08000b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <SystemInit+0x20>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <SystemInit+0x20>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_USART3_UART_Init+0x4c>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <MX_USART3_UART_Init+0x50>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <MX_USART3_UART_Init+0x4c>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_USART3_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_USART3_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_USART3_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_USART3_UART_Init+0x4c>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_USART3_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_USART3_UART_Init+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_USART3_UART_Init+0x4c>)
 8000ba8:	f001 fc9e 	bl	80024e8 <HAL_UART_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bb2:	f7ff fecd 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200040f8 	.word	0x200040f8
 8000bc0:	40004800 	.word	0x40004800

08000bc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <HAL_UART_MspInit+0x84>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d12c      	bne.n	8000c40 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <HAL_UART_MspInit+0x88>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a17      	ldr	r2, [pc, #92]	; (8000c4c <HAL_UART_MspInit+0x88>)
 8000bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <HAL_UART_MspInit+0x88>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <HAL_UART_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <HAL_UART_MspInit+0x88>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_UART_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c30:	2307      	movs	r3, #7
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4805      	ldr	r0, [pc, #20]	; (8000c50 <HAL_UART_MspInit+0x8c>)
 8000c3c:	f000 fa04 	bl	8001048 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40004800 	.word	0x40004800
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020c00 	.word	0x40020c00

08000c54 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c62:	2204      	movs	r2, #4
 8000c64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c68:	2202      	movs	r2, #2
 8000c6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c74:	2202      	movs	r2, #2
 8000c76:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c98:	f000 fbb5 	bl	8001406 <HAL_PCD_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ca2:	f7ff fe55 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000413c 	.word	0x2000413c

08000cb0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cd0:	d13f      	bne.n	8000d52 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <HAL_PCD_MspInit+0xac>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a20      	ldr	r2, [pc, #128]	; (8000d5c <HAL_PCD_MspInit+0xac>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <HAL_PCD_MspInit+0xac>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cee:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d00:	230a      	movs	r3, #10
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4815      	ldr	r0, [pc, #84]	; (8000d60 <HAL_PCD_MspInit+0xb0>)
 8000d0c:	f000 f99c 	bl	8001048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	480e      	ldr	r0, [pc, #56]	; (8000d60 <HAL_PCD_MspInit+0xb0>)
 8000d26:	f000 f98f 	bl	8001048 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_PCD_MspInit+0xac>)
 8000d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <HAL_PCD_MspInit+0xac>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d34:	6353      	str	r3, [r2, #52]	; 0x34
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_PCD_MspInit+0xac>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_PCD_MspInit+0xac>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_PCD_MspInit+0xac>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d6a:	490e      	ldr	r1, [pc, #56]	; (8000da4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d80:	4c0b      	ldr	r4, [pc, #44]	; (8000db0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d8e:	f7ff fedd 	bl	8000b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d92:	f003 fc1b 	bl	80045cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fd4d 	bl	8000834 <main>
  bx  lr    
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d9c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000da8:	080048c8 	.word	0x080048c8
  ldr r2, =_sbss
 8000dac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000db0:	20004554 	.word	0x20004554

08000db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <HAL_Init+0x40>)
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_Init+0x40>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x40>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f8fc 	bl	8000fde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff fe0c 	bl	8000a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fdde 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	20004544 	.word	0x20004544

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20004544 	.word	0x20004544

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff ffee 	bl	8000e24 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffde 	bl	8000e24 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	db0b      	blt.n	8000f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 021f 	and.w	r2, r3, #31
 8000f00:	4907      	ldr	r1, [pc, #28]	; (8000f20 <__NVIC_EnableIRQ+0x38>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	095b      	lsrs	r3, r3, #5
 8000f08:	2001      	movs	r0, #1
 8000f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	db0a      	blt.n	8000f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	490c      	ldr	r1, [pc, #48]	; (8000f70 <__NVIC_SetPriority+0x4c>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	0112      	lsls	r2, r2, #4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	440b      	add	r3, r1
 8000f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f4c:	e00a      	b.n	8000f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <__NVIC_SetPriority+0x50>)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	3b04      	subs	r3, #4
 8000f5c:	0112      	lsls	r2, r2, #4
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	440b      	add	r3, r1
 8000f62:	761a      	strb	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f1c3 0307 	rsb	r3, r3, #7
 8000f92:	2b04      	cmp	r3, #4
 8000f94:	bf28      	it	cs
 8000f96:	2304      	movcs	r3, #4
 8000f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	2b06      	cmp	r3, #6
 8000fa0:	d902      	bls.n	8000fa8 <NVIC_EncodePriority+0x30>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3b03      	subs	r3, #3
 8000fa6:	e000      	b.n	8000faa <NVIC_EncodePriority+0x32>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	401a      	ands	r2, r3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43d9      	mvns	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	4313      	orrs	r3, r2
         );
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3724      	adds	r7, #36	; 0x24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ff4c 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001006:	f7ff ff61 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 800100a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	68b9      	ldr	r1, [r7, #8]
 8001010:	6978      	ldr	r0, [r7, #20]
 8001012:	f7ff ffb1 	bl	8000f78 <NVIC_EncodePriority>
 8001016:	4602      	mov	r2, r0
 8001018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101c:	4611      	mov	r1, r2
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff80 	bl	8000f24 <__NVIC_SetPriority>
}
 8001024:	bf00      	nop
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff54 	bl	8000ee8 <__NVIC_EnableIRQ>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e177      	b.n	8001354 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 8166 	bne.w	800134e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d005      	beq.n	800109a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001096:	2b02      	cmp	r3, #2
 8001098:	d130      	bne.n	80010fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	f003 0201 	and.w	r2, r3, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b03      	cmp	r3, #3
 8001106:	d017      	beq.n	8001138 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80c0 	beq.w	800134e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b66      	ldr	r3, [pc, #408]	; (800136c <HAL_GPIO_Init+0x324>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a65      	ldr	r2, [pc, #404]	; (800136c <HAL_GPIO_Init+0x324>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b63      	ldr	r3, [pc, #396]	; (800136c <HAL_GPIO_Init+0x324>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ea:	4a61      	ldr	r2, [pc, #388]	; (8001370 <HAL_GPIO_Init+0x328>)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a58      	ldr	r2, [pc, #352]	; (8001374 <HAL_GPIO_Init+0x32c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d037      	beq.n	8001286 <HAL_GPIO_Init+0x23e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a57      	ldr	r2, [pc, #348]	; (8001378 <HAL_GPIO_Init+0x330>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d031      	beq.n	8001282 <HAL_GPIO_Init+0x23a>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a56      	ldr	r2, [pc, #344]	; (800137c <HAL_GPIO_Init+0x334>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d02b      	beq.n	800127e <HAL_GPIO_Init+0x236>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a55      	ldr	r2, [pc, #340]	; (8001380 <HAL_GPIO_Init+0x338>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d025      	beq.n	800127a <HAL_GPIO_Init+0x232>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a54      	ldr	r2, [pc, #336]	; (8001384 <HAL_GPIO_Init+0x33c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d01f      	beq.n	8001276 <HAL_GPIO_Init+0x22e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a53      	ldr	r2, [pc, #332]	; (8001388 <HAL_GPIO_Init+0x340>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d019      	beq.n	8001272 <HAL_GPIO_Init+0x22a>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a52      	ldr	r2, [pc, #328]	; (800138c <HAL_GPIO_Init+0x344>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d013      	beq.n	800126e <HAL_GPIO_Init+0x226>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a51      	ldr	r2, [pc, #324]	; (8001390 <HAL_GPIO_Init+0x348>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00d      	beq.n	800126a <HAL_GPIO_Init+0x222>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a50      	ldr	r2, [pc, #320]	; (8001394 <HAL_GPIO_Init+0x34c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d007      	beq.n	8001266 <HAL_GPIO_Init+0x21e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4f      	ldr	r2, [pc, #316]	; (8001398 <HAL_GPIO_Init+0x350>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d101      	bne.n	8001262 <HAL_GPIO_Init+0x21a>
 800125e:	2309      	movs	r3, #9
 8001260:	e012      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001262:	230a      	movs	r3, #10
 8001264:	e010      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001266:	2308      	movs	r3, #8
 8001268:	e00e      	b.n	8001288 <HAL_GPIO_Init+0x240>
 800126a:	2307      	movs	r3, #7
 800126c:	e00c      	b.n	8001288 <HAL_GPIO_Init+0x240>
 800126e:	2306      	movs	r3, #6
 8001270:	e00a      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001272:	2305      	movs	r3, #5
 8001274:	e008      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001276:	2304      	movs	r3, #4
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x240>
 800127a:	2303      	movs	r3, #3
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x240>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001286:	2300      	movs	r3, #0
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	f002 0203 	and.w	r2, r2, #3
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001298:	4935      	ldr	r1, [pc, #212]	; (8001370 <HAL_GPIO_Init+0x328>)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a6:	4b3d      	ldr	r3, [pc, #244]	; (800139c <HAL_GPIO_Init+0x354>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ca:	4a34      	ldr	r2, [pc, #208]	; (800139c <HAL_GPIO_Init+0x354>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012d0:	4b32      	ldr	r3, [pc, #200]	; (800139c <HAL_GPIO_Init+0x354>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012f4:	4a29      	ldr	r2, [pc, #164]	; (800139c <HAL_GPIO_Init+0x354>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <HAL_GPIO_Init+0x354>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131e:	4a1f      	ldr	r2, [pc, #124]	; (800139c <HAL_GPIO_Init+0x354>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_GPIO_Init+0x354>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001348:	4a14      	ldr	r2, [pc, #80]	; (800139c <HAL_GPIO_Init+0x354>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3301      	adds	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b0f      	cmp	r3, #15
 8001358:	f67f ae84 	bls.w	8001064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40013800 	.word	0x40013800
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	40020800 	.word	0x40020800
 8001380:	40020c00 	.word	0x40020c00
 8001384:	40021000 	.word	0x40021000
 8001388:	40021400 	.word	0x40021400
 800138c:	40021800 	.word	0x40021800
 8001390:	40021c00 	.word	0x40021c00
 8001394:	40022000 	.word	0x40022000
 8001398:	40022400 	.word	0x40022400
 800139c:	40013c00 	.word	0x40013c00

080013a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
 80013ac:	4613      	mov	r3, r2
 80013ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b0:	787b      	ldrb	r3, [r7, #1]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013bc:	e003      	b.n	80013c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013be:	887b      	ldrh	r3, [r7, #2]
 80013c0:	041a      	lsls	r2, r3, #16
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	619a      	str	r2, [r3, #24]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b085      	sub	sp, #20
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	460b      	mov	r3, r1
 80013dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e4:	887a      	ldrh	r2, [r7, #2]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4013      	ands	r3, r2
 80013ea:	041a      	lsls	r2, r3, #16
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	43d9      	mvns	r1, r3
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	400b      	ands	r3, r1
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	619a      	str	r2, [r3, #24]
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001406:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001408:	b08f      	sub	sp, #60	; 0x3c
 800140a:	af0a      	add	r7, sp, #40	; 0x28
 800140c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e10f      	b.n	8001638 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d106      	bne.n	8001438 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fc3c 	bl	8000cb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2203      	movs	r2, #3
 800143c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f001 fbbd 	bl	8002bd6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	687e      	ldr	r6, [r7, #4]
 8001464:	466d      	mov	r5, sp
 8001466:	f106 0410 	add.w	r4, r6, #16
 800146a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001472:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001476:	e885 0003 	stmia.w	r5, {r0, r1}
 800147a:	1d33      	adds	r3, r6, #4
 800147c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800147e:	6838      	ldr	r0, [r7, #0]
 8001480:	f001 fb48 	bl	8002b14 <USB_CoreInit>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2202      	movs	r2, #2
 800148e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e0d0      	b.n	8001638 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f001 fbab 	bl	8002bf8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e04a      	b.n	800153e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	1a9b      	subs	r3, r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	333d      	adds	r3, #61	; 0x3d
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	333c      	adds	r3, #60	; 0x3c
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014d0:	7bfa      	ldrb	r2, [r7, #15]
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	b298      	uxth	r0, r3
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	1a9b      	subs	r3, r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	3342      	adds	r3, #66	; 0x42
 80014e4:	4602      	mov	r2, r0
 80014e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	1a9b      	subs	r3, r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	333f      	adds	r3, #63	; 0x3f
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014fc:	7bfa      	ldrb	r2, [r7, #15]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	1a9b      	subs	r3, r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	3344      	adds	r3, #68	; 0x44
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	1a9b      	subs	r3, r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	3348      	adds	r3, #72	; 0x48
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	1a9b      	subs	r3, r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	3350      	adds	r3, #80	; 0x50
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	3301      	adds	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	d3af      	bcc.n	80014a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e044      	b.n	80015d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	1a9b      	subs	r3, r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	1a9b      	subs	r3, r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	1a9b      	subs	r3, r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	1a9b      	subs	r3, r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	1a9b      	subs	r3, r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	3301      	adds	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d3b5      	bcc.n	800154e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	687e      	ldr	r6, [r7, #4]
 80015ea:	466d      	mov	r5, sp
 80015ec:	f106 0410 	add.w	r4, r6, #16
 80015f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001600:	1d33      	adds	r3, r6, #4
 8001602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001604:	6838      	ldr	r0, [r7, #0]
 8001606:	f001 fb43 	bl	8002c90 <USB_DevInit>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2202      	movs	r2, #2
 8001614:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e00d      	b.n	8001638 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f001 fcee 	bl	8003012 <USB_DevDisconnect>

  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001640 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e264      	b.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d075      	beq.n	800174a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800165e:	4ba3      	ldr	r3, [pc, #652]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b04      	cmp	r3, #4
 8001668:	d00c      	beq.n	8001684 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800166a:	4ba0      	ldr	r3, [pc, #640]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001672:	2b08      	cmp	r3, #8
 8001674:	d112      	bne.n	800169c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001676:	4b9d      	ldr	r3, [pc, #628]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800167e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001682:	d10b      	bne.n	800169c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	4b99      	ldr	r3, [pc, #612]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d05b      	beq.n	8001748 <HAL_RCC_OscConfig+0x108>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d157      	bne.n	8001748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e23f      	b.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a4:	d106      	bne.n	80016b4 <HAL_RCC_OscConfig+0x74>
 80016a6:	4b91      	ldr	r3, [pc, #580]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a90      	ldr	r2, [pc, #576]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e01d      	b.n	80016f0 <HAL_RCC_OscConfig+0xb0>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x98>
 80016be:	4b8b      	ldr	r3, [pc, #556]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a8a      	ldr	r2, [pc, #552]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b88      	ldr	r3, [pc, #544]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a87      	ldr	r2, [pc, #540]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0xb0>
 80016d8:	4b84      	ldr	r3, [pc, #528]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a83      	ldr	r2, [pc, #524]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80016de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	4b81      	ldr	r3, [pc, #516]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a80      	ldr	r2, [pc, #512]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80016ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d013      	beq.n	8001720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fb94 	bl	8000e24 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff fb90 	bl	8000e24 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b64      	cmp	r3, #100	; 0x64
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e204      	b.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001712:	4b76      	ldr	r3, [pc, #472]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0xc0>
 800171e:	e014      	b.n	800174a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fb80 	bl	8000e24 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff fb7c 	bl	8000e24 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	; 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e1f0      	b.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173a:	4b6c      	ldr	r3, [pc, #432]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0xe8>
 8001746:	e000      	b.n	800174a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d063      	beq.n	800181e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001756:	4b65      	ldr	r3, [pc, #404]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00b      	beq.n	800177a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001762:	4b62      	ldr	r3, [pc, #392]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800176a:	2b08      	cmp	r3, #8
 800176c:	d11c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800176e:	4b5f      	ldr	r3, [pc, #380]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d116      	bne.n	80017a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	4b5c      	ldr	r3, [pc, #368]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <HAL_RCC_OscConfig+0x152>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e1c4      	b.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001792:	4b56      	ldr	r3, [pc, #344]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4952      	ldr	r1, [pc, #328]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a6:	e03a      	b.n	800181e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b0:	4b4f      	ldr	r3, [pc, #316]	; (80018f0 <HAL_RCC_OscConfig+0x2b0>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b6:	f7ff fb35 	bl	8000e24 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017be:	f7ff fb31 	bl	8000e24 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e1a5      	b.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d0:	4b46      	ldr	r3, [pc, #280]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017dc:	4b43      	ldr	r3, [pc, #268]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4940      	ldr	r1, [pc, #256]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
 80017f0:	e015      	b.n	800181e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f2:	4b3f      	ldr	r3, [pc, #252]	; (80018f0 <HAL_RCC_OscConfig+0x2b0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fb14 	bl	8000e24 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001800:	f7ff fb10 	bl	8000e24 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e184      	b.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001812:	4b36      	ldr	r3, [pc, #216]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d030      	beq.n	800188c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d016      	beq.n	8001860 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001832:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <HAL_RCC_OscConfig+0x2b4>)
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001838:	f7ff faf4 	bl	8000e24 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001840:	f7ff faf0 	bl	8000e24 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e164      	b.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001852:	4b26      	ldr	r3, [pc, #152]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 8001854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x200>
 800185e:	e015      	b.n	800188c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001860:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <HAL_RCC_OscConfig+0x2b4>)
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7ff fadd 	bl	8000e24 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800186e:	f7ff fad9 	bl	8000e24 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e14d      	b.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001880:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 8001882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f0      	bne.n	800186e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80a0 	beq.w	80019da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10f      	bne.n	80018ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c6:	2301      	movs	r3, #1
 80018c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_RCC_OscConfig+0x2b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d121      	bne.n	800191a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_RCC_OscConfig+0x2b8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <HAL_RCC_OscConfig+0x2b8>)
 80018dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e2:	f7ff fa9f 	bl	8000e24 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e8:	e011      	b.n	800190e <HAL_RCC_OscConfig+0x2ce>
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	42470000 	.word	0x42470000
 80018f4:	42470e80 	.word	0x42470e80
 80018f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fc:	f7ff fa92 	bl	8000e24 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e106      	b.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190e:	4b85      	ldr	r3, [pc, #532]	; (8001b24 <HAL_RCC_OscConfig+0x4e4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d106      	bne.n	8001930 <HAL_RCC_OscConfig+0x2f0>
 8001922:	4b81      	ldr	r3, [pc, #516]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001926:	4a80      	ldr	r2, [pc, #512]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6713      	str	r3, [r2, #112]	; 0x70
 800192e:	e01c      	b.n	800196a <HAL_RCC_OscConfig+0x32a>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b05      	cmp	r3, #5
 8001936:	d10c      	bne.n	8001952 <HAL_RCC_OscConfig+0x312>
 8001938:	4b7b      	ldr	r3, [pc, #492]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193c:	4a7a      	ldr	r2, [pc, #488]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	6713      	str	r3, [r2, #112]	; 0x70
 8001944:	4b78      	ldr	r3, [pc, #480]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001948:	4a77      	ldr	r2, [pc, #476]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6713      	str	r3, [r2, #112]	; 0x70
 8001950:	e00b      	b.n	800196a <HAL_RCC_OscConfig+0x32a>
 8001952:	4b75      	ldr	r3, [pc, #468]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	4a74      	ldr	r2, [pc, #464]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	6713      	str	r3, [r2, #112]	; 0x70
 800195e:	4b72      	ldr	r3, [pc, #456]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	4a71      	ldr	r2, [pc, #452]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 8001964:	f023 0304 	bic.w	r3, r3, #4
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d015      	beq.n	800199e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001972:	f7ff fa57 	bl	8000e24 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7ff fa53 	bl	8000e24 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f241 3288 	movw	r2, #5000	; 0x1388
 8001988:	4293      	cmp	r3, r2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e0c5      	b.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001990:	4b65      	ldr	r3, [pc, #404]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0ee      	beq.n	800197a <HAL_RCC_OscConfig+0x33a>
 800199c:	e014      	b.n	80019c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199e:	f7ff fa41 	bl	8000e24 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a4:	e00a      	b.n	80019bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff fa3d 	bl	8000e24 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e0af      	b.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019bc:	4b5a      	ldr	r3, [pc, #360]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1ee      	bne.n	80019a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d105      	bne.n	80019da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ce:	4b56      	ldr	r3, [pc, #344]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	4a55      	ldr	r2, [pc, #340]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 80019d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 809b 	beq.w	8001b1a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019e4:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d05c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d141      	bne.n	8001a7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f8:	4b4c      	ldr	r3, [pc, #304]	; (8001b2c <HAL_RCC_OscConfig+0x4ec>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff fa11 	bl	8000e24 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a06:	f7ff fa0d 	bl	8000e24 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e081      	b.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a18:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f0      	bne.n	8001a06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69da      	ldr	r2, [r3, #28]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	019b      	lsls	r3, r3, #6
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	085b      	lsrs	r3, r3, #1
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	041b      	lsls	r3, r3, #16
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	061b      	lsls	r3, r3, #24
 8001a48:	4937      	ldr	r1, [pc, #220]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a4e:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <HAL_RCC_OscConfig+0x4ec>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff f9e6 	bl	8000e24 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7ff f9e2 	bl	8000e24 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e056      	b.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x41c>
 8001a7a:	e04e      	b.n	8001b1a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <HAL_RCC_OscConfig+0x4ec>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a82:	f7ff f9cf 	bl	8000e24 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff f9cb 	bl	8000e24 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e03f      	b.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9c:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x44a>
 8001aa8:	e037      	b.n	8001b1a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e032      	b.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <HAL_RCC_OscConfig+0x4e8>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d028      	beq.n	8001b16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d121      	bne.n	8001b16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d11a      	bne.n	8001b16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001aec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d111      	bne.n	8001b16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	085b      	lsrs	r3, r3, #1
 8001afe:	3b01      	subs	r3, #1
 8001b00:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40007000 	.word	0x40007000
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	42470060 	.word	0x42470060

08001b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0cc      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b44:	4b68      	ldr	r3, [pc, #416]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d90c      	bls.n	8001b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	4b65      	ldr	r3, [pc, #404]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	4b63      	ldr	r3, [pc, #396]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0b8      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4a58      	ldr	r2, [pc, #352]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b9c:	4b53      	ldr	r3, [pc, #332]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4a52      	ldr	r2, [pc, #328]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba8:	4b50      	ldr	r3, [pc, #320]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	494d      	ldr	r1, [pc, #308]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d044      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d119      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e07f      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d003      	beq.n	8001bee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bee:	4b3f      	ldr	r3, [pc, #252]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d109      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e06f      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfe:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e067      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c0e:	4b37      	ldr	r3, [pc, #220]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f023 0203 	bic.w	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	4934      	ldr	r1, [pc, #208]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c20:	f7ff f900 	bl	8000e24 <HAL_GetTick>
 8001c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c28:	f7ff f8fc 	bl	8000e24 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e04f      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 020c 	and.w	r2, r3, #12
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d1eb      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c50:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d20c      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e032      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4916      	ldr	r1, [pc, #88]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d009      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	490e      	ldr	r1, [pc, #56]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cb6:	f000 f821 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	490a      	ldr	r1, [pc, #40]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	5ccb      	ldrb	r3, [r1, r3]
 8001cca:	fa22 f303 	lsr.w	r3, r2, r3
 8001cce:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fe94 	bl	8000a04 <HAL_InitTick>

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023c00 	.word	0x40023c00
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	08004840 	.word	0x08004840
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000004 	.word	0x20000004

08001cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cfc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d14:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d00d      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x40>
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	f200 80bd 	bhi.w	8001ea0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x34>
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d2e:	e0b7      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d30:	4b61      	ldr	r3, [pc, #388]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d32:	60bb      	str	r3, [r7, #8]
       break;
 8001d34:	e0b7      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d36:	4b61      	ldr	r3, [pc, #388]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001d38:	60bb      	str	r3, [r7, #8]
      break;
 8001d3a:	e0b4      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d3c:	4b5d      	ldr	r3, [pc, #372]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d46:	4b5b      	ldr	r3, [pc, #364]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d04d      	beq.n	8001dee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d52:	4b58      	ldr	r3, [pc, #352]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	099b      	lsrs	r3, r3, #6
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d62:	f04f 0100 	mov.w	r1, #0
 8001d66:	ea02 0800 	and.w	r8, r2, r0
 8001d6a:	ea03 0901 	and.w	r9, r3, r1
 8001d6e:	4640      	mov	r0, r8
 8001d70:	4649      	mov	r1, r9
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	014b      	lsls	r3, r1, #5
 8001d7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d80:	0142      	lsls	r2, r0, #5
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	ebb0 0008 	subs.w	r0, r0, r8
 8001d8a:	eb61 0109 	sbc.w	r1, r1, r9
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	018b      	lsls	r3, r1, #6
 8001d98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d9c:	0182      	lsls	r2, r0, #6
 8001d9e:	1a12      	subs	r2, r2, r0
 8001da0:	eb63 0301 	sbc.w	r3, r3, r1
 8001da4:	f04f 0000 	mov.w	r0, #0
 8001da8:	f04f 0100 	mov.w	r1, #0
 8001dac:	00d9      	lsls	r1, r3, #3
 8001dae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001db2:	00d0      	lsls	r0, r2, #3
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	eb12 0208 	adds.w	r2, r2, r8
 8001dbc:	eb43 0309 	adc.w	r3, r3, r9
 8001dc0:	f04f 0000 	mov.w	r0, #0
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	0259      	lsls	r1, r3, #9
 8001dca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001dce:	0250      	lsls	r0, r2, #9
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	f7fe fa06 	bl	80001f0 <__aeabi_uldivmod>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4613      	mov	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	e04a      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dee:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	099b      	lsrs	r3, r3, #6
 8001df4:	461a      	mov	r2, r3
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dfe:	f04f 0100 	mov.w	r1, #0
 8001e02:	ea02 0400 	and.w	r4, r2, r0
 8001e06:	ea03 0501 	and.w	r5, r3, r1
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	014b      	lsls	r3, r1, #5
 8001e18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e1c:	0142      	lsls	r2, r0, #5
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	1b00      	subs	r0, r0, r4
 8001e24:	eb61 0105 	sbc.w	r1, r1, r5
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	018b      	lsls	r3, r1, #6
 8001e32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e36:	0182      	lsls	r2, r0, #6
 8001e38:	1a12      	subs	r2, r2, r0
 8001e3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e3e:	f04f 0000 	mov.w	r0, #0
 8001e42:	f04f 0100 	mov.w	r1, #0
 8001e46:	00d9      	lsls	r1, r3, #3
 8001e48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e4c:	00d0      	lsls	r0, r2, #3
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	1912      	adds	r2, r2, r4
 8001e54:	eb45 0303 	adc.w	r3, r5, r3
 8001e58:	f04f 0000 	mov.w	r0, #0
 8001e5c:	f04f 0100 	mov.w	r1, #0
 8001e60:	0299      	lsls	r1, r3, #10
 8001e62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e66:	0290      	lsls	r0, r2, #10
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	461a      	mov	r2, r3
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	f7fe f9ba 	bl	80001f0 <__aeabi_uldivmod>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4613      	mov	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9c:	60bb      	str	r3, [r7, #8]
      break;
 8001e9e:	e002      	b.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ea2:	60bb      	str	r3, [r7, #8]
      break;
 8001ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	00f42400 	.word	0x00f42400
 8001ebc:	007a1200 	.word	0x007a1200

08001ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000000 	.word	0x20000000

08001ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001edc:	f7ff fff0 	bl	8001ec0 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	0a9b      	lsrs	r3, r3, #10
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	4903      	ldr	r1, [pc, #12]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	08004850 	.word	0x08004850

08001f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f04:	f7ff ffdc 	bl	8001ec0 <HAL_RCC_GetHCLKFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	0b5b      	lsrs	r3, r3, #13
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4903      	ldr	r1, [pc, #12]	; (8001f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	08004850 	.word	0x08004850

08001f28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	220f      	movs	r2, #15
 8001f36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_RCC_GetClockConfig+0x5c>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0203 	and.w	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_RCC_GetClockConfig+0x5c>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_RCC_GetClockConfig+0x5c>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_RCC_GetClockConfig+0x5c>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	08db      	lsrs	r3, r3, #3
 8001f62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_RCC_GetClockConfig+0x60>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 020f 	and.w	r2, r3, #15
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	601a      	str	r2, [r3, #0]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40023c00 	.word	0x40023c00

08001f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e041      	b.n	8002022 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f839 	bl	800202a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3304      	adds	r3, #4
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4610      	mov	r0, r2
 8001fcc:	f000 f9d8 	bl	8002380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b01      	cmp	r3, #1
 8002052:	d001      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e04e      	b.n	80020f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 0201 	orr.w	r2, r2, #1
 800206e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a23      	ldr	r2, [pc, #140]	; (8002104 <HAL_TIM_Base_Start_IT+0xc4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d022      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x80>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002082:	d01d      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x80>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a1f      	ldr	r2, [pc, #124]	; (8002108 <HAL_TIM_Base_Start_IT+0xc8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d018      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x80>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a1e      	ldr	r2, [pc, #120]	; (800210c <HAL_TIM_Base_Start_IT+0xcc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d013      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x80>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_TIM_Base_Start_IT+0xd0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00e      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x80>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <HAL_TIM_Base_Start_IT+0xd4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d009      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x80>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a19      	ldr	r2, [pc, #100]	; (8002118 <HAL_TIM_Base_Start_IT+0xd8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d004      	beq.n	80020c0 <HAL_TIM_Base_Start_IT+0x80>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a18      	ldr	r2, [pc, #96]	; (800211c <HAL_TIM_Base_Start_IT+0xdc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d111      	bne.n	80020e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d010      	beq.n	80020f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e2:	e007      	b.n	80020f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40010000 	.word	0x40010000
 8002108:	40000400 	.word	0x40000400
 800210c:	40000800 	.word	0x40000800
 8002110:	40000c00 	.word	0x40000c00
 8002114:	40010400 	.word	0x40010400
 8002118:	40014000 	.word	0x40014000
 800211c:	40001800 	.word	0x40001800

08002120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d122      	bne.n	800217c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b02      	cmp	r3, #2
 8002142:	d11b      	bne.n	800217c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0202 	mvn.w	r2, #2
 800214c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8ee 	bl	8002344 <HAL_TIM_IC_CaptureCallback>
 8002168:	e005      	b.n	8002176 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f8e0 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f8f1 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b04      	cmp	r3, #4
 8002188:	d122      	bne.n	80021d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b04      	cmp	r3, #4
 8002196:	d11b      	bne.n	80021d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0204 	mvn.w	r2, #4
 80021a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2202      	movs	r2, #2
 80021a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f8c4 	bl	8002344 <HAL_TIM_IC_CaptureCallback>
 80021bc:	e005      	b.n	80021ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f8b6 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f8c7 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d122      	bne.n	8002224 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d11b      	bne.n	8002224 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0208 	mvn.w	r2, #8
 80021f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2204      	movs	r2, #4
 80021fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f89a 	bl	8002344 <HAL_TIM_IC_CaptureCallback>
 8002210:	e005      	b.n	800221e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f88c 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f89d 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b10      	cmp	r3, #16
 8002230:	d122      	bne.n	8002278 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b10      	cmp	r3, #16
 800223e:	d11b      	bne.n	8002278 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0210 	mvn.w	r2, #16
 8002248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2208      	movs	r2, #8
 800224e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f870 	bl	8002344 <HAL_TIM_IC_CaptureCallback>
 8002264:	e005      	b.n	8002272 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f862 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f873 	bl	8002358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d10e      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	d107      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0201 	mvn.w	r2, #1
 800229c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fb44 	bl	800092c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ae:	2b80      	cmp	r3, #128	; 0x80
 80022b0:	d10e      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022bc:	2b80      	cmp	r3, #128	; 0x80
 80022be:	d107      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f902 	bl	80024d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022da:	2b40      	cmp	r3, #64	; 0x40
 80022dc:	d10e      	bne.n	80022fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e8:	2b40      	cmp	r3, #64	; 0x40
 80022ea:	d107      	bne.n	80022fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f838 	bl	800236c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b20      	cmp	r3, #32
 8002308:	d10e      	bne.n	8002328 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b20      	cmp	r3, #32
 8002316:	d107      	bne.n	8002328 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0220 	mvn.w	r2, #32
 8002320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f8cc 	bl	80024c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a40      	ldr	r2, [pc, #256]	; (8002494 <TIM_Base_SetConfig+0x114>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d013      	beq.n	80023c0 <TIM_Base_SetConfig+0x40>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239e:	d00f      	beq.n	80023c0 <TIM_Base_SetConfig+0x40>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a3d      	ldr	r2, [pc, #244]	; (8002498 <TIM_Base_SetConfig+0x118>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d00b      	beq.n	80023c0 <TIM_Base_SetConfig+0x40>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a3c      	ldr	r2, [pc, #240]	; (800249c <TIM_Base_SetConfig+0x11c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d007      	beq.n	80023c0 <TIM_Base_SetConfig+0x40>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a3b      	ldr	r2, [pc, #236]	; (80024a0 <TIM_Base_SetConfig+0x120>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d003      	beq.n	80023c0 <TIM_Base_SetConfig+0x40>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a3a      	ldr	r2, [pc, #232]	; (80024a4 <TIM_Base_SetConfig+0x124>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d108      	bne.n	80023d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a2f      	ldr	r2, [pc, #188]	; (8002494 <TIM_Base_SetConfig+0x114>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d02b      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e0:	d027      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a2c      	ldr	r2, [pc, #176]	; (8002498 <TIM_Base_SetConfig+0x118>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d023      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a2b      	ldr	r2, [pc, #172]	; (800249c <TIM_Base_SetConfig+0x11c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01f      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a2a      	ldr	r2, [pc, #168]	; (80024a0 <TIM_Base_SetConfig+0x120>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01b      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a29      	ldr	r2, [pc, #164]	; (80024a4 <TIM_Base_SetConfig+0x124>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d017      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a28      	ldr	r2, [pc, #160]	; (80024a8 <TIM_Base_SetConfig+0x128>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a27      	ldr	r2, [pc, #156]	; (80024ac <TIM_Base_SetConfig+0x12c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00f      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a26      	ldr	r2, [pc, #152]	; (80024b0 <TIM_Base_SetConfig+0x130>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00b      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a25      	ldr	r2, [pc, #148]	; (80024b4 <TIM_Base_SetConfig+0x134>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a24      	ldr	r2, [pc, #144]	; (80024b8 <TIM_Base_SetConfig+0x138>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d003      	beq.n	8002432 <TIM_Base_SetConfig+0xb2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a23      	ldr	r2, [pc, #140]	; (80024bc <TIM_Base_SetConfig+0x13c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d108      	bne.n	8002444 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <TIM_Base_SetConfig+0x114>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d003      	beq.n	8002478 <TIM_Base_SetConfig+0xf8>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <TIM_Base_SetConfig+0x124>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d103      	bne.n	8002480 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	615a      	str	r2, [r3, #20]
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40010000 	.word	0x40010000
 8002498:	40000400 	.word	0x40000400
 800249c:	40000800 	.word	0x40000800
 80024a0:	40000c00 	.word	0x40000c00
 80024a4:	40010400 	.word	0x40010400
 80024a8:	40014000 	.word	0x40014000
 80024ac:	40014400 	.word	0x40014400
 80024b0:	40014800 	.word	0x40014800
 80024b4:	40001800 	.word	0x40001800
 80024b8:	40001c00 	.word	0x40001c00
 80024bc:	40002000 	.word	0x40002000

080024c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e03f      	b.n	800257a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe fb58 	bl	8000bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	; 0x24
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800252a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f929 	bl	8002784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002540:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b08a      	sub	sp, #40	; 0x28
 8002586:	af02      	add	r7, sp, #8
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	4613      	mov	r3, r2
 8002590:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d17c      	bne.n	800269c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <HAL_UART_Transmit+0x2c>
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e075      	b.n	800269e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_UART_Transmit+0x3e>
 80025bc:	2302      	movs	r3, #2
 80025be:	e06e      	b.n	800269e <HAL_UART_Transmit+0x11c>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2221      	movs	r2, #33	; 0x21
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025d6:	f7fe fc25 	bl	8000e24 <HAL_GetTick>
 80025da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	88fa      	ldrh	r2, [r7, #6]
 80025e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	88fa      	ldrh	r2, [r7, #6]
 80025e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f0:	d108      	bne.n	8002604 <HAL_UART_Transmit+0x82>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d104      	bne.n	8002604 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	e003      	b.n	800260c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002608:	2300      	movs	r3, #0
 800260a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002614:	e02a      	b.n	800266c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2200      	movs	r2, #0
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f840 	bl	80026a6 <UART_WaitOnFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e036      	b.n	800269e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10b      	bne.n	800264e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002644:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	3302      	adds	r3, #2
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	e007      	b.n	800265e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	3301      	adds	r3, #1
 800265c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1cf      	bne.n	8002616 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2200      	movs	r2, #0
 800267e:	2140      	movs	r1, #64	; 0x40
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f810 	bl	80026a6 <UART_WaitOnFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e006      	b.n	800269e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	e000      	b.n	800269e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800269c:	2302      	movs	r3, #2
  }
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b090      	sub	sp, #64	; 0x40
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	4613      	mov	r3, r2
 80026b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026b6:	e050      	b.n	800275a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026be:	d04c      	beq.n	800275a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80026c6:	f7fe fbad 	bl	8000e24 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d241      	bcs.n	800275a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	330c      	adds	r3, #12
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e0:	e853 3f00 	ldrex	r3, [r3]
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80026ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	330c      	adds	r3, #12
 80026f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026f6:	637a      	str	r2, [r7, #52]	; 0x34
 80026f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026fe:	e841 2300 	strex	r3, r2, [r1]
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1e5      	bne.n	80026d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3314      	adds	r3, #20
 8002710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	e853 3f00 	ldrex	r3, [r3]
 8002718:	613b      	str	r3, [r7, #16]
   return(result);
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f023 0301 	bic.w	r3, r3, #1
 8002720:	63bb      	str	r3, [r7, #56]	; 0x38
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3314      	adds	r3, #20
 8002728:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800272a:	623a      	str	r2, [r7, #32]
 800272c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272e:	69f9      	ldr	r1, [r7, #28]
 8002730:	6a3a      	ldr	r2, [r7, #32]
 8002732:	e841 2300 	strex	r3, r2, [r1]
 8002736:	61bb      	str	r3, [r7, #24]
   return(result);
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1e5      	bne.n	800270a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e00f      	b.n	800277a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4013      	ands	r3, r2
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	429a      	cmp	r2, r3
 8002768:	bf0c      	ite	eq
 800276a:	2301      	moveq	r3, #1
 800276c:	2300      	movne	r3, #0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	429a      	cmp	r2, r3
 8002776:	d09f      	beq.n	80026b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3740      	adds	r7, #64	; 0x40
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002788:	b09f      	sub	sp, #124	; 0x7c
 800278a:	af00      	add	r7, sp, #0
 800278c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800278e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279a:	68d9      	ldr	r1, [r3, #12]
 800279c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	ea40 0301 	orr.w	r3, r0, r1
 80027a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80027be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027c8:	f021 010c 	bic.w	r1, r1, #12
 80027cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d2:	430b      	orrs	r3, r1
 80027d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e2:	6999      	ldr	r1, [r3, #24]
 80027e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	ea40 0301 	orr.w	r3, r0, r1
 80027ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4bc5      	ldr	r3, [pc, #788]	; (8002b08 <UART_SetConfig+0x384>)
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d004      	beq.n	8002802 <UART_SetConfig+0x7e>
 80027f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4bc3      	ldr	r3, [pc, #780]	; (8002b0c <UART_SetConfig+0x388>)
 80027fe:	429a      	cmp	r2, r3
 8002800:	d103      	bne.n	800280a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002802:	f7ff fb7d 	bl	8001f00 <HAL_RCC_GetPCLK2Freq>
 8002806:	6778      	str	r0, [r7, #116]	; 0x74
 8002808:	e002      	b.n	8002810 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800280a:	f7ff fb65 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 800280e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002818:	f040 80b6 	bne.w	8002988 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800281c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800281e:	461c      	mov	r4, r3
 8002820:	f04f 0500 	mov.w	r5, #0
 8002824:	4622      	mov	r2, r4
 8002826:	462b      	mov	r3, r5
 8002828:	1891      	adds	r1, r2, r2
 800282a:	6439      	str	r1, [r7, #64]	; 0x40
 800282c:	415b      	adcs	r3, r3
 800282e:	647b      	str	r3, [r7, #68]	; 0x44
 8002830:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002834:	1912      	adds	r2, r2, r4
 8002836:	eb45 0303 	adc.w	r3, r5, r3
 800283a:	f04f 0000 	mov.w	r0, #0
 800283e:	f04f 0100 	mov.w	r1, #0
 8002842:	00d9      	lsls	r1, r3, #3
 8002844:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002848:	00d0      	lsls	r0, r2, #3
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	1911      	adds	r1, r2, r4
 8002850:	6639      	str	r1, [r7, #96]	; 0x60
 8002852:	416b      	adcs	r3, r5
 8002854:	667b      	str	r3, [r7, #100]	; 0x64
 8002856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	461a      	mov	r2, r3
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	1891      	adds	r1, r2, r2
 8002862:	63b9      	str	r1, [r7, #56]	; 0x38
 8002864:	415b      	adcs	r3, r3
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002868:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800286c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002870:	f7fd fcbe 	bl	80001f0 <__aeabi_uldivmod>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4ba5      	ldr	r3, [pc, #660]	; (8002b10 <UART_SetConfig+0x38c>)
 800287a:	fba3 2302 	umull	r2, r3, r3, r2
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	011e      	lsls	r6, r3, #4
 8002882:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002884:	461c      	mov	r4, r3
 8002886:	f04f 0500 	mov.w	r5, #0
 800288a:	4622      	mov	r2, r4
 800288c:	462b      	mov	r3, r5
 800288e:	1891      	adds	r1, r2, r2
 8002890:	6339      	str	r1, [r7, #48]	; 0x30
 8002892:	415b      	adcs	r3, r3
 8002894:	637b      	str	r3, [r7, #52]	; 0x34
 8002896:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800289a:	1912      	adds	r2, r2, r4
 800289c:	eb45 0303 	adc.w	r3, r5, r3
 80028a0:	f04f 0000 	mov.w	r0, #0
 80028a4:	f04f 0100 	mov.w	r1, #0
 80028a8:	00d9      	lsls	r1, r3, #3
 80028aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028ae:	00d0      	lsls	r0, r2, #3
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	1911      	adds	r1, r2, r4
 80028b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80028b8:	416b      	adcs	r3, r5
 80028ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	461a      	mov	r2, r3
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	1891      	adds	r1, r2, r2
 80028c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80028ca:	415b      	adcs	r3, r3
 80028cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80028d6:	f7fd fc8b 	bl	80001f0 <__aeabi_uldivmod>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4b8c      	ldr	r3, [pc, #560]	; (8002b10 <UART_SetConfig+0x38c>)
 80028e0:	fba3 1302 	umull	r1, r3, r3, r2
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	2164      	movs	r1, #100	; 0x64
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	3332      	adds	r3, #50	; 0x32
 80028f2:	4a87      	ldr	r2, [pc, #540]	; (8002b10 <UART_SetConfig+0x38c>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	095b      	lsrs	r3, r3, #5
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002900:	441e      	add	r6, r3
 8002902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002904:	4618      	mov	r0, r3
 8002906:	f04f 0100 	mov.w	r1, #0
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	1894      	adds	r4, r2, r2
 8002910:	623c      	str	r4, [r7, #32]
 8002912:	415b      	adcs	r3, r3
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
 8002916:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800291a:	1812      	adds	r2, r2, r0
 800291c:	eb41 0303 	adc.w	r3, r1, r3
 8002920:	f04f 0400 	mov.w	r4, #0
 8002924:	f04f 0500 	mov.w	r5, #0
 8002928:	00dd      	lsls	r5, r3, #3
 800292a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800292e:	00d4      	lsls	r4, r2, #3
 8002930:	4622      	mov	r2, r4
 8002932:	462b      	mov	r3, r5
 8002934:	1814      	adds	r4, r2, r0
 8002936:	653c      	str	r4, [r7, #80]	; 0x50
 8002938:	414b      	adcs	r3, r1
 800293a:	657b      	str	r3, [r7, #84]	; 0x54
 800293c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	461a      	mov	r2, r3
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	1891      	adds	r1, r2, r2
 8002948:	61b9      	str	r1, [r7, #24]
 800294a:	415b      	adcs	r3, r3
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002952:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002956:	f7fd fc4b 	bl	80001f0 <__aeabi_uldivmod>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4b6c      	ldr	r3, [pc, #432]	; (8002b10 <UART_SetConfig+0x38c>)
 8002960:	fba3 1302 	umull	r1, r3, r3, r2
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	2164      	movs	r1, #100	; 0x64
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	3332      	adds	r3, #50	; 0x32
 8002972:	4a67      	ldr	r2, [pc, #412]	; (8002b10 <UART_SetConfig+0x38c>)
 8002974:	fba2 2303 	umull	r2, r3, r2, r3
 8002978:	095b      	lsrs	r3, r3, #5
 800297a:	f003 0207 	and.w	r2, r3, #7
 800297e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4432      	add	r2, r6
 8002984:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002986:	e0b9      	b.n	8002afc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800298a:	461c      	mov	r4, r3
 800298c:	f04f 0500 	mov.w	r5, #0
 8002990:	4622      	mov	r2, r4
 8002992:	462b      	mov	r3, r5
 8002994:	1891      	adds	r1, r2, r2
 8002996:	6139      	str	r1, [r7, #16]
 8002998:	415b      	adcs	r3, r3
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029a0:	1912      	adds	r2, r2, r4
 80029a2:	eb45 0303 	adc.w	r3, r5, r3
 80029a6:	f04f 0000 	mov.w	r0, #0
 80029aa:	f04f 0100 	mov.w	r1, #0
 80029ae:	00d9      	lsls	r1, r3, #3
 80029b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029b4:	00d0      	lsls	r0, r2, #3
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	eb12 0804 	adds.w	r8, r2, r4
 80029be:	eb43 0905 	adc.w	r9, r3, r5
 80029c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f04f 0100 	mov.w	r1, #0
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	008b      	lsls	r3, r1, #2
 80029d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80029da:	0082      	lsls	r2, r0, #2
 80029dc:	4640      	mov	r0, r8
 80029de:	4649      	mov	r1, r9
 80029e0:	f7fd fc06 	bl	80001f0 <__aeabi_uldivmod>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4b49      	ldr	r3, [pc, #292]	; (8002b10 <UART_SetConfig+0x38c>)
 80029ea:	fba3 2302 	umull	r2, r3, r3, r2
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	011e      	lsls	r6, r3, #4
 80029f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029f4:	4618      	mov	r0, r3
 80029f6:	f04f 0100 	mov.w	r1, #0
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	1894      	adds	r4, r2, r2
 8002a00:	60bc      	str	r4, [r7, #8]
 8002a02:	415b      	adcs	r3, r3
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a0a:	1812      	adds	r2, r2, r0
 8002a0c:	eb41 0303 	adc.w	r3, r1, r3
 8002a10:	f04f 0400 	mov.w	r4, #0
 8002a14:	f04f 0500 	mov.w	r5, #0
 8002a18:	00dd      	lsls	r5, r3, #3
 8002a1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a1e:	00d4      	lsls	r4, r2, #3
 8002a20:	4622      	mov	r2, r4
 8002a22:	462b      	mov	r3, r5
 8002a24:	1814      	adds	r4, r2, r0
 8002a26:	64bc      	str	r4, [r7, #72]	; 0x48
 8002a28:	414b      	adcs	r3, r1
 8002a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f04f 0100 	mov.w	r1, #0
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	008b      	lsls	r3, r1, #2
 8002a40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a44:	0082      	lsls	r2, r0, #2
 8002a46:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002a4a:	f7fd fbd1 	bl	80001f0 <__aeabi_uldivmod>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4b2f      	ldr	r3, [pc, #188]	; (8002b10 <UART_SetConfig+0x38c>)
 8002a54:	fba3 1302 	umull	r1, r3, r3, r2
 8002a58:	095b      	lsrs	r3, r3, #5
 8002a5a:	2164      	movs	r1, #100	; 0x64
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	3332      	adds	r3, #50	; 0x32
 8002a66:	4a2a      	ldr	r2, [pc, #168]	; (8002b10 <UART_SetConfig+0x38c>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	095b      	lsrs	r3, r3, #5
 8002a6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a72:	441e      	add	r6, r3
 8002a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a76:	4618      	mov	r0, r3
 8002a78:	f04f 0100 	mov.w	r1, #0
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	1894      	adds	r4, r2, r2
 8002a82:	603c      	str	r4, [r7, #0]
 8002a84:	415b      	adcs	r3, r3
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a8c:	1812      	adds	r2, r2, r0
 8002a8e:	eb41 0303 	adc.w	r3, r1, r3
 8002a92:	f04f 0400 	mov.w	r4, #0
 8002a96:	f04f 0500 	mov.w	r5, #0
 8002a9a:	00dd      	lsls	r5, r3, #3
 8002a9c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002aa0:	00d4      	lsls	r4, r2, #3
 8002aa2:	4622      	mov	r2, r4
 8002aa4:	462b      	mov	r3, r5
 8002aa6:	eb12 0a00 	adds.w	sl, r2, r0
 8002aaa:	eb43 0b01 	adc.w	fp, r3, r1
 8002aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f04f 0100 	mov.w	r1, #0
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	008b      	lsls	r3, r1, #2
 8002ac2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ac6:	0082      	lsls	r2, r0, #2
 8002ac8:	4650      	mov	r0, sl
 8002aca:	4659      	mov	r1, fp
 8002acc:	f7fd fb90 	bl	80001f0 <__aeabi_uldivmod>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <UART_SetConfig+0x38c>)
 8002ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	2164      	movs	r1, #100	; 0x64
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	3332      	adds	r3, #50	; 0x32
 8002ae8:	4a09      	ldr	r2, [pc, #36]	; (8002b10 <UART_SetConfig+0x38c>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	f003 020f 	and.w	r2, r3, #15
 8002af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4432      	add	r2, r6
 8002afa:	609a      	str	r2, [r3, #8]
}
 8002afc:	bf00      	nop
 8002afe:	377c      	adds	r7, #124	; 0x7c
 8002b00:	46bd      	mov	sp, r7
 8002b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b06:	bf00      	nop
 8002b08:	40011000 	.word	0x40011000
 8002b0c:	40011400 	.word	0x40011400
 8002b10:	51eb851f 	.word	0x51eb851f

08002b14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b14:	b084      	sub	sp, #16
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	f107 001c 	add.w	r0, r7, #28
 8002b22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d122      	bne.n	8002b72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d105      	bne.n	8002b66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 fa82 	bl	8003070 <USB_CoreReset>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	73fb      	strb	r3, [r7, #15]
 8002b70:	e01a      	b.n	8002ba8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fa76 	bl	8003070 <USB_CoreReset>
 8002b84:	4603      	mov	r3, r0
 8002b86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38
 8002b9a:	e005      	b.n	8002ba8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d10b      	bne.n	8002bc6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f043 0206 	orr.w	r2, r3, #6
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f043 0220 	orr.w	r2, r3, #32
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bd2:	b004      	add	sp, #16
 8002bd4:	4770      	bx	lr

08002bd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f023 0201 	bic.w	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d115      	bne.n	8002c46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c26:	2001      	movs	r0, #1
 8002c28:	f7fe f908 	bl	8000e3c <HAL_Delay>
      ms++;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fa0e 	bl	8003054 <USB_GetMode>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d01e      	beq.n	8002c7c <USB_SetCurrentMode+0x84>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b31      	cmp	r3, #49	; 0x31
 8002c42:	d9f0      	bls.n	8002c26 <USB_SetCurrentMode+0x2e>
 8002c44:	e01a      	b.n	8002c7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d115      	bne.n	8002c78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002c58:	2001      	movs	r0, #1
 8002c5a:	f7fe f8ef 	bl	8000e3c <HAL_Delay>
      ms++;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3301      	adds	r3, #1
 8002c62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f9f5 	bl	8003054 <USB_GetMode>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <USB_SetCurrentMode+0x84>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b31      	cmp	r3, #49	; 0x31
 8002c74:	d9f0      	bls.n	8002c58 <USB_SetCurrentMode+0x60>
 8002c76:	e001      	b.n	8002c7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e005      	b.n	8002c88 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b32      	cmp	r3, #50	; 0x32
 8002c80:	d101      	bne.n	8002c86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c90:	b084      	sub	sp, #16
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
 8002c9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	e009      	b.n	8002cc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	3340      	adds	r3, #64	; 0x40
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	2200      	movs	r2, #0
 8002cbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	2b0e      	cmp	r3, #14
 8002cc8:	d9f2      	bls.n	8002cb0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d11c      	bne.n	8002d0a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cde:	f043 0302 	orr.w	r3, r3, #2
 8002ce2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	639a      	str	r2, [r3, #56]	; 0x38
 8002d08:	e00b      	b.n	8002d22 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d34:	4619      	mov	r1, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	680b      	ldr	r3, [r1, #0]
 8002d40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d10c      	bne.n	8002d62 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d104      	bne.n	8002d58 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d4e:	2100      	movs	r1, #0
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f945 	bl	8002fe0 <USB_SetDevSpeed>
 8002d56:	e008      	b.n	8002d6a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d58:	2101      	movs	r1, #1
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f940 	bl	8002fe0 <USB_SetDevSpeed>
 8002d60:	e003      	b.n	8002d6a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d62:	2103      	movs	r1, #3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f93b 	bl	8002fe0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d6a:	2110      	movs	r1, #16
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f8f3 	bl	8002f58 <USB_FlushTxFifo>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f90f 	bl	8002fa0 <USB_FlushRxFifo>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d92:	461a      	mov	r2, r3
 8002d94:	2300      	movs	r3, #0
 8002d96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2300      	movs	r3, #0
 8002da2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002daa:	461a      	mov	r2, r3
 8002dac:	2300      	movs	r3, #0
 8002dae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002db0:	2300      	movs	r3, #0
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	e043      	b.n	8002e3e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dcc:	d118      	bne.n	8002e00 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10a      	bne.n	8002dea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002de0:	461a      	mov	r2, r3
 8002de2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	e013      	b.n	8002e12 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df6:	461a      	mov	r2, r3
 8002df8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e008      	b.n	8002e12 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	2300      	movs	r3, #0
 8002e10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2300      	movs	r3, #0
 8002e22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e30:	461a      	mov	r2, r3
 8002e32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d3b7      	bcc.n	8002db6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	e043      	b.n	8002ed4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e62:	d118      	bne.n	8002e96 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10a      	bne.n	8002e80 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e76:	461a      	mov	r2, r3
 8002e78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e013      	b.n	8002ea8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	e008      	b.n	8002ea8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ecc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d3b7      	bcc.n	8002e4c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002efc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d105      	bne.n	8002f10 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f043 0210 	orr.w	r2, r3, #16
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699a      	ldr	r2, [r3, #24]
 8002f14:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <USB_DevInit+0x2c4>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f043 0208 	orr.w	r2, r3, #8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d107      	bne.n	8002f44 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f3c:	f043 0304 	orr.w	r3, r3, #4
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f50:	b004      	add	sp, #16
 8002f52:	4770      	bx	lr
 8002f54:	803c3800 	.word	0x803c3800

08002f58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	019b      	lsls	r3, r3, #6
 8002f6a:	f043 0220 	orr.w	r2, r3, #32
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	3301      	adds	r3, #1
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	4a08      	ldr	r2, [pc, #32]	; (8002f9c <USB_FlushTxFifo+0x44>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e006      	b.n	8002f90 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d0f1      	beq.n	8002f72 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	00030d40 	.word	0x00030d40

08002fa0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2210      	movs	r2, #16
 8002fb0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	4a08      	ldr	r2, [pc, #32]	; (8002fdc <USB_FlushRxFifo+0x3c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e006      	b.n	8002fd0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b10      	cmp	r3, #16
 8002fcc:	d0f1      	beq.n	8002fb2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	00030d40 	.word	0x00030d40

08002fe0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003000:	4313      	orrs	r3, r2
 8003002:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003012:	b480      	push	{r7}
 8003014:	b085      	sub	sp, #20
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800302c:	f023 0303 	bic.w	r3, r3, #3
 8003030:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f003 0301 	and.w	r3, r3, #1
}
 8003064:	4618      	mov	r0, r3
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3301      	adds	r3, #1
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	4a13      	ldr	r2, [pc, #76]	; (80030d0 <USB_CoreReset+0x60>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d901      	bls.n	800308c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e01a      	b.n	80030c2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	daf3      	bge.n	800307c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f043 0201 	orr.w	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3301      	adds	r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	4a09      	ldr	r2, [pc, #36]	; (80030d0 <USB_CoreReset+0x60>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e006      	b.n	80030c2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d0f1      	beq.n	80030a4 <USB_CoreReset+0x34>

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	00030d40 	.word	0x00030d40

080030d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80030e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030e6:	2b84      	cmp	r3, #132	; 0x84
 80030e8:	d005      	beq.n	80030f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80030ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4413      	add	r3, r2
 80030f2:	3303      	adds	r3, #3
 80030f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80030f6:	68fb      	ldr	r3, [r7, #12]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003108:	f000 faf6 	bl	80036f8 <vTaskStartScheduler>
  
  return osOK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	bd80      	pop	{r7, pc}

08003112 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003112:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003114:	b089      	sub	sp, #36	; 0x24
 8003116:	af04      	add	r7, sp, #16
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <osThreadCreate+0x54>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01c      	beq.n	8003166 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685c      	ldr	r4, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681d      	ldr	r5, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691e      	ldr	r6, [r3, #16]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff ffc8 	bl	80030d4 <makeFreeRtosPriority>
 8003144:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800314e:	9202      	str	r2, [sp, #8]
 8003150:	9301      	str	r3, [sp, #4]
 8003152:	9100      	str	r1, [sp, #0]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	4632      	mov	r2, r6
 8003158:	4629      	mov	r1, r5
 800315a:	4620      	mov	r0, r4
 800315c:	f000 f8ed 	bl	800333a <xTaskCreateStatic>
 8003160:	4603      	mov	r3, r0
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	e01c      	b.n	80031a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685c      	ldr	r4, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003172:	b29e      	uxth	r6, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff ffaa 	bl	80030d4 <makeFreeRtosPriority>
 8003180:	4602      	mov	r2, r0
 8003182:	f107 030c 	add.w	r3, r7, #12
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	9200      	str	r2, [sp, #0]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	4632      	mov	r2, r6
 800318e:	4629      	mov	r1, r5
 8003190:	4620      	mov	r0, r4
 8003192:	f000 f92f 	bl	80033f4 <xTaskCreate>
 8003196:	4603      	mov	r3, r0
 8003198:	2b01      	cmp	r3, #1
 800319a:	d001      	beq.n	80031a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800319c:	2300      	movs	r3, #0
 800319e:	e000      	b.n	80031a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80031a0:	68fb      	ldr	r3, [r7, #12]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <osDelay+0x16>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	e000      	b.n	80031c2 <osDelay+0x18>
 80031c0:	2301      	movs	r3, #1
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fa64 	bl	8003690 <vTaskDelay>
  
  return osOK;
 80031c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f103 0208 	add.w	r2, r3, #8
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f04f 32ff 	mov.w	r2, #4294967295
 80031ea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f103 0208 	add.w	r2, r3, #8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f103 0208 	add.w	r2, r3, #8
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	601a      	str	r2, [r3, #0]
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328a:	d103      	bne.n	8003294 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	e00c      	b.n	80032ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3308      	adds	r3, #8
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	e002      	b.n	80032a2 <vListInsert+0x2e>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d2f6      	bcs.n	800329c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	601a      	str	r2, [r3, #0]
}
 80032da:	bf00      	nop
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6892      	ldr	r2, [r2, #8]
 80032fc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6852      	ldr	r2, [r2, #4]
 8003306:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	429a      	cmp	r2, r3
 8003310:	d103      	bne.n	800331a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	1e5a      	subs	r2, r3, #1
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800333a:	b580      	push	{r7, lr}
 800333c:	b08e      	sub	sp, #56	; 0x38
 800333e:	af04      	add	r7, sp, #16
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
 8003346:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10a      	bne.n	8003364 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003360:	bf00      	nop
 8003362:	e7fe      	b.n	8003362 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10a      	bne.n	8003380 <xTaskCreateStatic+0x46>
	__asm volatile
 800336a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	61fb      	str	r3, [r7, #28]
}
 800337c:	bf00      	nop
 800337e:	e7fe      	b.n	800337e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003380:	23b4      	movs	r3, #180	; 0xb4
 8003382:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2bb4      	cmp	r3, #180	; 0xb4
 8003388:	d00a      	beq.n	80033a0 <xTaskCreateStatic+0x66>
	__asm volatile
 800338a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	61bb      	str	r3, [r7, #24]
}
 800339c:	bf00      	nop
 800339e:	e7fe      	b.n	800339e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80033a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01e      	beq.n	80033e6 <xTaskCreateStatic+0xac>
 80033a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d01b      	beq.n	80033e6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033c0:	2300      	movs	r3, #0
 80033c2:	9303      	str	r3, [sp, #12]
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	9302      	str	r3, [sp, #8]
 80033c8:	f107 0314 	add.w	r3, r7, #20
 80033cc:	9301      	str	r3, [sp, #4]
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f851 	bl	8003480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033e0:	f000 f8ec 	bl	80035bc <prvAddNewTaskToReadyList>
 80033e4:	e001      	b.n	80033ea <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033ea:	697b      	ldr	r3, [r7, #20]
	}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3728      	adds	r7, #40	; 0x28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08c      	sub	sp, #48	; 0x30
 80033f8:	af04      	add	r7, sp, #16
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fef5 	bl	80041f8 <pvPortMalloc>
 800340e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00e      	beq.n	8003434 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003416:	20b4      	movs	r0, #180	; 0xb4
 8003418:	f000 feee 	bl	80041f8 <pvPortMalloc>
 800341c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	631a      	str	r2, [r3, #48]	; 0x30
 800342a:	e005      	b.n	8003438 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800342c:	6978      	ldr	r0, [r7, #20]
 800342e:	f000 ffaf 	bl	8004390 <vPortFree>
 8003432:	e001      	b.n	8003438 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003434:	2300      	movs	r3, #0
 8003436:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d017      	beq.n	800346e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003446:	88fa      	ldrh	r2, [r7, #6]
 8003448:	2300      	movs	r3, #0
 800344a:	9303      	str	r3, [sp, #12]
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	9302      	str	r3, [sp, #8]
 8003450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003452:	9301      	str	r3, [sp, #4]
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f80f 	bl	8003480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003462:	69f8      	ldr	r0, [r7, #28]
 8003464:	f000 f8aa 	bl	80035bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003468:	2301      	movs	r3, #1
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	e002      	b.n	8003474 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800346e:	f04f 33ff 	mov.w	r3, #4294967295
 8003472:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003474:	69bb      	ldr	r3, [r7, #24]
	}
 8003476:	4618      	mov	r0, r3
 8003478:	3720      	adds	r7, #32
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003498:	3b01      	subs	r3, #1
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	f023 0307 	bic.w	r3, r3, #7
 80034a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80034b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	617b      	str	r3, [r7, #20]
}
 80034c4:	bf00      	nop
 80034c6:	e7fe      	b.n	80034c6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d01f      	beq.n	800350e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	e012      	b.n	80034fa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	4413      	add	r3, r2
 80034da:	7819      	ldrb	r1, [r3, #0]
 80034dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	4413      	add	r3, r2
 80034e2:	3334      	adds	r3, #52	; 0x34
 80034e4:	460a      	mov	r2, r1
 80034e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	4413      	add	r3, r2
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d006      	beq.n	8003502 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	3301      	adds	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	2b0f      	cmp	r3, #15
 80034fe:	d9e9      	bls.n	80034d4 <prvInitialiseNewTask+0x54>
 8003500:	e000      	b.n	8003504 <prvInitialiseNewTask+0x84>
			{
				break;
 8003502:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800350c:	e003      	b.n	8003516 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003518:	2b06      	cmp	r3, #6
 800351a:	d901      	bls.n	8003520 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800351c:	2306      	movs	r3, #6
 800351e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003524:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800352a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352e:	2200      	movs	r2, #0
 8003530:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	3304      	adds	r3, #4
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fe6b 	bl	8003212 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353e:	3318      	adds	r3, #24
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fe66 	bl	8003212 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800354a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	f1c3 0207 	rsb	r2, r3, #7
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800355c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355e:	2200      	movs	r2, #0
 8003560:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	2200      	movs	r2, #0
 8003568:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	334c      	adds	r3, #76	; 0x4c
 8003570:	2260      	movs	r2, #96	; 0x60
 8003572:	2100      	movs	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f001 f84f 	bl	8004618 <memset>
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	4a0c      	ldr	r2, [pc, #48]	; (80035b0 <prvInitialiseNewTask+0x130>)
 800357e:	651a      	str	r2, [r3, #80]	; 0x50
 8003580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003582:	4a0c      	ldr	r2, [pc, #48]	; (80035b4 <prvInitialiseNewTask+0x134>)
 8003584:	655a      	str	r2, [r3, #84]	; 0x54
 8003586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003588:	4a0b      	ldr	r2, [pc, #44]	; (80035b8 <prvInitialiseNewTask+0x138>)
 800358a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	68f9      	ldr	r1, [r7, #12]
 8003590:	69b8      	ldr	r0, [r7, #24]
 8003592:	f000 fc1f 	bl	8003dd4 <pxPortInitialiseStack>
 8003596:	4602      	mov	r2, r0
 8003598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035a8:	bf00      	nop
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	08004878 	.word	0x08004878
 80035b4:	08004898 	.word	0x08004898
 80035b8:	08004858 	.word	0x08004858

080035bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035c4:	f000 fd36 	bl	8004034 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035c8:	4b2a      	ldr	r3, [pc, #168]	; (8003674 <prvAddNewTaskToReadyList+0xb8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3301      	adds	r3, #1
 80035ce:	4a29      	ldr	r2, [pc, #164]	; (8003674 <prvAddNewTaskToReadyList+0xb8>)
 80035d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035d2:	4b29      	ldr	r3, [pc, #164]	; (8003678 <prvAddNewTaskToReadyList+0xbc>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035da:	4a27      	ldr	r2, [pc, #156]	; (8003678 <prvAddNewTaskToReadyList+0xbc>)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035e0:	4b24      	ldr	r3, [pc, #144]	; (8003674 <prvAddNewTaskToReadyList+0xb8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d110      	bne.n	800360a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035e8:	f000 facc 	bl	8003b84 <prvInitialiseTaskLists>
 80035ec:	e00d      	b.n	800360a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035ee:	4b23      	ldr	r3, [pc, #140]	; (800367c <prvAddNewTaskToReadyList+0xc0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035f6:	4b20      	ldr	r3, [pc, #128]	; (8003678 <prvAddNewTaskToReadyList+0xbc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	429a      	cmp	r2, r3
 8003602:	d802      	bhi.n	800360a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003604:	4a1c      	ldr	r2, [pc, #112]	; (8003678 <prvAddNewTaskToReadyList+0xbc>)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800360a:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <prvAddNewTaskToReadyList+0xc4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3301      	adds	r3, #1
 8003610:	4a1b      	ldr	r2, [pc, #108]	; (8003680 <prvAddNewTaskToReadyList+0xc4>)
 8003612:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	2201      	movs	r2, #1
 800361a:	409a      	lsls	r2, r3
 800361c:	4b19      	ldr	r3, [pc, #100]	; (8003684 <prvAddNewTaskToReadyList+0xc8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4313      	orrs	r3, r2
 8003622:	4a18      	ldr	r2, [pc, #96]	; (8003684 <prvAddNewTaskToReadyList+0xc8>)
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4a15      	ldr	r2, [pc, #84]	; (8003688 <prvAddNewTaskToReadyList+0xcc>)
 8003634:	441a      	add	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	4619      	mov	r1, r3
 800363c:	4610      	mov	r0, r2
 800363e:	f7ff fdf5 	bl	800322c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003642:	f000 fd27 	bl	8004094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003646:	4b0d      	ldr	r3, [pc, #52]	; (800367c <prvAddNewTaskToReadyList+0xc0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00e      	beq.n	800366c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800364e:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <prvAddNewTaskToReadyList+0xbc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	429a      	cmp	r2, r3
 800365a:	d207      	bcs.n	800366c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <prvAddNewTaskToReadyList+0xd0>)
 800365e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20000450 	.word	0x20000450
 8003678:	20000350 	.word	0x20000350
 800367c:	2000045c 	.word	0x2000045c
 8003680:	2000046c 	.word	0x2000046c
 8003684:	20000458 	.word	0x20000458
 8003688:	20000354 	.word	0x20000354
 800368c:	e000ed04 	.word	0xe000ed04

08003690 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d017      	beq.n	80036d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80036a2:	4b13      	ldr	r3, [pc, #76]	; (80036f0 <vTaskDelay+0x60>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <vTaskDelay+0x30>
	__asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	60bb      	str	r3, [r7, #8]
}
 80036bc:	bf00      	nop
 80036be:	e7fe      	b.n	80036be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80036c0:	f000 f884 	bl	80037cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036c4:	2100      	movs	r1, #0
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fb1e 	bl	8003d08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036cc:	f000 f88c 	bl	80037e8 <xTaskResumeAll>
 80036d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d107      	bne.n	80036e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80036d8:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <vTaskDelay+0x64>)
 80036da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000478 	.word	0x20000478
 80036f4:	e000ed04 	.word	0xe000ed04

080036f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	; 0x28
 80036fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003702:	2300      	movs	r3, #0
 8003704:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003706:	463a      	mov	r2, r7
 8003708:	1d39      	adds	r1, r7, #4
 800370a:	f107 0308 	add.w	r3, r7, #8
 800370e:	4618      	mov	r0, r3
 8003710:	f7fc ff40 	bl	8000594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003714:	6839      	ldr	r1, [r7, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	9202      	str	r2, [sp, #8]
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	2300      	movs	r3, #0
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	2300      	movs	r3, #0
 8003724:	460a      	mov	r2, r1
 8003726:	4921      	ldr	r1, [pc, #132]	; (80037ac <vTaskStartScheduler+0xb4>)
 8003728:	4821      	ldr	r0, [pc, #132]	; (80037b0 <vTaskStartScheduler+0xb8>)
 800372a:	f7ff fe06 	bl	800333a <xTaskCreateStatic>
 800372e:	4603      	mov	r3, r0
 8003730:	4a20      	ldr	r2, [pc, #128]	; (80037b4 <vTaskStartScheduler+0xbc>)
 8003732:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003734:	4b1f      	ldr	r3, [pc, #124]	; (80037b4 <vTaskStartScheduler+0xbc>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800373c:	2301      	movs	r3, #1
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	e001      	b.n	8003746 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d11b      	bne.n	8003784 <vTaskStartScheduler+0x8c>
	__asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	613b      	str	r3, [r7, #16]
}
 800375e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003760:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <vTaskStartScheduler+0xc0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	334c      	adds	r3, #76	; 0x4c
 8003766:	4a15      	ldr	r2, [pc, #84]	; (80037bc <vTaskStartScheduler+0xc4>)
 8003768:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800376a:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <vTaskStartScheduler+0xc8>)
 800376c:	f04f 32ff 	mov.w	r2, #4294967295
 8003770:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003772:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <vTaskStartScheduler+0xcc>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <vTaskStartScheduler+0xd0>)
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800377e:	f000 fbb7 	bl	8003ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003782:	e00e      	b.n	80037a2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378a:	d10a      	bne.n	80037a2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	60fb      	str	r3, [r7, #12]
}
 800379e:	bf00      	nop
 80037a0:	e7fe      	b.n	80037a0 <vTaskStartScheduler+0xa8>
}
 80037a2:	bf00      	nop
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	08004838 	.word	0x08004838
 80037b0:	08003b55 	.word	0x08003b55
 80037b4:	20000474 	.word	0x20000474
 80037b8:	20000350 	.word	0x20000350
 80037bc:	20000010 	.word	0x20000010
 80037c0:	20000470 	.word	0x20000470
 80037c4:	2000045c 	.word	0x2000045c
 80037c8:	20000454 	.word	0x20000454

080037cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80037d0:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <vTaskSuspendAll+0x18>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	4a03      	ldr	r2, [pc, #12]	; (80037e4 <vTaskSuspendAll+0x18>)
 80037d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037da:	bf00      	nop
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	20000478 	.word	0x20000478

080037e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037f6:	4b41      	ldr	r3, [pc, #260]	; (80038fc <xTaskResumeAll+0x114>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10a      	bne.n	8003814 <xTaskResumeAll+0x2c>
	__asm volatile
 80037fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	603b      	str	r3, [r7, #0]
}
 8003810:	bf00      	nop
 8003812:	e7fe      	b.n	8003812 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003814:	f000 fc0e 	bl	8004034 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003818:	4b38      	ldr	r3, [pc, #224]	; (80038fc <xTaskResumeAll+0x114>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3b01      	subs	r3, #1
 800381e:	4a37      	ldr	r2, [pc, #220]	; (80038fc <xTaskResumeAll+0x114>)
 8003820:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003822:	4b36      	ldr	r3, [pc, #216]	; (80038fc <xTaskResumeAll+0x114>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d161      	bne.n	80038ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800382a:	4b35      	ldr	r3, [pc, #212]	; (8003900 <xTaskResumeAll+0x118>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d05d      	beq.n	80038ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003832:	e02e      	b.n	8003892 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003834:	4b33      	ldr	r3, [pc, #204]	; (8003904 <xTaskResumeAll+0x11c>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3318      	adds	r3, #24
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fd50 	bl	80032e6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3304      	adds	r3, #4
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fd4b 	bl	80032e6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	2201      	movs	r2, #1
 8003856:	409a      	lsls	r2, r3
 8003858:	4b2b      	ldr	r3, [pc, #172]	; (8003908 <xTaskResumeAll+0x120>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4313      	orrs	r3, r2
 800385e:	4a2a      	ldr	r2, [pc, #168]	; (8003908 <xTaskResumeAll+0x120>)
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4a27      	ldr	r2, [pc, #156]	; (800390c <xTaskResumeAll+0x124>)
 8003870:	441a      	add	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	3304      	adds	r3, #4
 8003876:	4619      	mov	r1, r3
 8003878:	4610      	mov	r0, r2
 800387a:	f7ff fcd7 	bl	800322c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003882:	4b23      	ldr	r3, [pc, #140]	; (8003910 <xTaskResumeAll+0x128>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	429a      	cmp	r2, r3
 800388a:	d302      	bcc.n	8003892 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800388c:	4b21      	ldr	r3, [pc, #132]	; (8003914 <xTaskResumeAll+0x12c>)
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003892:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <xTaskResumeAll+0x11c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1cc      	bne.n	8003834 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038a0:	f000 fa12 	bl	8003cc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038a4:	4b1c      	ldr	r3, [pc, #112]	; (8003918 <xTaskResumeAll+0x130>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d010      	beq.n	80038d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038b0:	f000 f836 	bl	8003920 <xTaskIncrementTick>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80038ba:	4b16      	ldr	r3, [pc, #88]	; (8003914 <xTaskResumeAll+0x12c>)
 80038bc:	2201      	movs	r2, #1
 80038be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1f1      	bne.n	80038b0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <xTaskResumeAll+0x130>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038d2:	4b10      	ldr	r3, [pc, #64]	; (8003914 <xTaskResumeAll+0x12c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038da:	2301      	movs	r3, #1
 80038dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038de:	4b0f      	ldr	r3, [pc, #60]	; (800391c <xTaskResumeAll+0x134>)
 80038e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038ee:	f000 fbd1 	bl	8004094 <vPortExitCritical>

	return xAlreadyYielded;
 80038f2:	68bb      	ldr	r3, [r7, #8]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000478 	.word	0x20000478
 8003900:	20000450 	.word	0x20000450
 8003904:	20000410 	.word	0x20000410
 8003908:	20000458 	.word	0x20000458
 800390c:	20000354 	.word	0x20000354
 8003910:	20000350 	.word	0x20000350
 8003914:	20000464 	.word	0x20000464
 8003918:	20000460 	.word	0x20000460
 800391c:	e000ed04 	.word	0xe000ed04

08003920 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800392a:	4b4e      	ldr	r3, [pc, #312]	; (8003a64 <xTaskIncrementTick+0x144>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f040 808e 	bne.w	8003a50 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003934:	4b4c      	ldr	r3, [pc, #304]	; (8003a68 <xTaskIncrementTick+0x148>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3301      	adds	r3, #1
 800393a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800393c:	4a4a      	ldr	r2, [pc, #296]	; (8003a68 <xTaskIncrementTick+0x148>)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d120      	bne.n	800398a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003948:	4b48      	ldr	r3, [pc, #288]	; (8003a6c <xTaskIncrementTick+0x14c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <xTaskIncrementTick+0x48>
	__asm volatile
 8003952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003956:	f383 8811 	msr	BASEPRI, r3
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	603b      	str	r3, [r7, #0]
}
 8003964:	bf00      	nop
 8003966:	e7fe      	b.n	8003966 <xTaskIncrementTick+0x46>
 8003968:	4b40      	ldr	r3, [pc, #256]	; (8003a6c <xTaskIncrementTick+0x14c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	4b40      	ldr	r3, [pc, #256]	; (8003a70 <xTaskIncrementTick+0x150>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a3e      	ldr	r2, [pc, #248]	; (8003a6c <xTaskIncrementTick+0x14c>)
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	4a3e      	ldr	r2, [pc, #248]	; (8003a70 <xTaskIncrementTick+0x150>)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	4b3d      	ldr	r3, [pc, #244]	; (8003a74 <xTaskIncrementTick+0x154>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3301      	adds	r3, #1
 8003982:	4a3c      	ldr	r2, [pc, #240]	; (8003a74 <xTaskIncrementTick+0x154>)
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	f000 f99f 	bl	8003cc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800398a:	4b3b      	ldr	r3, [pc, #236]	; (8003a78 <xTaskIncrementTick+0x158>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	429a      	cmp	r2, r3
 8003992:	d348      	bcc.n	8003a26 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003994:	4b35      	ldr	r3, [pc, #212]	; (8003a6c <xTaskIncrementTick+0x14c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800399e:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <xTaskIncrementTick+0x158>)
 80039a0:	f04f 32ff 	mov.w	r2, #4294967295
 80039a4:	601a      	str	r2, [r3, #0]
					break;
 80039a6:	e03e      	b.n	8003a26 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039a8:	4b30      	ldr	r3, [pc, #192]	; (8003a6c <xTaskIncrementTick+0x14c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d203      	bcs.n	80039c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039c0:	4a2d      	ldr	r2, [pc, #180]	; (8003a78 <xTaskIncrementTick+0x158>)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039c6:	e02e      	b.n	8003a26 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	3304      	adds	r3, #4
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fc8a 	bl	80032e6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d004      	beq.n	80039e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	3318      	adds	r3, #24
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fc81 	bl	80032e6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	2201      	movs	r2, #1
 80039ea:	409a      	lsls	r2, r3
 80039ec:	4b23      	ldr	r3, [pc, #140]	; (8003a7c <xTaskIncrementTick+0x15c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	4a22      	ldr	r2, [pc, #136]	; (8003a7c <xTaskIncrementTick+0x15c>)
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4a1f      	ldr	r2, [pc, #124]	; (8003a80 <xTaskIncrementTick+0x160>)
 8003a04:	441a      	add	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	f7ff fc0d 	bl	800322c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a16:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <xTaskIncrementTick+0x164>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d3b9      	bcc.n	8003994 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a20:	2301      	movs	r3, #1
 8003a22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a24:	e7b6      	b.n	8003994 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a26:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <xTaskIncrementTick+0x164>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2c:	4914      	ldr	r1, [pc, #80]	; (8003a80 <xTaskIncrementTick+0x160>)
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d901      	bls.n	8003a42 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a42:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <xTaskIncrementTick+0x168>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e004      	b.n	8003a5a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a50:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <xTaskIncrementTick+0x16c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3301      	adds	r3, #1
 8003a56:	4a0d      	ldr	r2, [pc, #52]	; (8003a8c <xTaskIncrementTick+0x16c>)
 8003a58:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a5a:	697b      	ldr	r3, [r7, #20]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20000478 	.word	0x20000478
 8003a68:	20000454 	.word	0x20000454
 8003a6c:	20000408 	.word	0x20000408
 8003a70:	2000040c 	.word	0x2000040c
 8003a74:	20000468 	.word	0x20000468
 8003a78:	20000470 	.word	0x20000470
 8003a7c:	20000458 	.word	0x20000458
 8003a80:	20000354 	.word	0x20000354
 8003a84:	20000350 	.word	0x20000350
 8003a88:	20000464 	.word	0x20000464
 8003a8c:	20000460 	.word	0x20000460

08003a90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a96:	4b29      	ldr	r3, [pc, #164]	; (8003b3c <vTaskSwitchContext+0xac>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a9e:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <vTaskSwitchContext+0xb0>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003aa4:	e044      	b.n	8003b30 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003aa6:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <vTaskSwitchContext+0xb0>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <vTaskSwitchContext+0xb4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	fab3 f383 	clz	r3, r3
 8003ab8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003aba:	7afb      	ldrb	r3, [r7, #11]
 8003abc:	f1c3 031f 	rsb	r3, r3, #31
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	4921      	ldr	r1, [pc, #132]	; (8003b48 <vTaskSwitchContext+0xb8>)
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <vTaskSwitchContext+0x5c>
	__asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	607b      	str	r3, [r7, #4]
}
 8003ae8:	bf00      	nop
 8003aea:	e7fe      	b.n	8003aea <vTaskSwitchContext+0x5a>
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4a14      	ldr	r2, [pc, #80]	; (8003b48 <vTaskSwitchContext+0xb8>)
 8003af8:	4413      	add	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	3308      	adds	r3, #8
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d104      	bne.n	8003b1c <vTaskSwitchContext+0x8c>
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	605a      	str	r2, [r3, #4]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <vTaskSwitchContext+0xbc>)
 8003b24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <vTaskSwitchContext+0xbc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	334c      	adds	r3, #76	; 0x4c
 8003b2c:	4a08      	ldr	r2, [pc, #32]	; (8003b50 <vTaskSwitchContext+0xc0>)
 8003b2e:	6013      	str	r3, [r2, #0]
}
 8003b30:	bf00      	nop
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	20000478 	.word	0x20000478
 8003b40:	20000464 	.word	0x20000464
 8003b44:	20000458 	.word	0x20000458
 8003b48:	20000354 	.word	0x20000354
 8003b4c:	20000350 	.word	0x20000350
 8003b50:	20000010 	.word	0x20000010

08003b54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b5c:	f000 f852 	bl	8003c04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <prvIdleTask+0x28>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d9f9      	bls.n	8003b5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <prvIdleTask+0x2c>)
 8003b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b78:	e7f0      	b.n	8003b5c <prvIdleTask+0x8>
 8003b7a:	bf00      	nop
 8003b7c:	20000354 	.word	0x20000354
 8003b80:	e000ed04 	.word	0xe000ed04

08003b84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	607b      	str	r3, [r7, #4]
 8003b8e:	e00c      	b.n	8003baa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <prvInitialiseTaskLists+0x60>)
 8003b9c:	4413      	add	r3, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fb17 	bl	80031d2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	607b      	str	r3, [r7, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b06      	cmp	r3, #6
 8003bae:	d9ef      	bls.n	8003b90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bb0:	480d      	ldr	r0, [pc, #52]	; (8003be8 <prvInitialiseTaskLists+0x64>)
 8003bb2:	f7ff fb0e 	bl	80031d2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bb6:	480d      	ldr	r0, [pc, #52]	; (8003bec <prvInitialiseTaskLists+0x68>)
 8003bb8:	f7ff fb0b 	bl	80031d2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003bbc:	480c      	ldr	r0, [pc, #48]	; (8003bf0 <prvInitialiseTaskLists+0x6c>)
 8003bbe:	f7ff fb08 	bl	80031d2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bc2:	480c      	ldr	r0, [pc, #48]	; (8003bf4 <prvInitialiseTaskLists+0x70>)
 8003bc4:	f7ff fb05 	bl	80031d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bc8:	480b      	ldr	r0, [pc, #44]	; (8003bf8 <prvInitialiseTaskLists+0x74>)
 8003bca:	f7ff fb02 	bl	80031d2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <prvInitialiseTaskLists+0x78>)
 8003bd0:	4a05      	ldr	r2, [pc, #20]	; (8003be8 <prvInitialiseTaskLists+0x64>)
 8003bd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <prvInitialiseTaskLists+0x7c>)
 8003bd6:	4a05      	ldr	r2, [pc, #20]	; (8003bec <prvInitialiseTaskLists+0x68>)
 8003bd8:	601a      	str	r2, [r3, #0]
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000354 	.word	0x20000354
 8003be8:	200003e0 	.word	0x200003e0
 8003bec:	200003f4 	.word	0x200003f4
 8003bf0:	20000410 	.word	0x20000410
 8003bf4:	20000424 	.word	0x20000424
 8003bf8:	2000043c 	.word	0x2000043c
 8003bfc:	20000408 	.word	0x20000408
 8003c00:	2000040c 	.word	0x2000040c

08003c04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c0a:	e019      	b.n	8003c40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c0c:	f000 fa12 	bl	8004034 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c10:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <prvCheckTasksWaitingTermination+0x50>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fb62 	bl	80032e6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c22:	4b0d      	ldr	r3, [pc, #52]	; (8003c58 <prvCheckTasksWaitingTermination+0x54>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	4a0b      	ldr	r2, [pc, #44]	; (8003c58 <prvCheckTasksWaitingTermination+0x54>)
 8003c2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <prvCheckTasksWaitingTermination+0x58>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3b01      	subs	r3, #1
 8003c32:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <prvCheckTasksWaitingTermination+0x58>)
 8003c34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c36:	f000 fa2d 	bl	8004094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f810 	bl	8003c60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <prvCheckTasksWaitingTermination+0x58>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1e1      	bne.n	8003c0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000424 	.word	0x20000424
 8003c58:	20000450 	.word	0x20000450
 8003c5c:	20000438 	.word	0x20000438

08003c60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	334c      	adds	r3, #76	; 0x4c
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fce9 	bl	8004644 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d108      	bne.n	8003c8e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fb85 	bl	8004390 <vPortFree>
				vPortFree( pxTCB );
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fb82 	bl	8004390 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c8c:	e018      	b.n	8003cc0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d103      	bne.n	8003ca0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fb79 	bl	8004390 <vPortFree>
	}
 8003c9e:	e00f      	b.n	8003cc0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d00a      	beq.n	8003cc0 <prvDeleteTCB+0x60>
	__asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	60fb      	str	r3, [r7, #12]
}
 8003cbc:	bf00      	nop
 8003cbe:	e7fe      	b.n	8003cbe <prvDeleteTCB+0x5e>
	}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cce:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <prvResetNextTaskUnblockTime+0x38>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d104      	bne.n	8003ce2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <prvResetNextTaskUnblockTime+0x3c>)
 8003cda:	f04f 32ff 	mov.w	r2, #4294967295
 8003cde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ce0:	e008      	b.n	8003cf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <prvResetNextTaskUnblockTime+0x38>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <prvResetNextTaskUnblockTime+0x3c>)
 8003cf2:	6013      	str	r3, [r2, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	20000408 	.word	0x20000408
 8003d04:	20000470 	.word	0x20000470

08003d08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d12:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d18:	4b28      	ldr	r3, [pc, #160]	; (8003dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff fae1 	bl	80032e6 <uxListRemove>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d2a:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	2201      	movs	r2, #1
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43da      	mvns	r2, r3
 8003d38:	4b21      	ldr	r3, [pc, #132]	; (8003dc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	4a20      	ldr	r2, [pc, #128]	; (8003dc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d10a      	bne.n	8003d60 <prvAddCurrentTaskToDelayedList+0x58>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d50:	4b1a      	ldr	r3, [pc, #104]	; (8003dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3304      	adds	r3, #4
 8003d56:	4619      	mov	r1, r3
 8003d58:	481a      	ldr	r0, [pc, #104]	; (8003dc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d5a:	f7ff fa67 	bl	800322c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d5e:	e026      	b.n	8003dae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4413      	add	r3, r2
 8003d66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d68:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d209      	bcs.n	8003d8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d78:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3304      	adds	r3, #4
 8003d82:	4619      	mov	r1, r3
 8003d84:	4610      	mov	r0, r2
 8003d86:	f7ff fa75 	bl	8003274 <vListInsert>
}
 8003d8a:	e010      	b.n	8003dae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <prvAddCurrentTaskToDelayedList+0xc4>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3304      	adds	r3, #4
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f7ff fa6b 	bl	8003274 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d202      	bcs.n	8003dae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003da8:	4a09      	ldr	r2, [pc, #36]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	6013      	str	r3, [r2, #0]
}
 8003dae:	bf00      	nop
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20000454 	.word	0x20000454
 8003dbc:	20000350 	.word	0x20000350
 8003dc0:	20000458 	.word	0x20000458
 8003dc4:	2000043c 	.word	0x2000043c
 8003dc8:	2000040c 	.word	0x2000040c
 8003dcc:	20000408 	.word	0x20000408
 8003dd0:	20000470 	.word	0x20000470

08003dd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	3b04      	subs	r3, #4
 8003de4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	3b04      	subs	r3, #4
 8003df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f023 0201 	bic.w	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3b04      	subs	r3, #4
 8003e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e04:	4a0c      	ldr	r2, [pc, #48]	; (8003e38 <pxPortInitialiseStack+0x64>)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3b14      	subs	r3, #20
 8003e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3b04      	subs	r3, #4
 8003e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f06f 0202 	mvn.w	r2, #2
 8003e22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3b20      	subs	r3, #32
 8003e28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	08003e3d 	.word	0x08003e3d

08003e3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e46:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <prvTaskExitError+0x54>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d00a      	beq.n	8003e66 <prvTaskExitError+0x2a>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	60fb      	str	r3, [r7, #12]
}
 8003e62:	bf00      	nop
 8003e64:	e7fe      	b.n	8003e64 <prvTaskExitError+0x28>
	__asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	60bb      	str	r3, [r7, #8]
}
 8003e78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e7a:	bf00      	nop
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0fc      	beq.n	8003e7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e82:	bf00      	nop
 8003e84:	bf00      	nop
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	2000000c 	.word	0x2000000c
	...

08003ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <pxCurrentTCBConst2>)
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	6808      	ldr	r0, [r1, #0]
 8003ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eaa:	f380 8809 	msr	PSP, r0
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f380 8811 	msr	BASEPRI, r0
 8003eba:	4770      	bx	lr
 8003ebc:	f3af 8000 	nop.w

08003ec0 <pxCurrentTCBConst2>:
 8003ec0:	20000350 	.word	0x20000350
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop

08003ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ec8:	4808      	ldr	r0, [pc, #32]	; (8003eec <prvPortStartFirstTask+0x24>)
 8003eca:	6800      	ldr	r0, [r0, #0]
 8003ecc:	6800      	ldr	r0, [r0, #0]
 8003ece:	f380 8808 	msr	MSP, r0
 8003ed2:	f04f 0000 	mov.w	r0, #0
 8003ed6:	f380 8814 	msr	CONTROL, r0
 8003eda:	b662      	cpsie	i
 8003edc:	b661      	cpsie	f
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	df00      	svc	0
 8003ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003eea:	bf00      	nop
 8003eec:	e000ed08 	.word	0xe000ed08

08003ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ef6:	4b46      	ldr	r3, [pc, #280]	; (8004010 <xPortStartScheduler+0x120>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a46      	ldr	r2, [pc, #280]	; (8004014 <xPortStartScheduler+0x124>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d10a      	bne.n	8003f16 <xPortStartScheduler+0x26>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	613b      	str	r3, [r7, #16]
}
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f16:	4b3e      	ldr	r3, [pc, #248]	; (8004010 <xPortStartScheduler+0x120>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a3f      	ldr	r2, [pc, #252]	; (8004018 <xPortStartScheduler+0x128>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d10a      	bne.n	8003f36 <xPortStartScheduler+0x46>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	60fb      	str	r3, [r7, #12]
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f36:	4b39      	ldr	r3, [pc, #228]	; (800401c <xPortStartScheduler+0x12c>)
 8003f38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	22ff      	movs	r2, #255	; 0xff
 8003f46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4b31      	ldr	r3, [pc, #196]	; (8004020 <xPortStartScheduler+0x130>)
 8003f5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f5e:	4b31      	ldr	r3, [pc, #196]	; (8004024 <xPortStartScheduler+0x134>)
 8003f60:	2207      	movs	r2, #7
 8003f62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f64:	e009      	b.n	8003f7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003f66:	4b2f      	ldr	r3, [pc, #188]	; (8004024 <xPortStartScheduler+0x134>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	4a2d      	ldr	r2, [pc, #180]	; (8004024 <xPortStartScheduler+0x134>)
 8003f6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b80      	cmp	r3, #128	; 0x80
 8003f84:	d0ef      	beq.n	8003f66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f86:	4b27      	ldr	r3, [pc, #156]	; (8004024 <xPortStartScheduler+0x134>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f1c3 0307 	rsb	r3, r3, #7
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d00a      	beq.n	8003fa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	60bb      	str	r3, [r7, #8]
}
 8003fa4:	bf00      	nop
 8003fa6:	e7fe      	b.n	8003fa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fa8:	4b1e      	ldr	r3, [pc, #120]	; (8004024 <xPortStartScheduler+0x134>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	4a1d      	ldr	r2, [pc, #116]	; (8004024 <xPortStartScheduler+0x134>)
 8003fb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fb2:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <xPortStartScheduler+0x134>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fba:	4a1a      	ldr	r2, [pc, #104]	; (8004024 <xPortStartScheduler+0x134>)
 8003fbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fc6:	4b18      	ldr	r3, [pc, #96]	; (8004028 <xPortStartScheduler+0x138>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a17      	ldr	r2, [pc, #92]	; (8004028 <xPortStartScheduler+0x138>)
 8003fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <xPortStartScheduler+0x138>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a14      	ldr	r2, [pc, #80]	; (8004028 <xPortStartScheduler+0x138>)
 8003fd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003fdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003fde:	f000 f8dd 	bl	800419c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <xPortStartScheduler+0x13c>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003fe8:	f000 f8fc 	bl	80041e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003fec:	4b10      	ldr	r3, [pc, #64]	; (8004030 <xPortStartScheduler+0x140>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0f      	ldr	r2, [pc, #60]	; (8004030 <xPortStartScheduler+0x140>)
 8003ff2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ff6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ff8:	f7ff ff66 	bl	8003ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ffc:	f7ff fd48 	bl	8003a90 <vTaskSwitchContext>
	prvTaskExitError();
 8004000:	f7ff ff1c 	bl	8003e3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	e000ed00 	.word	0xe000ed00
 8004014:	410fc271 	.word	0x410fc271
 8004018:	410fc270 	.word	0x410fc270
 800401c:	e000e400 	.word	0xe000e400
 8004020:	2000047c 	.word	0x2000047c
 8004024:	20000480 	.word	0x20000480
 8004028:	e000ed20 	.word	0xe000ed20
 800402c:	2000000c 	.word	0x2000000c
 8004030:	e000ef34 	.word	0xe000ef34

08004034 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	607b      	str	r3, [r7, #4]
}
 800404c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <vPortEnterCritical+0x58>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3301      	adds	r3, #1
 8004054:	4a0d      	ldr	r2, [pc, #52]	; (800408c <vPortEnterCritical+0x58>)
 8004056:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <vPortEnterCritical+0x58>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d10f      	bne.n	8004080 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <vPortEnterCritical+0x5c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <vPortEnterCritical+0x4c>
	__asm volatile
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	603b      	str	r3, [r7, #0]
}
 800407c:	bf00      	nop
 800407e:	e7fe      	b.n	800407e <vPortEnterCritical+0x4a>
	}
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	2000000c 	.word	0x2000000c
 8004090:	e000ed04 	.word	0xe000ed04

08004094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800409a:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <vPortExitCritical+0x50>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <vPortExitCritical+0x24>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	607b      	str	r3, [r7, #4]
}
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80040b8:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <vPortExitCritical+0x50>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3b01      	subs	r3, #1
 80040be:	4a09      	ldr	r2, [pc, #36]	; (80040e4 <vPortExitCritical+0x50>)
 80040c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040c2:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <vPortExitCritical+0x50>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d105      	bne.n	80040d6 <vPortExitCritical+0x42>
 80040ca:	2300      	movs	r3, #0
 80040cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	2000000c 	.word	0x2000000c
	...

080040f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80040f0:	f3ef 8009 	mrs	r0, PSP
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	4b15      	ldr	r3, [pc, #84]	; (8004150 <pxCurrentTCBConst>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	f01e 0f10 	tst.w	lr, #16
 8004100:	bf08      	it	eq
 8004102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410a:	6010      	str	r0, [r2, #0]
 800410c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004114:	f380 8811 	msr	BASEPRI, r0
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f7ff fcb6 	bl	8003a90 <vTaskSwitchContext>
 8004124:	f04f 0000 	mov.w	r0, #0
 8004128:	f380 8811 	msr	BASEPRI, r0
 800412c:	bc09      	pop	{r0, r3}
 800412e:	6819      	ldr	r1, [r3, #0]
 8004130:	6808      	ldr	r0, [r1, #0]
 8004132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004136:	f01e 0f10 	tst.w	lr, #16
 800413a:	bf08      	it	eq
 800413c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004140:	f380 8809 	msr	PSP, r0
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	f3af 8000 	nop.w

08004150 <pxCurrentTCBConst>:
 8004150:	20000350 	.word	0x20000350
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop

08004158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
	__asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	607b      	str	r3, [r7, #4]
}
 8004170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004172:	f7ff fbd5 	bl	8003920 <xTaskIncrementTick>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <SysTick_Handler+0x40>)
 800417e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	2300      	movs	r3, #0
 8004186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f383 8811 	msr	BASEPRI, r3
}
 800418e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004190:	bf00      	nop
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	e000ed04 	.word	0xe000ed04

0800419c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041a0:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <vPortSetupTimerInterrupt+0x34>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041a6:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <vPortSetupTimerInterrupt+0x38>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041ac:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <vPortSetupTimerInterrupt+0x3c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <vPortSetupTimerInterrupt+0x40>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	099b      	lsrs	r3, r3, #6
 80041b8:	4a09      	ldr	r2, [pc, #36]	; (80041e0 <vPortSetupTimerInterrupt+0x44>)
 80041ba:	3b01      	subs	r3, #1
 80041bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041be:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <vPortSetupTimerInterrupt+0x34>)
 80041c0:	2207      	movs	r2, #7
 80041c2:	601a      	str	r2, [r3, #0]
}
 80041c4:	bf00      	nop
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	e000e010 	.word	0xe000e010
 80041d4:	e000e018 	.word	0xe000e018
 80041d8:	20000000 	.word	0x20000000
 80041dc:	10624dd3 	.word	0x10624dd3
 80041e0:	e000e014 	.word	0xe000e014

080041e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80041e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80041f4 <vPortEnableVFP+0x10>
 80041e8:	6801      	ldr	r1, [r0, #0]
 80041ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041ee:	6001      	str	r1, [r0, #0]
 80041f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80041f2:	bf00      	nop
 80041f4:	e000ed88 	.word	0xe000ed88

080041f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08a      	sub	sp, #40	; 0x28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004204:	f7ff fae2 	bl	80037cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004208:	4b5b      	ldr	r3, [pc, #364]	; (8004378 <pvPortMalloc+0x180>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004210:	f000 f920 	bl	8004454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004214:	4b59      	ldr	r3, [pc, #356]	; (800437c <pvPortMalloc+0x184>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	f040 8093 	bne.w	8004348 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01d      	beq.n	8004264 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004228:	2208      	movs	r2, #8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4413      	add	r3, r2
 800422e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	2b00      	cmp	r3, #0
 8004238:	d014      	beq.n	8004264 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f023 0307 	bic.w	r3, r3, #7
 8004240:	3308      	adds	r3, #8
 8004242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <pvPortMalloc+0x6c>
	__asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	617b      	str	r3, [r7, #20]
}
 8004260:	bf00      	nop
 8004262:	e7fe      	b.n	8004262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d06e      	beq.n	8004348 <pvPortMalloc+0x150>
 800426a:	4b45      	ldr	r3, [pc, #276]	; (8004380 <pvPortMalloc+0x188>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	429a      	cmp	r2, r3
 8004272:	d869      	bhi.n	8004348 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004274:	4b43      	ldr	r3, [pc, #268]	; (8004384 <pvPortMalloc+0x18c>)
 8004276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004278:	4b42      	ldr	r3, [pc, #264]	; (8004384 <pvPortMalloc+0x18c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800427e:	e004      	b.n	800428a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	429a      	cmp	r2, r3
 8004292:	d903      	bls.n	800429c <pvPortMalloc+0xa4>
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1f1      	bne.n	8004280 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800429c:	4b36      	ldr	r3, [pc, #216]	; (8004378 <pvPortMalloc+0x180>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d050      	beq.n	8004348 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2208      	movs	r2, #8
 80042ac:	4413      	add	r3, r2
 80042ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	1ad2      	subs	r2, r2, r3
 80042c0:	2308      	movs	r3, #8
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d91f      	bls.n	8004308 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80042c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4413      	add	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <pvPortMalloc+0xf8>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	613b      	str	r3, [r7, #16]
}
 80042ec:	bf00      	nop
 80042ee:	e7fe      	b.n	80042ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	1ad2      	subs	r2, r2, r3
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004302:	69b8      	ldr	r0, [r7, #24]
 8004304:	f000 f908 	bl	8004518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004308:	4b1d      	ldr	r3, [pc, #116]	; (8004380 <pvPortMalloc+0x188>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <pvPortMalloc+0x188>)
 8004314:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004316:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <pvPortMalloc+0x188>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <pvPortMalloc+0x190>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d203      	bcs.n	800432a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004322:	4b17      	ldr	r3, [pc, #92]	; (8004380 <pvPortMalloc+0x188>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a18      	ldr	r2, [pc, #96]	; (8004388 <pvPortMalloc+0x190>)
 8004328:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	4b13      	ldr	r3, [pc, #76]	; (800437c <pvPortMalloc+0x184>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	431a      	orrs	r2, r3
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800433e:	4b13      	ldr	r3, [pc, #76]	; (800438c <pvPortMalloc+0x194>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	4a11      	ldr	r2, [pc, #68]	; (800438c <pvPortMalloc+0x194>)
 8004346:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004348:	f7ff fa4e 	bl	80037e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <pvPortMalloc+0x174>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	60fb      	str	r3, [r7, #12]
}
 8004368:	bf00      	nop
 800436a:	e7fe      	b.n	800436a <pvPortMalloc+0x172>
	return pvReturn;
 800436c:	69fb      	ldr	r3, [r7, #28]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3728      	adds	r7, #40	; 0x28
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	2000408c 	.word	0x2000408c
 800437c:	200040a0 	.word	0x200040a0
 8004380:	20004090 	.word	0x20004090
 8004384:	20004084 	.word	0x20004084
 8004388:	20004094 	.word	0x20004094
 800438c:	20004098 	.word	0x20004098

08004390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d04d      	beq.n	800443e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80043a2:	2308      	movs	r3, #8
 80043a4:	425b      	negs	r3, r3
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4413      	add	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	4b24      	ldr	r3, [pc, #144]	; (8004448 <vPortFree+0xb8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <vPortFree+0x44>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	60fb      	str	r3, [r7, #12]
}
 80043d0:	bf00      	nop
 80043d2:	e7fe      	b.n	80043d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <vPortFree+0x62>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	60bb      	str	r3, [r7, #8]
}
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	4b14      	ldr	r3, [pc, #80]	; (8004448 <vPortFree+0xb8>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01e      	beq.n	800443e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d11a      	bne.n	800443e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <vPortFree+0xb8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	43db      	mvns	r3, r3
 8004412:	401a      	ands	r2, r3
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004418:	f7ff f9d8 	bl	80037cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <vPortFree+0xbc>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4413      	add	r3, r2
 8004426:	4a09      	ldr	r2, [pc, #36]	; (800444c <vPortFree+0xbc>)
 8004428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800442a:	6938      	ldr	r0, [r7, #16]
 800442c:	f000 f874 	bl	8004518 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <vPortFree+0xc0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3301      	adds	r3, #1
 8004436:	4a06      	ldr	r2, [pc, #24]	; (8004450 <vPortFree+0xc0>)
 8004438:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800443a:	f7ff f9d5 	bl	80037e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800443e:	bf00      	nop
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	200040a0 	.word	0x200040a0
 800444c:	20004090 	.word	0x20004090
 8004450:	2000409c 	.word	0x2000409c

08004454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800445a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800445e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004460:	4b27      	ldr	r3, [pc, #156]	; (8004500 <prvHeapInit+0xac>)
 8004462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00c      	beq.n	8004488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3307      	adds	r3, #7
 8004472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0307 	bic.w	r3, r3, #7
 800447a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <prvHeapInit+0xac>)
 8004484:	4413      	add	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800448c:	4a1d      	ldr	r2, [pc, #116]	; (8004504 <prvHeapInit+0xb0>)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004492:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <prvHeapInit+0xb0>)
 8004494:	2200      	movs	r2, #0
 8004496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	4413      	add	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80044a0:	2208      	movs	r2, #8
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0307 	bic.w	r3, r3, #7
 80044ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4a15      	ldr	r2, [pc, #84]	; (8004508 <prvHeapInit+0xb4>)
 80044b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80044b6:	4b14      	ldr	r3, [pc, #80]	; (8004508 <prvHeapInit+0xb4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2200      	movs	r2, #0
 80044bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80044be:	4b12      	ldr	r3, [pc, #72]	; (8004508 <prvHeapInit+0xb4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	1ad2      	subs	r2, r2, r3
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044d4:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <prvHeapInit+0xb4>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4a0a      	ldr	r2, [pc, #40]	; (800450c <prvHeapInit+0xb8>)
 80044e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	4a09      	ldr	r2, [pc, #36]	; (8004510 <prvHeapInit+0xbc>)
 80044ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044ec:	4b09      	ldr	r3, [pc, #36]	; (8004514 <prvHeapInit+0xc0>)
 80044ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044f2:	601a      	str	r2, [r3, #0]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	20000484 	.word	0x20000484
 8004504:	20004084 	.word	0x20004084
 8004508:	2000408c 	.word	0x2000408c
 800450c:	20004094 	.word	0x20004094
 8004510:	20004090 	.word	0x20004090
 8004514:	200040a0 	.word	0x200040a0

08004518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004520:	4b28      	ldr	r3, [pc, #160]	; (80045c4 <prvInsertBlockIntoFreeList+0xac>)
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	e002      	b.n	800452c <prvInsertBlockIntoFreeList+0x14>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	429a      	cmp	r2, r3
 8004534:	d8f7      	bhi.n	8004526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	4413      	add	r3, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d108      	bne.n	800455a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	441a      	add	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	441a      	add	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d118      	bne.n	80045a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d00d      	beq.n	8004596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	441a      	add	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e008      	b.n	80045a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004596:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	e003      	b.n	80045a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d002      	beq.n	80045b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20004084 	.word	0x20004084
 80045c8:	2000408c 	.word	0x2000408c

080045cc <__libc_init_array>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	4d0d      	ldr	r5, [pc, #52]	; (8004604 <__libc_init_array+0x38>)
 80045d0:	4c0d      	ldr	r4, [pc, #52]	; (8004608 <__libc_init_array+0x3c>)
 80045d2:	1b64      	subs	r4, r4, r5
 80045d4:	10a4      	asrs	r4, r4, #2
 80045d6:	2600      	movs	r6, #0
 80045d8:	42a6      	cmp	r6, r4
 80045da:	d109      	bne.n	80045f0 <__libc_init_array+0x24>
 80045dc:	4d0b      	ldr	r5, [pc, #44]	; (800460c <__libc_init_array+0x40>)
 80045de:	4c0c      	ldr	r4, [pc, #48]	; (8004610 <__libc_init_array+0x44>)
 80045e0:	f000 f8e8 	bl	80047b4 <_init>
 80045e4:	1b64      	subs	r4, r4, r5
 80045e6:	10a4      	asrs	r4, r4, #2
 80045e8:	2600      	movs	r6, #0
 80045ea:	42a6      	cmp	r6, r4
 80045ec:	d105      	bne.n	80045fa <__libc_init_array+0x2e>
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f4:	4798      	blx	r3
 80045f6:	3601      	adds	r6, #1
 80045f8:	e7ee      	b.n	80045d8 <__libc_init_array+0xc>
 80045fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fe:	4798      	blx	r3
 8004600:	3601      	adds	r6, #1
 8004602:	e7f2      	b.n	80045ea <__libc_init_array+0x1e>
 8004604:	080048c0 	.word	0x080048c0
 8004608:	080048c0 	.word	0x080048c0
 800460c:	080048c0 	.word	0x080048c0
 8004610:	080048c4 	.word	0x080048c4

08004614 <__retarget_lock_acquire_recursive>:
 8004614:	4770      	bx	lr

08004616 <__retarget_lock_release_recursive>:
 8004616:	4770      	bx	lr

08004618 <memset>:
 8004618:	4402      	add	r2, r0
 800461a:	4603      	mov	r3, r0
 800461c:	4293      	cmp	r3, r2
 800461e:	d100      	bne.n	8004622 <memset+0xa>
 8004620:	4770      	bx	lr
 8004622:	f803 1b01 	strb.w	r1, [r3], #1
 8004626:	e7f9      	b.n	800461c <memset+0x4>

08004628 <cleanup_glue>:
 8004628:	b538      	push	{r3, r4, r5, lr}
 800462a:	460c      	mov	r4, r1
 800462c:	6809      	ldr	r1, [r1, #0]
 800462e:	4605      	mov	r5, r0
 8004630:	b109      	cbz	r1, 8004636 <cleanup_glue+0xe>
 8004632:	f7ff fff9 	bl	8004628 <cleanup_glue>
 8004636:	4621      	mov	r1, r4
 8004638:	4628      	mov	r0, r5
 800463a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800463e:	f000 b869 	b.w	8004714 <_free_r>
	...

08004644 <_reclaim_reent>:
 8004644:	4b2c      	ldr	r3, [pc, #176]	; (80046f8 <_reclaim_reent+0xb4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4283      	cmp	r3, r0
 800464a:	b570      	push	{r4, r5, r6, lr}
 800464c:	4604      	mov	r4, r0
 800464e:	d051      	beq.n	80046f4 <_reclaim_reent+0xb0>
 8004650:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004652:	b143      	cbz	r3, 8004666 <_reclaim_reent+0x22>
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d14a      	bne.n	80046f0 <_reclaim_reent+0xac>
 800465a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800465c:	6819      	ldr	r1, [r3, #0]
 800465e:	b111      	cbz	r1, 8004666 <_reclaim_reent+0x22>
 8004660:	4620      	mov	r0, r4
 8004662:	f000 f857 	bl	8004714 <_free_r>
 8004666:	6961      	ldr	r1, [r4, #20]
 8004668:	b111      	cbz	r1, 8004670 <_reclaim_reent+0x2c>
 800466a:	4620      	mov	r0, r4
 800466c:	f000 f852 	bl	8004714 <_free_r>
 8004670:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004672:	b111      	cbz	r1, 800467a <_reclaim_reent+0x36>
 8004674:	4620      	mov	r0, r4
 8004676:	f000 f84d 	bl	8004714 <_free_r>
 800467a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800467c:	b111      	cbz	r1, 8004684 <_reclaim_reent+0x40>
 800467e:	4620      	mov	r0, r4
 8004680:	f000 f848 	bl	8004714 <_free_r>
 8004684:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004686:	b111      	cbz	r1, 800468e <_reclaim_reent+0x4a>
 8004688:	4620      	mov	r0, r4
 800468a:	f000 f843 	bl	8004714 <_free_r>
 800468e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004690:	b111      	cbz	r1, 8004698 <_reclaim_reent+0x54>
 8004692:	4620      	mov	r0, r4
 8004694:	f000 f83e 	bl	8004714 <_free_r>
 8004698:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800469a:	b111      	cbz	r1, 80046a2 <_reclaim_reent+0x5e>
 800469c:	4620      	mov	r0, r4
 800469e:	f000 f839 	bl	8004714 <_free_r>
 80046a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80046a4:	b111      	cbz	r1, 80046ac <_reclaim_reent+0x68>
 80046a6:	4620      	mov	r0, r4
 80046a8:	f000 f834 	bl	8004714 <_free_r>
 80046ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046ae:	b111      	cbz	r1, 80046b6 <_reclaim_reent+0x72>
 80046b0:	4620      	mov	r0, r4
 80046b2:	f000 f82f 	bl	8004714 <_free_r>
 80046b6:	69a3      	ldr	r3, [r4, #24]
 80046b8:	b1e3      	cbz	r3, 80046f4 <_reclaim_reent+0xb0>
 80046ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80046bc:	4620      	mov	r0, r4
 80046be:	4798      	blx	r3
 80046c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80046c2:	b1b9      	cbz	r1, 80046f4 <_reclaim_reent+0xb0>
 80046c4:	4620      	mov	r0, r4
 80046c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046ca:	f7ff bfad 	b.w	8004628 <cleanup_glue>
 80046ce:	5949      	ldr	r1, [r1, r5]
 80046d0:	b941      	cbnz	r1, 80046e4 <_reclaim_reent+0xa0>
 80046d2:	3504      	adds	r5, #4
 80046d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046d6:	2d80      	cmp	r5, #128	; 0x80
 80046d8:	68d9      	ldr	r1, [r3, #12]
 80046da:	d1f8      	bne.n	80046ce <_reclaim_reent+0x8a>
 80046dc:	4620      	mov	r0, r4
 80046de:	f000 f819 	bl	8004714 <_free_r>
 80046e2:	e7ba      	b.n	800465a <_reclaim_reent+0x16>
 80046e4:	680e      	ldr	r6, [r1, #0]
 80046e6:	4620      	mov	r0, r4
 80046e8:	f000 f814 	bl	8004714 <_free_r>
 80046ec:	4631      	mov	r1, r6
 80046ee:	e7ef      	b.n	80046d0 <_reclaim_reent+0x8c>
 80046f0:	2500      	movs	r5, #0
 80046f2:	e7ef      	b.n	80046d4 <_reclaim_reent+0x90>
 80046f4:	bd70      	pop	{r4, r5, r6, pc}
 80046f6:	bf00      	nop
 80046f8:	20000010 	.word	0x20000010

080046fc <__malloc_lock>:
 80046fc:	4801      	ldr	r0, [pc, #4]	; (8004704 <__malloc_lock+0x8>)
 80046fe:	f7ff bf89 	b.w	8004614 <__retarget_lock_acquire_recursive>
 8004702:	bf00      	nop
 8004704:	2000454c 	.word	0x2000454c

08004708 <__malloc_unlock>:
 8004708:	4801      	ldr	r0, [pc, #4]	; (8004710 <__malloc_unlock+0x8>)
 800470a:	f7ff bf84 	b.w	8004616 <__retarget_lock_release_recursive>
 800470e:	bf00      	nop
 8004710:	2000454c 	.word	0x2000454c

08004714 <_free_r>:
 8004714:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004716:	2900      	cmp	r1, #0
 8004718:	d048      	beq.n	80047ac <_free_r+0x98>
 800471a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800471e:	9001      	str	r0, [sp, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	f1a1 0404 	sub.w	r4, r1, #4
 8004726:	bfb8      	it	lt
 8004728:	18e4      	addlt	r4, r4, r3
 800472a:	f7ff ffe7 	bl	80046fc <__malloc_lock>
 800472e:	4a20      	ldr	r2, [pc, #128]	; (80047b0 <_free_r+0x9c>)
 8004730:	9801      	ldr	r0, [sp, #4]
 8004732:	6813      	ldr	r3, [r2, #0]
 8004734:	4615      	mov	r5, r2
 8004736:	b933      	cbnz	r3, 8004746 <_free_r+0x32>
 8004738:	6063      	str	r3, [r4, #4]
 800473a:	6014      	str	r4, [r2, #0]
 800473c:	b003      	add	sp, #12
 800473e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004742:	f7ff bfe1 	b.w	8004708 <__malloc_unlock>
 8004746:	42a3      	cmp	r3, r4
 8004748:	d90b      	bls.n	8004762 <_free_r+0x4e>
 800474a:	6821      	ldr	r1, [r4, #0]
 800474c:	1862      	adds	r2, r4, r1
 800474e:	4293      	cmp	r3, r2
 8004750:	bf04      	itt	eq
 8004752:	681a      	ldreq	r2, [r3, #0]
 8004754:	685b      	ldreq	r3, [r3, #4]
 8004756:	6063      	str	r3, [r4, #4]
 8004758:	bf04      	itt	eq
 800475a:	1852      	addeq	r2, r2, r1
 800475c:	6022      	streq	r2, [r4, #0]
 800475e:	602c      	str	r4, [r5, #0]
 8004760:	e7ec      	b.n	800473c <_free_r+0x28>
 8004762:	461a      	mov	r2, r3
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	b10b      	cbz	r3, 800476c <_free_r+0x58>
 8004768:	42a3      	cmp	r3, r4
 800476a:	d9fa      	bls.n	8004762 <_free_r+0x4e>
 800476c:	6811      	ldr	r1, [r2, #0]
 800476e:	1855      	adds	r5, r2, r1
 8004770:	42a5      	cmp	r5, r4
 8004772:	d10b      	bne.n	800478c <_free_r+0x78>
 8004774:	6824      	ldr	r4, [r4, #0]
 8004776:	4421      	add	r1, r4
 8004778:	1854      	adds	r4, r2, r1
 800477a:	42a3      	cmp	r3, r4
 800477c:	6011      	str	r1, [r2, #0]
 800477e:	d1dd      	bne.n	800473c <_free_r+0x28>
 8004780:	681c      	ldr	r4, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	6053      	str	r3, [r2, #4]
 8004786:	4421      	add	r1, r4
 8004788:	6011      	str	r1, [r2, #0]
 800478a:	e7d7      	b.n	800473c <_free_r+0x28>
 800478c:	d902      	bls.n	8004794 <_free_r+0x80>
 800478e:	230c      	movs	r3, #12
 8004790:	6003      	str	r3, [r0, #0]
 8004792:	e7d3      	b.n	800473c <_free_r+0x28>
 8004794:	6825      	ldr	r5, [r4, #0]
 8004796:	1961      	adds	r1, r4, r5
 8004798:	428b      	cmp	r3, r1
 800479a:	bf04      	itt	eq
 800479c:	6819      	ldreq	r1, [r3, #0]
 800479e:	685b      	ldreq	r3, [r3, #4]
 80047a0:	6063      	str	r3, [r4, #4]
 80047a2:	bf04      	itt	eq
 80047a4:	1949      	addeq	r1, r1, r5
 80047a6:	6021      	streq	r1, [r4, #0]
 80047a8:	6054      	str	r4, [r2, #4]
 80047aa:	e7c7      	b.n	800473c <_free_r+0x28>
 80047ac:	b003      	add	sp, #12
 80047ae:	bd30      	pop	{r4, r5, pc}
 80047b0:	200040a4 	.word	0x200040a4

080047b4 <_init>:
 80047b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b6:	bf00      	nop
 80047b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ba:	bc08      	pop	{r3}
 80047bc:	469e      	mov	lr, r3
 80047be:	4770      	bx	lr

080047c0 <_fini>:
 80047c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c2:	bf00      	nop
 80047c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047c6:	bc08      	pop	{r3}
 80047c8:	469e      	mov	lr, r3
 80047ca:	4770      	bx	lr
